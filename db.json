{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"20c2a639fa7416232d7d0fbe73c13cf818d25add","modified":1579142924000},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1579178462000},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1579178462000},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1579178462000},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1579178462000},{"_id":"themes/next/README.md","hash":"dc026053a4d9fb97a58dbc3e9060e480f6852b23","modified":1579178462000},{"_id":"themes/next/_config.yml","hash":"9716ccfe12d9418c17cb30f602992de6dc3d3376","modified":1579343680468},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1579178462000},{"_id":"themes/next/gulpfile.js","hash":"72e6d5a6e32d5f95d82e4c4d0c963d39555bb760","modified":1579178462000},{"_id":"themes/next/package.json","hash":"19dda7fab09594faba989669e29de88c4289877f","modified":1579178462000},{"_id":"source/_posts/001-Introduction-to-Reinforment-Learning.md","hash":"a2686f7ebae624a19207b94185d97aa619b12cfe","modified":1579142924000},{"_id":"source/_posts/002-Markov-Decision-Process.md","hash":"baa491808ca819530f51d14b3ebd5213b2a9f280","modified":1579142924000},{"_id":"source/_posts/003-Planning-by-Dynamic-Programming.md","hash":"d19a8c15ecc069a937c9a20b78f888132b40d57f","modified":1579142924000},{"_id":"source/_posts/004-Model-Free-Prediction.md","hash":"50f47a80c79600ea70ea9030d34d9bb669337bea","modified":1579142924000},{"_id":"source/_posts/CS294-001-课程综述.md","hash":"9be06634d4c67f98ebdac61a6df0ad3b2852051f","modified":1579432322247},{"_id":"source/_posts/CS294-002-监督学习和模仿学习.md","hash":"48be4f3de855b6a3cb3824909c4541542c4abe8d","modified":1579440413729},{"_id":"source/_posts/CS294-004-强化学习介绍.md","hash":"6262b8414c38b1e80209b8e985839263fb4a2092","modified":1579491131298},{"_id":"source/_posts/006-Value-Function-Approximation.md","hash":"0e017f6c2e61a25d5bf150bba1ba347be50c2937","modified":1579142924000},{"_id":"source/_posts/007-Policy-Gradient.md","hash":"e8dd80cb7948d16f46f58435396b0832ea08926b","modified":1579142924000},{"_id":"source/_posts/005-Model-Free-Control.md","hash":"6c706cb335f8a953f4e21a8ab77284096a3f4f02","modified":1579142924000},{"_id":"source/_posts/LHY-ML-Week1.md","hash":"a2c93a5ef67927eb45b1147b3162e75a184b619c","modified":1579142924000},{"_id":"source/_posts/CS294-005-策略梯度简介.md","hash":"52c31de70b21104aad9132a993e6f63e852f8007","modified":1579142924000},{"_id":"source/_posts/sarsa-λ-推导.md","hash":"74a79eccd4aaf139234fa411397a26dacb8ef5f6","modified":1579142924000},{"_id":"source/_posts/服务器搭建jupyter-notebook.md","hash":"fccadeb8488946792859622b834ab937ea2a6399","modified":1579338113000},{"_id":"source/_posts/服务器搭建zerotier以通过外网访问，并在VPS搭建moon节点加速连接.md","hash":"5d7c7a4296a1c5949e8623e78a398488b7e5d3cb","modified":1579338815000},{"_id":"source/_posts/论文阅读-Deep-Counterfactual-Regret-Minimization.md","hash":"64143645ca818d9ed47f09e6bce6c79e370bd0d1","modified":1579338507000},{"_id":"source/_posts/论文阅读-DeepStack-Expert-Level-Artificial-Intelligence-in-Heads-Up-No-Limit-Poker.md","hash":"64d755e4b4b4923b2e4e641c070b7ba9d451fb58","modified":1579338730000},{"_id":"source/_posts/论文阅读-Monte-Carlo-Sampling-for-Regret-Minimization-in-Extensive-Games.md","hash":"4616828f3e512cca6a7d5a55950f69dafe5e1587","modified":1579142924000},{"_id":"source/_posts/论文阅读-Regret-Minimization-in-Games-with-Incomplete-Information.md","hash":"3715f7ce6c1f58afb714bc3272add532d9149d7d","modified":1579142924000},{"_id":"source/aboutme/index.md","hash":"cd7d3c3b2f557fb966500679babd7825b3a6a6d8","modified":1579142924000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1579178462000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"5b4c013e0598b3211ebd899265936cfdaf7c139f","modified":1579178462000},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1579178462000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"40a8089076005e0d26ef7c0db58a2b5b464cda6c","modified":1579178462000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1579178462000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"08cda41b4bcf687facfda19ab39718ec7a05ae54","modified":1579178462000},{"_id":"themes/next/docs/MATH.md","hash":"f520b336f16665e164d6edf075bdcc6aa17b31bc","modified":1579178462000},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1579178462000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"682937d48bf5d243842a76190921322e26c75247","modified":1579178462000},{"_id":"source/tags/index.md","hash":"d17ee46f3f4eb18b96bbe520b3394e46227d6f93","modified":1579142924000},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1579178462000},{"_id":"source/categories/index.md","hash":"96e6eb561c9016eaae47e3074c51b153ff1fb6de","modified":1579142924000},{"_id":"themes/next/languages/en.yml","hash":"89eb0cff04435307e4eccb0d72a653499627d02d","modified":1579178462000},{"_id":"themes/next/languages/default.yml","hash":"89eb0cff04435307e4eccb0d72a653499627d02d","modified":1579178462000},{"_id":"themes/next/languages/de.yml","hash":"285b294b1dd2ce49b0694beb4fd75ed05dc20ccb","modified":1579178462000},{"_id":"themes/next/languages/fa.yml","hash":"35468531ad0236df5b188f28bd1b4bb0c0537faf","modified":1579178462000},{"_id":"themes/next/languages/es.yml","hash":"3bd0977225a9b9dc3cdc856161b3a77e5993ac4a","modified":1579178462000},{"_id":"themes/next/languages/hu.yml","hash":"dd9e4cd2873ed9a9ae7cb89962eeff911de396b4","modified":1579178462000},{"_id":"themes/next/languages/fr.yml","hash":"5fe560d14824c71ea90b2a76d0c17b2332b9d08a","modified":1579178462000},{"_id":"themes/next/languages/id.yml","hash":"80c3db4c2dbbea0703f6c8f1191218f692899507","modified":1579178462000},{"_id":"themes/next/languages/ko.yml","hash":"14a162509dc71bb364335c20281d3bccbd2a51f3","modified":1579178462000},{"_id":"themes/next/languages/ja.yml","hash":"e61529ddf80426a5362ed07642216027615bd740","modified":1579178462000},{"_id":"themes/next/languages/nl.yml","hash":"4d9b09aff03648cbbbfeb0c51a2d1214320b5ec6","modified":1579178462000},{"_id":"themes/next/languages/it.yml","hash":"68ac5a0aa361210f51915e101c842ed1c9464889","modified":1579178462000},{"_id":"themes/next/languages/pt-BR.yml","hash":"024dcdeb30c93e57cd1ba4cd707f8988dcad2468","modified":1579178462000},{"_id":"themes/next/languages/pt.yml","hash":"88fb58e537a949c013a2adcdaebcbe09543c0bd2","modified":1579178462000},{"_id":"themes/next/languages/ru.yml","hash":"f7d5efd6289845f2375bbee8fe883813de745767","modified":1579178462000},{"_id":"themes/next/languages/vi.yml","hash":"0c0890ccffcb5cca0893de63ebad66e3ce740707","modified":1579178462000},{"_id":"themes/next/languages/tr.yml","hash":"e08d8d6ee9507a7c7d4450bc1c76b435470a3739","modified":1579178462000},{"_id":"themes/next/languages/zh-CN.yml","hash":"4b36a51556e87d236c6ac6ee6975de1beb95724c","modified":1579178462000},{"_id":"themes/next/languages/uk.yml","hash":"e58393cf726401bf50a772392e23507d9e11049e","modified":1579178462000},{"_id":"themes/next/languages/zh-HK.yml","hash":"6d83daf9df1811e3ae6cde5ad778c888d8027b13","modified":1579178462000},{"_id":"themes/next/languages/zh-TW.yml","hash":"5e395cb492a0b6284f8d2ffdd93f7380db31486f","modified":1579178462000},{"_id":"themes/next/layout/_layout.swig","hash":"29ee038b0d5ffdb45327598733ea968588367769","modified":1579178462000},{"_id":"themes/next/layout/archive.swig","hash":"dbae8c0b755405121b42706ccb6a0c029b91c6b9","modified":1579343980484},{"_id":"themes/next/layout/category.swig","hash":"c55debb2588e4746b02d31ec249bf0a84fdea260","modified":1579178462000},{"_id":"themes/next/layout/index.swig","hash":"3bc6fb1e9707d74b96e1346d3f03fe6584f764f4","modified":1579178462000},{"_id":"themes/next/layout/page.swig","hash":"e61d64c055b6497a04affc143f47fdd0a6dc495b","modified":1579178462000},{"_id":"themes/next/layout/post.swig","hash":"382d9f9a9b35e1f369585f7f9f9b5dd6fa58d2f0","modified":1579178462000},{"_id":"themes/next/layout/tag.swig","hash":"7ff6e34d557a3da1c6a29ecd97842bf73ff213dc","modified":1579178462000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1579178462000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1579178462000},{"_id":"themes/next/docs/ru/README.md","hash":"41b1bef32fb991410ebf559b4c45022549f95215","modified":1579178462000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"fe3f5cda1975114884d84bef384a562920d70335","modified":1579178462000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1579178462000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1579178462000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"4245fe9472647226692fcbdd5a52d6e6dcd251bc","modified":1579178462000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"17d7203e85a8ce9760c42a853dee0f26a8f7ee4e","modified":1579178462000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"0b0b9ec6ec4a89e701a3b91f8d7d95752d3e241b","modified":1579178462000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1579178462000},{"_id":"themes/next/scripts/events/index.js","hash":"9047d8ae2670e43429b16a7919a08a0a0a81afe0","modified":1579178462000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"f0ffb74de522749c9f2fda46970a61bdafbfbc24","modified":1579178462000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"b6a3611d40863c12804c5846994786119ce3b79f","modified":1579178462000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"7f37327bbcae7ed7d04d187fd5e9bc6bbf14926a","modified":1579178462000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1579178462000},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1579178462000},{"_id":"themes/next/scripts/filters/locals.js","hash":"5bbfdc1c373542159660b7a68ed0b57ca18ad10b","modified":1579178462000},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1579178462000},{"_id":"themes/next/scripts/filters/post.js","hash":"5e5035372b3d94a65309334c93303c858e072012","modified":1579178462000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"cb211b6b50913454b1737782e9e2af96cfa40448","modified":1579178462000},{"_id":"themes/next/scripts/helpers/font.js","hash":"32268fb4c59c5b37c1eb1c9582ab630e09e5cc7d","modified":1579178462000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"58347687b02f7ab5e64bef07525c8efa97c9e8fb","modified":1579178462000},{"_id":"themes/next/scripts/tags/button.js","hash":"1d1d25f7e579d92fa563778dd0f163e8eda190da","modified":1579178462000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"20e392b8583ba6ae5037449c2c7e191d3927641b","modified":1579178462000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1579178462000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1579178462000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1579178462000},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1579178462000},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1579178462000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1579178462000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1579178462000},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1579178462000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"815676d904f92748ddf4f529bed2baf066997bc6","modified":1579178462000},{"_id":"themes/next/layout/_macro/post.swig","hash":"049caf88e2cb8dde780b0c6196db984c7bc3a4cc","modified":1579178462000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e2c9db54cc9e154e882008fde6588b065fadc9a7","modified":1579178462000},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1579178462000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1579178462000},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"a3462c37ab6d7642b1e95860ea5c4cfbac78efab","modified":1579178462000},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1579178462000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1579178462000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"0c4914a5fd08f15beec71940218c814ad9a89f3f","modified":1579178462000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1579178462000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"1ee6335c12773dc43f8b92136770cb10d460c25c","modified":1579178462000},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1579178462000},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1579178462000},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1579178462000},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"dd6bd817cb69b5ad5e9746498146314b54054ff8","modified":1579178462000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"da6a9d14ed10203e378c6e2c00a7b5e7afabca58","modified":1579178462000},{"_id":"themes/next/source/css/main.styl","hash":"68c3377b643162aeaae2b60c196486fdb3b509c3","modified":1579178462000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1579178462000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1579178462000},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1579178462000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1579178462000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1579178462000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1579178462000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1579178462000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1579178462000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1579178462000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1579178462000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1579178462000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1579178462000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1579178462000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1579178462000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1579178462000},{"_id":"themes/next/source/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1579178462000},{"_id":"themes/next/source/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1579178462000},{"_id":"themes/next/source/js/local-search.js","hash":"9f3d3ddff86e7b2828772aba915a5ebfd7d9f55f","modified":1579178462000},{"_id":"themes/next/source/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1579178462000},{"_id":"themes/next/source/js/motion.js","hash":"26c6170bc861f33030084e15f9bd31e7e9050b0e","modified":1579178462000},{"_id":"themes/next/source/js/utils.js","hash":"6ef79d54e71d7ddbb2e7ffa5aa9bbd28c543c835","modified":1579178462000},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1579178462000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1579178462000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1579178462000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"b205d72a56b1827681f0a260c266e0c02065fd08","modified":1579178462000},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1579178462000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1579178462000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"1f20213af8da3127701e6bb9da995e5c91be2051","modified":1579178462000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1579178462000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1579178462000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"5ba0480c2dbb0626501c90c920be85ce2308103c","modified":1579178462000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1579178462000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1579178462000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1579178462000},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"e24c4dd78f6e4adee0e7c15eb8bca12eb92452e4","modified":1579178462000},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"a2bb0bec243685e670b60a3d54142950adc03af0","modified":1579178462000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1579178462000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1579178462000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1579178462000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1579178462000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"1638483d2d2dad1da4c841a6fb9f6ee96b850187","modified":1579178462000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"8f4b75cca6b021ab0ce73a5bb3436a93a5e4ce2b","modified":1579343530016},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"30528a8da30994b1ef9355a72b09b2cd85a7c0e9","modified":1579178462000},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"7487ca8f0e4b16351ea0d6b35dc52b0d32176d57","modified":1579178462000},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"e6076865dba066c5f0008e22217efb850d5af69c","modified":1579178462000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"bbf0c8e42491fac70f4f8165224f1d7d92a040d7","modified":1579178462000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"54ba9508a901c295a02c8e34e9cece7c7dcad518","modified":1579178462000},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"a56e4f6ad95c106f361d354f828d1ef4810b1d76","modified":1579178462000},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1579178462000},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1579178462000},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"94d54b0c65d504f772af1e62424952e092b6c21d","modified":1579178462000},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"1b7faa20a458b46369779b57bcc695bbc5d1c13a","modified":1579178462000},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"7fa01334a0ba84500e920bb9202baa08067d2ee1","modified":1579178462000},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1579178462000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"d6fa9e4432b87004c5678dfe2d4b2c1f4a702b93","modified":1579178462000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"733d6874aa4f50d1071e670a554508a5a0094eb3","modified":1579178462000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"716b78cd90addc4216413719554721cb362b0c18","modified":1579178462000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1579178462000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1579178462000},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1579178462000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1579178462000},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"fdcf006e1ba2e53eab65e901b6c63159538307ef","modified":1579178462000},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1579178462000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1579178462000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1579178462000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"d3dc3e051e6816cdd576d00cc70b18b8a4c6a495","modified":1579178462000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1579178462000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1579178462000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4d6f9e09ca4056ff6a5d4923e202126a75242183","modified":1579178462000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1579178462000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"fb27a38f9a4b8fcba4f637b03904f7a83cc73416","modified":1579178462000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"ed236103bccbcf608f7d5d5b33b9f995d2f1a7de","modified":1579178462000},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"e456d7a2aaabe55447f78cd952b30d70a6c1e742","modified":1579178462000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1579178462000},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1579178462000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1579178462000},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"0ea0bac09b0747bc16fde852164c0eaab2efe02c","modified":1579178462000},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1579178462000},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1579178462000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"801e1d2f59f7d2db4096c4788b8469b4165f4965","modified":1579178462000},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"4958fa997ff6df2b2ce05341f40cc3a81b0f91bb","modified":1579178462000},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"7fa72dc60c078842979861622839b109683e05a3","modified":1579178462000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2315dd8a7a2c7aabd29efa6193df08e805cb15fc","modified":1579178462000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"644c1f0b02be9bf59955ebdf496136b3fa4b660b","modified":1579178462000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0a25f3df1b5c39794365efde387647da81da884a","modified":1579178462000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"52550138127ae9ebbe049bcdacd94d767c003855","modified":1579178462000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"b9d7058db61df7bbd2b58779efe45621a06ffc18","modified":1579178462000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c261d685c5ed0df34718d94bb2ba977c0ed443e6","modified":1579178462000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"50bc57e66331c0f15a4527010b4ca3316ac92403","modified":1579178462000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d4e817e2b238ace5d7ac568ce0c5380196a6d039","modified":1579178462000},{"_id":"themes/next/source/js/schemes/muse.js","hash":"ae2a2502b77203e83f75a040c43e86a7ecb4873c","modified":1579178462000},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"f068b46f8c305c7436c2767492a6bed42dcd764c","modified":1579178462000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1579178462000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1579178462000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1579178462000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1579178462000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1579178462000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1579178462000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1579178462000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"80d359661d08b80ad561b97f8508766b3e1f6d01","modified":1579178462000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"47ee915d7b0a97e74140a25fbfc01c04d6781534","modified":1579178462000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"112f5e8f1fe5cec4419e87acfbdef0e615ed23f3","modified":1579178462000},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"bc87cea0b534f2d75db60f300b069456f6516d1b","modified":1579178462000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"170c4598cbbe49cd1527f94158d97d2320a6b906","modified":1579178462000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"990bd301ce2de0a6b936781c58318f3945d81bc2","modified":1579178462000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"44fe82eadbdbb2f66adda37ac83ebd0f85876bfc","modified":1579178462000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4f7879a50d4608c46cc2061c725a2564597a45bd","modified":1579178462000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"d8ba44b8e1a0332c5c1079ff65fc83d2918a5865","modified":1579178462000},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"3faa8a7cdb05ef3f3b02920d381773dfd54270a5","modified":1579178462000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1579178462000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1579178462000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1579178462000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1579178462000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"8e1cc5e3b20d804a7265f945b877388bffee39eb","modified":1579178462000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"1693ec6b53758ac15d2c7798c789d6ae8af913ea","modified":1579178462000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"4fb385d8533877678440c8faa08b68fa793cb1a2","modified":1579178462000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"24a086a6904bbf5355a354403c9b0e6069f7eb01","modified":1579178462000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e321bd62f5e04d1fdc101a470ec13604e99816a5","modified":1579178462000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"48743ac61af37a4de2026667e15a65de5e8cf542","modified":1579178462000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"3646e915b0a55f3b66e41d802b082aba88a76e06","modified":1579178462000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1579178462000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1579178462000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"a54662bd4cbbe316048a811d3b5c83fb6df63739","modified":1579178462000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"eeab294e14abbae231107e1a327e907b25323136","modified":1579178462000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1579178462000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1579178462000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"f1f81bca31e82ccbd375f0cb9fb8dbb3beac810d","modified":1579178462000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"71a3d7f2242706f7a6b79933a67ef3664cca3a24","modified":1579178462000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"b1a9afa11f8cf1b844682112ff931ac32b72ae39","modified":1579178462000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0424a1fcffa1ae82fe70935972a894aca885bf9a","modified":1579178462000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"71f71a089a9930c2401cdc22e5c6880a9b90ebcd","modified":1579178462000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1579178462000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1579178462000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1579178462000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1579178462000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1579178462000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1579178462000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1579178462000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1579178462000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6336c2b129db802221b1fd75e5fbe8aab85c0a1f","modified":1579178462000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1579178462000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"e3ade812b5541eca5b863ad3ff234ea95925bf31","modified":1579178462000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"5d5c022aa3b2f89c2f2a178212338bb64804dd75","modified":1579178462000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"4b84f35e7040f9adb5cc540c366d7f9eb4c48bcc","modified":1579178462000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"af182c0d1e52f94280f6108936914f04ed541eee","modified":1579178462000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1579178462000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"bcba503e956e4b737b062faa66341bd880f16c10","modified":1579178462000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9df5ba77e6cf36129bddc270407215c23c60ff38","modified":1579178462000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"eca4d80dd0df1c3b1bc06bd39e6a4bd6c56198df","modified":1579178462000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1579178462000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1579178462000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1579178462000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"284249dcfa3b49c5d76210bbb0f74f65fc2f12ea","modified":1579178462000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1579178462000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"a48ed1dc9978b1b621f0e12664738c0d855d8013","modified":1579178462000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1579178462000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1579178462000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1579178462000},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"f5821481440a0624c8aec5fc85f093de1527095f","modified":1579178462000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"0672ea2acf28dcc2cfc5244da36d3387d71a17cb","modified":1579178462000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1579178462000},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"4b237e2344f35e9d1f6dbc3842d5e432d478ebfd","modified":1579178462000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"c27b3056d5e22d3c66d8a152a23634314d5c4a60","modified":1579178462000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"d5d85d3646d184e0340924addcfd2523fb289d00","modified":1579178462000},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1579178462000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"a7ed54e2f52185a7b6bb9a8201f6c3aa74b0cb00","modified":1579178462000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1579178462000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"9b3ff4aa24069eab0e9771437013f45e450d4217","modified":1579178462000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"95339b71ac90553fb1634c536c9749055e0c788a","modified":1579178462000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"a237c290e8934d1a8cbbf22b3f30503d9663021d","modified":1579178462000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1579178462000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1579178462000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"521534f483440434e808f92377bc3fc73667c89a","modified":1579178462000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1579178462000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"9a18b186b08ec220d1b17cf83812bcdd06077814","modified":1579178462000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"7e19772f7b2a5c454f3c0949abc272209abc4684","modified":1579178462000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"b492a45422773ab2af06ee345d527ba4c6bbc608","modified":1579178462000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1579178462000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"b4923515ca8e44aa62e839ce948f759cfd1f896f","modified":1579178462000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1579178462000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"7213e3d0ad7c95717ecd4e701d6ee9248ef2bf9f","modified":1579178462000},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1579178462000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"5bf28a03ef021c27cfd713971caca5a0b9466fd1","modified":1579178462000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"1a14c1b92d8a4dd8aabb5949333ac0ac79094c6c","modified":1579178462000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"d2f0f2171722533bba308f944a2ec727b083582c","modified":1579178462000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"2dc2a5b7becb11de1d4bdab6b5195588ae878cfc","modified":1579178462000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1579178462000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1579178462000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1579178462000},{"_id":"public/./public/search.xml","hash":"5733007df62c415c714a8a08281913ab6b91a0c5","modified":1579491144450},{"_id":"public/tags/index.html","hash":"298f6c9478e79074e958ef062d1c9e5747847422","modified":1579491144830},{"_id":"public/aboutme/index.html","hash":"235137fbbc18d872a89c8bca5ce672a5b69eea88","modified":1579491145073},{"_id":"public/categories/index.html","hash":"1e5c25190ba69f2d1eeb9605a1a5e2d6630bff2c","modified":1579491145073},{"_id":"public/2020/01/19/CS294-001-课程综述/index.html","hash":"0d13c8cce3dc13047d02d26adc88f22c78d31876","modified":1579491145077},{"_id":"public/2019/09/18/CS294-005-策略梯度简介/index.html","hash":"6151aec7071a657d1af615248393281ebe8088f8","modified":1579491145080},{"_id":"public/2019/08/28/007-Policy-Gradient/index.html","hash":"69656cad9258740a32e0c475474ee9e2cbe4935a","modified":1579491145080},{"_id":"public/archives/index.html","hash":"1b8b940cb97eb49bb017683b7dd26d9f4024865d","modified":1579491145080},{"_id":"public/archives/2019/index.html","hash":"b93d8238d7be30f2fa7b0125402fac405ac8a266","modified":1579491145080},{"_id":"public/archives/page/2/index.html","hash":"15b3dcdaa79a4a2a2c43b8cf6ca29d45c820c602","modified":1579491145080},{"_id":"public/archives/2019/08/index.html","hash":"6fe8ff5953fa702adb8a5f8b1da78d7b3bb28d21","modified":1579491145080},{"_id":"public/archives/2019/09/index.html","hash":"586cf2d6624ee4fa386737914aeba6d5df20b4a5","modified":1579491145080},{"_id":"public/archives/2019/10/index.html","hash":"aaf1393de9cf2c85ed3b66dadde078d5538e7d12","modified":1579491145080},{"_id":"public/archives/2019/page/2/index.html","hash":"2da84ec01cf56a60e8d2ef4d3bee67dbdc4d09ee","modified":1579491145080},{"_id":"public/archives/2020/index.html","hash":"327da05a0e46c9a9e56ff8663048e8435391fda8","modified":1579491145080},{"_id":"public/categories/RL-David-Silver/index.html","hash":"ccfd2d90a2bfbd411fe1874a49bacc614545c2b5","modified":1579491145080},{"_id":"public/archives/2020/01/index.html","hash":"85e1d1c4e7ada8d47b5655bb19b7f0614fcad745","modified":1579491145080},{"_id":"public/categories/LHY-ML/index.html","hash":"ee39bac87d70bbbb6cd45657950e73f936391670","modified":1579491145080},{"_id":"public/categories/RL-CS294/index.html","hash":"90b5ba313ab7b309ce909121021184250603699f","modified":1579491145080},{"_id":"public/categories/server/index.html","hash":"44acfe1a76964b303ffe2e0eec7aeb91479cf9fe","modified":1579491145080},{"_id":"public/categories/Server/index.html","hash":"80b23ef96504a88bd344998d67bb8efbf875a311","modified":1579491145080},{"_id":"public/categories/Paper/index.html","hash":"2b1d04ee18475f4d49f06c099d4ca0383a93549f","modified":1579491145080},{"_id":"public/tags/RL/index.html","hash":"12ac146c56b15da12ac67c105ae055df11419cc6","modified":1579491145080},{"_id":"public/tags/ML/index.html","hash":"425529d88731379fe4e3f8ddb7e2cc2456fad672","modified":1579491145081},{"_id":"public/tags/Server/index.html","hash":"005cdd1176433b28d144da6e5e6bec9b869f4731","modified":1579491145081},{"_id":"public/tags/CFR/index.html","hash":"9d07f5f56d076184836386206a13d18adf2aae38","modified":1579491145081},{"_id":"public/tags/Paper/index.html","hash":"8309ccb67d8e164c99884b4362758cf874a18d2b","modified":1579491145081},{"_id":"public/tags/RL/page/2/index.html","hash":"376d8ac35d662026ca3ec51e574afac1e1e8df51","modified":1579491145081},{"_id":"public/2020/01/18/论文阅读-DeepStack-Expert-Level-Artificial-Intelligence-in-Heads-Up-No-Limit-Poker/index.html","hash":"9e967311a4de367adee9b2f620c5aa246eed6ab6","modified":1579491145077},{"_id":"public/2020/01/18/服务器搭建zerotier以通过外网访问，并在VPS搭建moon节点加速连接/index.html","hash":"a4b136fb090c510706c30a7cfbdf18b3aa099d14","modified":1579491145077},{"_id":"public/2020/01/18/服务器搭建jupyter-notebook/index.html","hash":"c71b49e56829048a17636d8aaead96ded8d988bf","modified":1579491145081},{"_id":"public/2020/01/18/论文阅读-Deep-Counterfactual-Regret-Minimization/index.html","hash":"f762d80dd20d606f8c78772ef4423a5e646a9316","modified":1579491145077},{"_id":"public/2019/09/29/LHY-ML-Week1/index.html","hash":"a4b6320e60352adac2fe680628a3376f6b552ab5","modified":1579491145081},{"_id":"public/2019/10/15/论文阅读-Regret-Minimization-in-Games-with-Incomplete-Information/index.html","hash":"b8cff749fdcce0e936817e0fa462e1a445b581c5","modified":1579491145081},{"_id":"public/2019/10/19/论文阅读-Monte-Carlo-Sampling-for-Regret-Minimization-in-Extensive-Games/index.html","hash":"80c4e1f740acc6e1c815e9a1255b7e392f8de2cb","modified":1579491145081},{"_id":"public/2019/09/16/CS294-004-强化学习介绍/index.html","hash":"afe0ded30551c0d609c3fb68afe6d3b17975503a","modified":1579491145081},{"_id":"public/2019/09/15/CS294-002-监督学习和模仿学习/index.html","hash":"3eb65f096a7cffeb937601a311c90475749e3ddc","modified":1579491145081},{"_id":"public/2019/09/04/sarsa-λ-推导/index.html","hash":"2b615197366d92d44e2898806dc62aa5b07d7373","modified":1579491145081},{"_id":"public/2019/08/28/004-Model-Free-Prediction/index.html","hash":"78e925b13c47c0b48bc3b2010d068955e310d804","modified":1579491145081},{"_id":"public/2019/08/28/005-Model-Free-Control/index.html","hash":"271c148d12cc4ea50cbfd8d11e4b52764ac8b715","modified":1579491145081},{"_id":"public/2019/08/28/006-Value-Function-Approximation/index.html","hash":"cd75f13fcbc407abd0d23067f9bdd87fc2e09d50","modified":1579491145081},{"_id":"public/2019/08/28/003-Planning-by-Dynamic-Programming/index.html","hash":"ed5ae9def9bb6bd4b4ec580a0d5b7089233cf599","modified":1579491145081},{"_id":"public/2019/08/28/002-Markov-Decision-Process/index.html","hash":"de7eca9965b789ed33f55c4c1c2667d79c1cc7e6","modified":1579491145081},{"_id":"public/2019/08/28/001-Introduction-to-Reinforment-Learning/index.html","hash":"0771bc4759e212cb6c18f87a1758c2aa9a47e18f","modified":1579491145081},{"_id":"public/index.html","hash":"99a86e7a7ae0d429e0be3e06559b84a0bc83f147","modified":1579491145081},{"_id":"public/page/2/index.html","hash":"2c1d9019616e56409f39bb260afa4174862bbf6d","modified":1579491145081},{"_id":"public/CNAME","hash":"20c2a639fa7416232d7d0fbe73c13cf818d25add","modified":1579428443856},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1579428443856},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1579428443856},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1579428443856},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1579428443856},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1579428443856},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1579428443856},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1579428443856},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1579428443856},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1579428443856},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1579428443856},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1579428443857},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1579428443857},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1579428443857},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1579428443857},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1579428443857},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1579428443857},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1579428443857},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1579428444190},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1579428444192},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1579428444299},{"_id":"public/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1579428444299},{"_id":"public/js/motion.js","hash":"26c6170bc861f33030084e15f9bd31e7e9050b0e","modified":1579428444299},{"_id":"public/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1579428444299},{"_id":"public/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1579428444299},{"_id":"public/js/schemes/pisces.js","hash":"f068b46f8c305c7436c2767492a6bed42dcd764c","modified":1579428444299},{"_id":"public/js/schemes/muse.js","hash":"ae2a2502b77203e83f75a040c43e86a7ecb4873c","modified":1579428444299},{"_id":"public/js/local-search.js","hash":"9f3d3ddff86e7b2828772aba915a5ebfd7d9f55f","modified":1579428444302},{"_id":"public/js/utils.js","hash":"6ef79d54e71d7ddbb2e7ffa5aa9bbd28c543c835","modified":1579428444302},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1579428444303},{"_id":"public/css/main.css","hash":"3508e8888f272dac0cae0651adcecd4fbf69eb64","modified":1579428444303},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1579428444304},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1579428444305},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1579428444306},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1579428444368},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"e39f7375a78865a96a30e3a031ec2525fcfa3eaa","modified":1579428444371}],"Category":[{"name":"RL(David Silver)","_id":"ck5kuwy1f0002gz4dzmuyhheg"},{"name":"RL(CS294)","_id":"ck5kuwy1o000lgz4dcgbjznx6"},{"name":"LHY-ML","_id":"ck5kuwy1v0017gz4dr7wy3cvb"},{"name":"server","_id":"ck5kuwy1w001egz4dju8qh3ha"},{"name":"Server","_id":"ck5kuwy1w001kgz4dqaso911o"},{"name":"Paper","_id":"ck5kuwy1x001ogz4drjbqxfe1"}],"Data":[],"Page":[{"title":"aboutme","date":"2019-08-28T08:01:35.000Z","_content":"","source":"aboutme/index.md","raw":"---\ntitle: aboutme\ndate: 2019-08-28 16:01:35\n---\n","updated":"2020-01-16T02:48:44.000Z","path":"aboutme/index.html","comments":1,"layout":"page","_id":"ck5kuwy2j001vgz4dr81go7s5","content":"<!-- build time:Sun Jan 19 2020 18:07:22 GMT+0800 (GMT+08:00) --><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sun Jan 19 2020 18:07:22 GMT+0800 (GMT+08:00) --><!-- rebuild by neat -->"},{"title":"tags","date":"2019-08-28T08:11:30.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-08-28 16:11:30\ntype: \"tags\"\n---\n","updated":"2020-01-16T02:48:44.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck5kuwy2k001xgz4dimpxw7ct","content":"<!-- build time:Sun Jan 19 2020 18:07:22 GMT+0800 (GMT+08:00) --><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sun Jan 19 2020 18:07:22 GMT+0800 (GMT+08:00) --><!-- rebuild by neat -->"},{"title":"categories","date":"2019-08-28T08:12:45.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-08-28 16:12:45\ntype: \"categories\"\n---\n","updated":"2020-01-16T02:48:44.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck5kuwy2o0020gz4d7zxyq1ro","content":"<!-- build time:Sun Jan 19 2020 18:07:22 GMT+0800 (GMT+08:00) --><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sun Jan 19 2020 18:07:22 GMT+0800 (GMT+08:00) --><!-- rebuild by neat -->"}],"Post":[{"title":"001-Introduction to Reinforment Learning","date":"2019-08-28T09:11:51.000Z","mathjax":true,"_content":"### RL Problem\n\nReinforcement Learning is based on the **reward hypothesis**\n\n> All goals can be described by the maximisation of expected cumulative reward\n\n#### History and state\n\nThe history is the sequence of observations, actions, rewards\n\n$$\nH_t = O_1, R_1, A_1,...,A_{t-1},O_t,R_t\n$$\n\nState is the information used to determine what happens next. State is a function of the history.\n\n$$\nS_t = f(H_t)\n$$\n\n* Environment State\n* Agent State\n\n\n* Full Observability --> ES = AS --> Markov decision process  \n* Partial Observability --> ES ≠ AS --> Partially observable MDP\n\n### RL Agent\n\nThree Compoents:\n#### Pollcy\n\n* agent's behavior function \n* map from state to action\n$$\na = \\pi(s) \\\\\n\\pi(a|s)=P[A_t = a | S_t = s]\n$$\n\n#### Value function\n\n* how good is each state and/or action\n* used to evaluate state\n$$\nV_\\pi(s)=E\\pi[R_{t+1}+\\gamma R_{t+2}+\\gamma ^2R_{t+3}+...|S_t=s]\n$$\n\n#### Model\n\n* agent's representation of the environment \n* predict what the environment will do next\n* P predict the next state\n* R predict the next reward\n$$\nP_{ss'}^a=P[S_{t+1}=s'|S_t=s,A_t=a] \\\\\nR_s^a=E[R_{t+1}|S_t=s,A_t=a]\n$$\n#### Method\n![image](https://ww1.sinaimg.cn/large/006A69aEly1g5nyslmwfvj30gs0exq52.jpg)\n\n### Problems with RL\n\n#### Learning and Planning\n\n* Reinforcement Learning\n    * Environment is unknown\n    * agent interacts with the environment\n    * agent imporves its policy\n* Planning\n    * model of the environment is known \n    * agent performs computation with its model\n    * agent imporves its policy\n\n#### Exploration and Exploitation\n\n* Exploration: finds more information about the environment \n* Exploitation: exploit known information to maximise reward\n\n#### Prediction and Control\n\n* Prediction: evaluate the future / Given the policy\n    * Policy --> Value function\n* Control: optimise the future / Find the best policy\n    * Optimal Value function and Optimal Policy ","source":"_posts/001-Introduction-to-Reinforment-Learning.md","raw":"---\ntitle: 001-Introduction to Reinforment Learning\ndate: 2019-08-28 17:11:51\nmathjax: true\ncategories:\n    - RL(David Silver)\ntags:\n    - RL\n---\n### RL Problem\n\nReinforcement Learning is based on the **reward hypothesis**\n\n> All goals can be described by the maximisation of expected cumulative reward\n\n#### History and state\n\nThe history is the sequence of observations, actions, rewards\n\n$$\nH_t = O_1, R_1, A_1,...,A_{t-1},O_t,R_t\n$$\n\nState is the information used to determine what happens next. State is a function of the history.\n\n$$\nS_t = f(H_t)\n$$\n\n* Environment State\n* Agent State\n\n\n* Full Observability --> ES = AS --> Markov decision process  \n* Partial Observability --> ES ≠ AS --> Partially observable MDP\n\n### RL Agent\n\nThree Compoents:\n#### Pollcy\n\n* agent's behavior function \n* map from state to action\n$$\na = \\pi(s) \\\\\n\\pi(a|s)=P[A_t = a | S_t = s]\n$$\n\n#### Value function\n\n* how good is each state and/or action\n* used to evaluate state\n$$\nV_\\pi(s)=E\\pi[R_{t+1}+\\gamma R_{t+2}+\\gamma ^2R_{t+3}+...|S_t=s]\n$$\n\n#### Model\n\n* agent's representation of the environment \n* predict what the environment will do next\n* P predict the next state\n* R predict the next reward\n$$\nP_{ss'}^a=P[S_{t+1}=s'|S_t=s,A_t=a] \\\\\nR_s^a=E[R_{t+1}|S_t=s,A_t=a]\n$$\n#### Method\n![image](https://ww1.sinaimg.cn/large/006A69aEly1g5nyslmwfvj30gs0exq52.jpg)\n\n### Problems with RL\n\n#### Learning and Planning\n\n* Reinforcement Learning\n    * Environment is unknown\n    * agent interacts with the environment\n    * agent imporves its policy\n* Planning\n    * model of the environment is known \n    * agent performs computation with its model\n    * agent imporves its policy\n\n#### Exploration and Exploitation\n\n* Exploration: finds more information about the environment \n* Exploitation: exploit known information to maximise reward\n\n#### Prediction and Control\n\n* Prediction: evaluate the future / Given the policy\n    * Policy --> Value function\n* Control: optimise the future / Find the best policy\n    * Optimal Value function and Optimal Policy ","slug":"001-Introduction-to-Reinforment-Learning","published":1,"updated":"2020-01-16T02:48:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5kuwy1b0000gz4dlk3epgwu","content":"<!-- build time:Sun Jan 19 2020 18:07:22 GMT+0800 (GMT+08:00) --><h3 id=\"RL-Problem\"><a href=\"#RL-Problem\" class=\"headerlink\" title=\"RL Problem\"></a>RL Problem</h3><p>Reinforcement Learning is based on the <strong>reward hypothesis</strong></p><blockquote><p>All goals can be described by the maximisation of expected cumulative reward</p></blockquote><h4 id=\"History-and-state\"><a href=\"#History-and-state\" class=\"headerlink\" title=\"History and state\"></a>History and state</h4><p>The history is the sequence of observations, actions, rewards</p><script type=\"math/tex;mode=display\">H_t = O_1, R_1, A_1,...,A_{t-1},O_t,R_t</script><p>State is the information used to determine what happens next. State is a function of the history.</p><script type=\"math/tex;mode=display\">S_t = f(H_t)</script><ul><li>Environment State</li><li>Agent State</li></ul><ul><li>Full Observability —&gt; ES = AS —&gt; Markov decision process</li><li>Partial Observability —&gt; ES ≠ AS —&gt; Partially observable MDP</li></ul><h3 id=\"RL-Agent\"><a href=\"#RL-Agent\" class=\"headerlink\" title=\"RL Agent\"></a>RL Agent</h3><p>Three Compoents:</p><h4 id=\"Pollcy\"><a href=\"#Pollcy\" class=\"headerlink\" title=\"Pollcy\"></a>Pollcy</h4><ul><li>agent’s behavior function</li><li>map from state to action<script type=\"math/tex;mode=display\">a = \\pi(s) \\\\\n\\pi(a|s)=P[A_t = a | S_t = s]</script></li></ul><h4 id=\"Value-function\"><a href=\"#Value-function\" class=\"headerlink\" title=\"Value function\"></a>Value function</h4><ul><li>how good is each state and/or action</li><li>used to evaluate state<script type=\"math/tex;mode=display\">V_\\pi(s)=E\\pi[R_{t+1}+\\gamma R_{t+2}+\\gamma ^2R_{t+3}+...|S_t=s]</script></li></ul><h4 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h4><ul><li>agent’s representation of the environment</li><li>predict what the environment will do next</li><li>P predict the next state</li><li>R predict the next reward<script type=\"math/tex;mode=display\">P_{ss'}^a=P[S_{t+1}=s'|S_t=s,A_t=a] \\\\\nR_s^a=E[R_{t+1}|S_t=s,A_t=a]</script><h4 id=\"Method\"><a href=\"#Method\" class=\"headerlink\" title=\"Method\"></a>Method</h4><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g5nyslmwfvj30gs0exq52.jpg\" alt=\"image\"></li></ul><h3 id=\"Problems-with-RL\"><a href=\"#Problems-with-RL\" class=\"headerlink\" title=\"Problems with RL\"></a>Problems with RL</h3><h4 id=\"Learning-and-Planning\"><a href=\"#Learning-and-Planning\" class=\"headerlink\" title=\"Learning and Planning\"></a>Learning and Planning</h4><ul><li>Reinforcement Learning<ul><li>Environment is unknown</li><li>agent interacts with the environment</li><li>agent imporves its policy</li></ul></li><li>Planning<ul><li>model of the environment is known</li><li>agent performs computation with its model</li><li>agent imporves its policy</li></ul></li></ul><h4 id=\"Exploration-and-Exploitation\"><a href=\"#Exploration-and-Exploitation\" class=\"headerlink\" title=\"Exploration and Exploitation\"></a>Exploration and Exploitation</h4><ul><li>Exploration: finds more information about the environment</li><li>Exploitation: exploit known information to maximise reward</li></ul><h4 id=\"Prediction-and-Control\"><a href=\"#Prediction-and-Control\" class=\"headerlink\" title=\"Prediction and Control\"></a>Prediction and Control</h4><ul><li>Prediction: evaluate the future / Given the policy<ul><li>Policy —&gt; Value function</li></ul></li><li>Control: optimise the future / Find the best policy<ul><li>Optimal Value function and Optimal Policy</li></ul></li></ul><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sun Jan 19 2020 18:07:22 GMT+0800 (GMT+08:00) --><h3 id=\"RL-Problem\"><a href=\"#RL-Problem\" class=\"headerlink\" title=\"RL Problem\"></a>RL Problem</h3><p>Reinforcement Learning is based on the <strong>reward hypothesis</strong></p><blockquote><p>All goals can be described by the maximisation of expected cumulative reward</p></blockquote><h4 id=\"History-and-state\"><a href=\"#History-and-state\" class=\"headerlink\" title=\"History and state\"></a>History and state</h4><p>The history is the sequence of observations, actions, rewards</p><script type=\"math/tex;mode=display\">H_t = O_1, R_1, A_1,...,A_{t-1},O_t,R_t</script><p>State is the information used to determine what happens next. State is a function of the history.</p><script type=\"math/tex;mode=display\">S_t = f(H_t)</script><ul><li>Environment State</li><li>Agent State</li></ul><ul><li>Full Observability —&gt; ES = AS —&gt; Markov decision process</li><li>Partial Observability —&gt; ES ≠ AS —&gt; Partially observable MDP</li></ul><h3 id=\"RL-Agent\"><a href=\"#RL-Agent\" class=\"headerlink\" title=\"RL Agent\"></a>RL Agent</h3><p>Three Compoents:</p><h4 id=\"Pollcy\"><a href=\"#Pollcy\" class=\"headerlink\" title=\"Pollcy\"></a>Pollcy</h4><ul><li>agent’s behavior function</li><li>map from state to action<script type=\"math/tex;mode=display\">a = \\pi(s) \\\\\n\\pi(a|s)=P[A_t = a | S_t = s]</script></li></ul><h4 id=\"Value-function\"><a href=\"#Value-function\" class=\"headerlink\" title=\"Value function\"></a>Value function</h4><ul><li>how good is each state and/or action</li><li>used to evaluate state<script type=\"math/tex;mode=display\">V_\\pi(s)=E\\pi[R_{t+1}+\\gamma R_{t+2}+\\gamma ^2R_{t+3}+...|S_t=s]</script></li></ul><h4 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h4><ul><li>agent’s representation of the environment</li><li>predict what the environment will do next</li><li>P predict the next state</li><li>R predict the next reward<script type=\"math/tex;mode=display\">P_{ss'}^a=P[S_{t+1}=s'|S_t=s,A_t=a] \\\\\nR_s^a=E[R_{t+1}|S_t=s,A_t=a]</script><h4 id=\"Method\"><a href=\"#Method\" class=\"headerlink\" title=\"Method\"></a>Method</h4><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g5nyslmwfvj30gs0exq52.jpg\" alt=\"image\"></li></ul><h3 id=\"Problems-with-RL\"><a href=\"#Problems-with-RL\" class=\"headerlink\" title=\"Problems with RL\"></a>Problems with RL</h3><h4 id=\"Learning-and-Planning\"><a href=\"#Learning-and-Planning\" class=\"headerlink\" title=\"Learning and Planning\"></a>Learning and Planning</h4><ul><li>Reinforcement Learning<ul><li>Environment is unknown</li><li>agent interacts with the environment</li><li>agent imporves its policy</li></ul></li><li>Planning<ul><li>model of the environment is known</li><li>agent performs computation with its model</li><li>agent imporves its policy</li></ul></li></ul><h4 id=\"Exploration-and-Exploitation\"><a href=\"#Exploration-and-Exploitation\" class=\"headerlink\" title=\"Exploration and Exploitation\"></a>Exploration and Exploitation</h4><ul><li>Exploration: finds more information about the environment</li><li>Exploitation: exploit known information to maximise reward</li></ul><h4 id=\"Prediction-and-Control\"><a href=\"#Prediction-and-Control\" class=\"headerlink\" title=\"Prediction and Control\"></a>Prediction and Control</h4><ul><li>Prediction: evaluate the future / Given the policy<ul><li>Policy —&gt; Value function</li></ul></li><li>Control: optimise the future / Find the best policy<ul><li>Optimal Value function and Optimal Policy</li></ul></li></ul><!-- rebuild by neat -->"},{"title":"002-Markov Decision Process","mathjax":true,"date":"2019-08-28T09:27:10.000Z","_content":"### Markov Process \n\n#### Intro\n\nMarkov decision process formally describe an environment for reinforcement learning.\n\nThe environment is fully observable\n\nAll RL problems can be formalised as MDPs\n\n#### Markov Property\n\nThe future is independent of the past given the present.\n\n$$\n    P[S_{t+1} | S_t] = P[S_{t+1} | S1, ... , S_t]\n$$\n#### Markov Process\n\nMarkov Process is a tuple $ \\lt S, P\\gt $\n\n* S is a finite set of states\n* P is a state transition probability matrix\n\n### Markov Reward Process\n\nA Markov reward process is a Markov chain with values\n\nA Markov Process is a tuple $ \\lt S, P, R, \\gamma \\gt $\n* S is a finite set of states\n* P is a state transition probability matrix $P_{ss'} = P[S_{t+1} =s' | S_t = s]$\n* R is a reward function $R_s=E[R_{t+1} | S_t=s]$\n* $\\gamma$ is a discount factor\n\n#### Return\nreturn is the total discounted reward from time-step t\n$$\nG_t = R_{t+1} + \\gamma R_{t+2} + ... = \\sum_{k=0}^{\\infin}\\gamma^k R_{t+k+1}\n$$\n\nDiscount Reason:\n\n* 数值上方便\n* 避免计算循环\n* 未来的不确定性\n* 人类更偏向于立即收益\n\n#### Value function \n\nthe expected return stating from state s.\n$$\nv(s)=E[G_t|S_t=s] \\\\\nv(s) = R_s + \\gamma * \\sum_{s'\\in S}P_{ss'}v(s')\n$$\n\n### Markov Decision Process\n\nA markov decision process is a Markov reward process with decisions. It is an environment in which all states are Markov.\n\nA markov decision processs is a tuple $ \\lt S, A, P, R, \\gamma\\gt $\n\n* S is a finite set of states\n* A is a finite set of actions\n* P is a state transition probability matrix $P_{ss'}^a = P[S_{t+1} =s' | S_t = s, A_t=a]$\n* R is a reward function $R_s^a=E[R_{t+1} | S_t=s, A_t=a]$\n* $\\gamma$ is a discount factor\n\n#### Policy\n\nA policy $\\pi$ is a distribution over actions givens states.\n$$\n\\pi(a|s) = P[A_t=a|S_t=s]\n$$\n\nGiven an MDP, M = $ \\lt S, A, P, R, \\gamma\\gt $ and a policy $\\pi$\n\nThe state sequence is a Markov process $ \\lt S, P^\\pi\\gt $\n\nThe state and reward sequence is a Markov reward process $ \\lt S, P^\\pi, R^\\pi, \\gamma\\gt $\n\n$$\nP_{s, s'}^{\\pi} = \\sum_{a\\in A}\\pi(a|s)P_{ss'}^a \\\\\nR_s^{\\pi} = \\sum_{a\\in A}\\pi(a|s)R_s^a\n$$\n\n#### Value function\nThe state-value function of an MDP is the expected return starting from state S and then following policy $\\pi$\n$$\nV\\pi(s) = E_\\pi[G_t|S_t=s]\n$$\nThe action-value function of an MDP is the expected return  staring from state S, taking action a and then following policy $\\pi$\n$$\nq_\\pi(s, a) = E\\pi[G_t|S_t=s, A_t=a]\n$$\nBellman Expectation Equation:\n$$\nV_\\pi(s) = \\sum_{a\\in A}\\pi(a|s)q_\\pi(s,a)=\\sum_{a\\in A}\\pi(a|s)[R_s^a+\\gamma \\sum_{s'\\in S}P_{ss'}^a V_\\pi(s')] \n$$\n$$\nq_{\\pi}(s, a) = R_s^a + \\gamma \\sum_{s'\\in S}P_{ss'}^a V_\\pi(s') = R_s^a + \\gamma \\sum_{s'\\in S}P_{ss'}^a\\sum_{a'\\in A}\\pi(a'|s')q_\\pi(s', a')\n$$\n#### Optimal Value Function\n\nThe optimal value function is the maximum value function over all policies.\n$$\nV_*(s) = \\max_\\pi V_\\pi(s) \\\\ \nq_*(s, a) = \\max_\\pi q\\pi(s, a)\n$$\nBellman Optimality Equation\n$$\nV_*(s) = \\max_a q_*(s,a) = \\max_a R_s^a + \\gamma \\sum_{s'\\in S}P_{ss'}^a V_*(s') \\\\\nq_*(s,a) = R_s^a + \\gamma\\sum_{s'\\in S} P_{ss'}^a \\max_{a'} q_*(s', a')\n$$\nmethods\n* Value iteration\n* policy iteration\n* Q-learning\n* Sarsa\n\n### Partially Observable MDPs   \n\nA Partially Observable MDPs is a MDP with hidden states. It is a hidden Markov model with actions.\n\nA PDMDP is a tuple '$ \\lt S, A, O, P, R, Z, \\gamma\\gt $\n\n* S is a finite set of states\n* A is a finite set of actions\n* O is a finit set of observations\n* P is a state transition probability matrix $P_{ss'}^a = P[S_{t+1} =s' | S_t = s, A_t=a]$\n* R is a reward function $R_s^a=E[R_{t+1} | S_t=s, A_t=a]$\n* Z is an observation function, $Z_{s'o}^a=P[O_{t+1}=o|S_{t+1} =s', A_t=a$\n* $\\gamma$ is a discount factor\n\n#### Belief States\n\nA belief state b(h) is a probability distribution over states, conditioned on the history h\n$$\nb(h) = (P[S_t=s^1|H_t=h), ... , P(S_t=s^n | H_t=h)\n$$\n\n","source":"_posts/002-Markov-Decision-Process.md","raw":"---\ntitle: 002-Markov Decision Process\nmathjax: true\ndate: 2019-08-28 17:27:10\ncategories:\n    - RL(David Silver)\ntags:\n    - RL\n---\n### Markov Process \n\n#### Intro\n\nMarkov decision process formally describe an environment for reinforcement learning.\n\nThe environment is fully observable\n\nAll RL problems can be formalised as MDPs\n\n#### Markov Property\n\nThe future is independent of the past given the present.\n\n$$\n    P[S_{t+1} | S_t] = P[S_{t+1} | S1, ... , S_t]\n$$\n#### Markov Process\n\nMarkov Process is a tuple $ \\lt S, P\\gt $\n\n* S is a finite set of states\n* P is a state transition probability matrix\n\n### Markov Reward Process\n\nA Markov reward process is a Markov chain with values\n\nA Markov Process is a tuple $ \\lt S, P, R, \\gamma \\gt $\n* S is a finite set of states\n* P is a state transition probability matrix $P_{ss'} = P[S_{t+1} =s' | S_t = s]$\n* R is a reward function $R_s=E[R_{t+1} | S_t=s]$\n* $\\gamma$ is a discount factor\n\n#### Return\nreturn is the total discounted reward from time-step t\n$$\nG_t = R_{t+1} + \\gamma R_{t+2} + ... = \\sum_{k=0}^{\\infin}\\gamma^k R_{t+k+1}\n$$\n\nDiscount Reason:\n\n* 数值上方便\n* 避免计算循环\n* 未来的不确定性\n* 人类更偏向于立即收益\n\n#### Value function \n\nthe expected return stating from state s.\n$$\nv(s)=E[G_t|S_t=s] \\\\\nv(s) = R_s + \\gamma * \\sum_{s'\\in S}P_{ss'}v(s')\n$$\n\n### Markov Decision Process\n\nA markov decision process is a Markov reward process with decisions. It is an environment in which all states are Markov.\n\nA markov decision processs is a tuple $ \\lt S, A, P, R, \\gamma\\gt $\n\n* S is a finite set of states\n* A is a finite set of actions\n* P is a state transition probability matrix $P_{ss'}^a = P[S_{t+1} =s' | S_t = s, A_t=a]$\n* R is a reward function $R_s^a=E[R_{t+1} | S_t=s, A_t=a]$\n* $\\gamma$ is a discount factor\n\n#### Policy\n\nA policy $\\pi$ is a distribution over actions givens states.\n$$\n\\pi(a|s) = P[A_t=a|S_t=s]\n$$\n\nGiven an MDP, M = $ \\lt S, A, P, R, \\gamma\\gt $ and a policy $\\pi$\n\nThe state sequence is a Markov process $ \\lt S, P^\\pi\\gt $\n\nThe state and reward sequence is a Markov reward process $ \\lt S, P^\\pi, R^\\pi, \\gamma\\gt $\n\n$$\nP_{s, s'}^{\\pi} = \\sum_{a\\in A}\\pi(a|s)P_{ss'}^a \\\\\nR_s^{\\pi} = \\sum_{a\\in A}\\pi(a|s)R_s^a\n$$\n\n#### Value function\nThe state-value function of an MDP is the expected return starting from state S and then following policy $\\pi$\n$$\nV\\pi(s) = E_\\pi[G_t|S_t=s]\n$$\nThe action-value function of an MDP is the expected return  staring from state S, taking action a and then following policy $\\pi$\n$$\nq_\\pi(s, a) = E\\pi[G_t|S_t=s, A_t=a]\n$$\nBellman Expectation Equation:\n$$\nV_\\pi(s) = \\sum_{a\\in A}\\pi(a|s)q_\\pi(s,a)=\\sum_{a\\in A}\\pi(a|s)[R_s^a+\\gamma \\sum_{s'\\in S}P_{ss'}^a V_\\pi(s')] \n$$\n$$\nq_{\\pi}(s, a) = R_s^a + \\gamma \\sum_{s'\\in S}P_{ss'}^a V_\\pi(s') = R_s^a + \\gamma \\sum_{s'\\in S}P_{ss'}^a\\sum_{a'\\in A}\\pi(a'|s')q_\\pi(s', a')\n$$\n#### Optimal Value Function\n\nThe optimal value function is the maximum value function over all policies.\n$$\nV_*(s) = \\max_\\pi V_\\pi(s) \\\\ \nq_*(s, a) = \\max_\\pi q\\pi(s, a)\n$$\nBellman Optimality Equation\n$$\nV_*(s) = \\max_a q_*(s,a) = \\max_a R_s^a + \\gamma \\sum_{s'\\in S}P_{ss'}^a V_*(s') \\\\\nq_*(s,a) = R_s^a + \\gamma\\sum_{s'\\in S} P_{ss'}^a \\max_{a'} q_*(s', a')\n$$\nmethods\n* Value iteration\n* policy iteration\n* Q-learning\n* Sarsa\n\n### Partially Observable MDPs   \n\nA Partially Observable MDPs is a MDP with hidden states. It is a hidden Markov model with actions.\n\nA PDMDP is a tuple '$ \\lt S, A, O, P, R, Z, \\gamma\\gt $\n\n* S is a finite set of states\n* A is a finite set of actions\n* O is a finit set of observations\n* P is a state transition probability matrix $P_{ss'}^a = P[S_{t+1} =s' | S_t = s, A_t=a]$\n* R is a reward function $R_s^a=E[R_{t+1} | S_t=s, A_t=a]$\n* Z is an observation function, $Z_{s'o}^a=P[O_{t+1}=o|S_{t+1} =s', A_t=a$\n* $\\gamma$ is a discount factor\n\n#### Belief States\n\nA belief state b(h) is a probability distribution over states, conditioned on the history h\n$$\nb(h) = (P[S_t=s^1|H_t=h), ... , P(S_t=s^n | H_t=h)\n$$\n\n","slug":"002-Markov-Decision-Process","published":1,"updated":"2020-01-16T02:48:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5kuwy1e0001gz4d12n7p6n6","content":"<!-- build time:Sun Jan 19 2020 18:07:22 GMT+0800 (GMT+08:00) --><h3 id=\"Markov-Process\"><a href=\"#Markov-Process\" class=\"headerlink\" title=\"Markov Process\"></a>Markov Process</h3><h4 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h4><p>Markov decision process formally describe an environment for reinforcement learning.</p><p>The environment is fully observable</p><p>All RL problems can be formalised as MDPs</p><h4 id=\"Markov-Property\"><a href=\"#Markov-Property\" class=\"headerlink\" title=\"Markov Property\"></a>Markov Property</h4><p>The future is independent of the past given the present.</p><script type=\"math/tex;mode=display\">P[S_{t+1} | S_t] = P[S_{t+1} | S1, ... , S_t]</script><h4 id=\"Markov-Process-1\"><a href=\"#Markov-Process-1\" class=\"headerlink\" title=\"Markov Process\"></a>Markov Process</h4><p>Markov Process is a tuple $ \\lt S, P\\gt $</p><ul><li>S is a finite set of states</li><li>P is a state transition probability matrix</li></ul><h3 id=\"Markov-Reward-Process\"><a href=\"#Markov-Reward-Process\" class=\"headerlink\" title=\"Markov Reward Process\"></a>Markov Reward Process</h3><p>A Markov reward process is a Markov chain with values</p><p>A Markov Process is a tuple $ \\lt S, P, R, \\gamma \\gt $</p><ul><li>S is a finite set of states</li><li>P is a state transition probability matrix $P_{ss’} = P[S_{t+1} =s’ | S_t = s]$</li><li>R is a reward function $R_s=E[R_{t+1} | S_t=s]$</li><li>$\\gamma$ is a discount factor</li></ul><h4 id=\"Return\"><a href=\"#Return\" class=\"headerlink\" title=\"Return\"></a>Return</h4><p>return is the total discounted reward from time-step t</p><script type=\"math/tex;mode=display\">G_t = R_{t+1} + \\gamma R_{t+2} + ... = \\sum_{k=0}^{\\infin}\\gamma^k R_{t+k+1}</script><p>Discount Reason:</p><ul><li>数值上方便</li><li>避免计算循环</li><li>未来的不确定性</li><li>人类更偏向于立即收益</li></ul><h4 id=\"Value-function\"><a href=\"#Value-function\" class=\"headerlink\" title=\"Value function\"></a>Value function</h4><p>the expected return stating from state s.</p><script type=\"math/tex;mode=display\">v(s)=E[G_t|S_t=s] \\\\\nv(s) = R_s + \\gamma * \\sum_{s'\\in S}P_{ss'}v(s')</script><h3 id=\"Markov-Decision-Process\"><a href=\"#Markov-Decision-Process\" class=\"headerlink\" title=\"Markov Decision Process\"></a>Markov Decision Process</h3><p>A markov decision process is a Markov reward process with decisions. It is an environment in which all states are Markov.</p><p>A markov decision processs is a tuple $ \\lt S, A, P, R, \\gamma\\gt $</p><ul><li>S is a finite set of states</li><li>A is a finite set of actions</li><li>P is a state transition probability matrix $P_{ss’}^a = P[S_{t+1} =s’ | S_t = s, A_t=a]$</li><li>R is a reward function $R_s^a=E[R_{t+1} | S_t=s, A_t=a]$</li><li>$\\gamma$ is a discount factor</li></ul><h4 id=\"Policy\"><a href=\"#Policy\" class=\"headerlink\" title=\"Policy\"></a>Policy</h4><p>A policy $\\pi$ is a distribution over actions givens states.</p><script type=\"math/tex;mode=display\">\\pi(a|s) = P[A_t=a|S_t=s]</script><p>Given an MDP, M = $ \\lt S, A, P, R, \\gamma\\gt $ and a policy $\\pi$</p><p>The state sequence is a Markov process $ \\lt S, P^\\pi\\gt $</p><p>The state and reward sequence is a Markov reward process $ \\lt S, P^\\pi, R^\\pi, \\gamma\\gt $</p><script type=\"math/tex;mode=display\">P_{s, s'}^{\\pi} = \\sum_{a\\in A}\\pi(a|s)P_{ss'}^a \\\\\nR_s^{\\pi} = \\sum_{a\\in A}\\pi(a|s)R_s^a</script><h4 id=\"Value-function-1\"><a href=\"#Value-function-1\" class=\"headerlink\" title=\"Value function\"></a>Value function</h4><p>The state-value function of an MDP is the expected return starting from state S and then following policy $\\pi$</p><script type=\"math/tex;mode=display\">V\\pi(s) = E_\\pi[G_t|S_t=s]</script><p>The action-value function of an MDP is the expected return staring from state S, taking action a and then following policy $\\pi$</p><script type=\"math/tex;mode=display\">q_\\pi(s, a) = E\\pi[G_t|S_t=s, A_t=a]</script><p>Bellman Expectation Equation:</p><script type=\"math/tex;mode=display\">V_\\pi(s) = \\sum_{a\\in A}\\pi(a|s)q_\\pi(s,a)=\\sum_{a\\in A}\\pi(a|s)[R_s^a+\\gamma \\sum_{s'\\in S}P_{ss'}^a V_\\pi(s')]</script><script type=\"math/tex;mode=display\">q_{\\pi}(s, a) = R_s^a + \\gamma \\sum_{s'\\in S}P_{ss'}^a V_\\pi(s') = R_s^a + \\gamma \\sum_{s'\\in S}P_{ss'}^a\\sum_{a'\\in A}\\pi(a'|s')q_\\pi(s', a')</script><h4 id=\"Optimal-Value-Function\"><a href=\"#Optimal-Value-Function\" class=\"headerlink\" title=\"Optimal Value Function\"></a>Optimal Value Function</h4><p>The optimal value function is the maximum value function over all policies.</p><script type=\"math/tex;mode=display\">V_*(s) = \\max_\\pi V_\\pi(s) \\\\ \nq_*(s, a) = \\max_\\pi q\\pi(s, a)</script><p>Bellman Optimality Equation</p><script type=\"math/tex;mode=display\">V_*(s) = \\max_a q_*(s,a) = \\max_a R_s^a + \\gamma \\sum_{s'\\in S}P_{ss'}^a V_*(s') \\\\\nq_*(s,a) = R_s^a + \\gamma\\sum_{s'\\in S} P_{ss'}^a \\max_{a'} q_*(s', a')</script><p>methods</p><ul><li>Value iteration</li><li>policy iteration</li><li>Q-learning</li><li>Sarsa</li></ul><h3 id=\"Partially-Observable-MDPs\"><a href=\"#Partially-Observable-MDPs\" class=\"headerlink\" title=\"Partially Observable MDPs\"></a>Partially Observable MDPs</h3><p>A Partially Observable MDPs is a MDP with hidden states. It is a hidden Markov model with actions.</p><p>A PDMDP is a tuple ‘$ \\lt S, A, O, P, R, Z, \\gamma\\gt $</p><ul><li>S is a finite set of states</li><li>A is a finite set of actions</li><li>O is a finit set of observations</li><li>P is a state transition probability matrix $P_{ss’}^a = P[S_{t+1} =s’ | S_t = s, A_t=a]$</li><li>R is a reward function $R_s^a=E[R_{t+1} | S_t=s, A_t=a]$</li><li>Z is an observation function, $Z_{s’o}^a=P[O_{t+1}=o|S_{t+1} =s’, A_t=a$</li><li>$\\gamma$ is a discount factor</li></ul><h4 id=\"Belief-States\"><a href=\"#Belief-States\" class=\"headerlink\" title=\"Belief States\"></a>Belief States</h4><p>A belief state b(h) is a probability distribution over states, conditioned on the history h</p><script type=\"math/tex;mode=display\">b(h) = (P[S_t=s^1|H_t=h), ... , P(S_t=s^n | H_t=h)</script><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sun Jan 19 2020 18:07:22 GMT+0800 (GMT+08:00) --><h3 id=\"Markov-Process\"><a href=\"#Markov-Process\" class=\"headerlink\" title=\"Markov Process\"></a>Markov Process</h3><h4 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h4><p>Markov decision process formally describe an environment for reinforcement learning.</p><p>The environment is fully observable</p><p>All RL problems can be formalised as MDPs</p><h4 id=\"Markov-Property\"><a href=\"#Markov-Property\" class=\"headerlink\" title=\"Markov Property\"></a>Markov Property</h4><p>The future is independent of the past given the present.</p><script type=\"math/tex;mode=display\">P[S_{t+1} | S_t] = P[S_{t+1} | S1, ... , S_t]</script><h4 id=\"Markov-Process-1\"><a href=\"#Markov-Process-1\" class=\"headerlink\" title=\"Markov Process\"></a>Markov Process</h4><p>Markov Process is a tuple $ \\lt S, P\\gt $</p><ul><li>S is a finite set of states</li><li>P is a state transition probability matrix</li></ul><h3 id=\"Markov-Reward-Process\"><a href=\"#Markov-Reward-Process\" class=\"headerlink\" title=\"Markov Reward Process\"></a>Markov Reward Process</h3><p>A Markov reward process is a Markov chain with values</p><p>A Markov Process is a tuple $ \\lt S, P, R, \\gamma \\gt $</p><ul><li>S is a finite set of states</li><li>P is a state transition probability matrix $P_{ss’} = P[S_{t+1} =s’ | S_t = s]$</li><li>R is a reward function $R_s=E[R_{t+1} | S_t=s]$</li><li>$\\gamma$ is a discount factor</li></ul><h4 id=\"Return\"><a href=\"#Return\" class=\"headerlink\" title=\"Return\"></a>Return</h4><p>return is the total discounted reward from time-step t</p><script type=\"math/tex;mode=display\">G_t = R_{t+1} + \\gamma R_{t+2} + ... = \\sum_{k=0}^{\\infin}\\gamma^k R_{t+k+1}</script><p>Discount Reason:</p><ul><li>数值上方便</li><li>避免计算循环</li><li>未来的不确定性</li><li>人类更偏向于立即收益</li></ul><h4 id=\"Value-function\"><a href=\"#Value-function\" class=\"headerlink\" title=\"Value function\"></a>Value function</h4><p>the expected return stating from state s.</p><script type=\"math/tex;mode=display\">v(s)=E[G_t|S_t=s] \\\\\nv(s) = R_s + \\gamma * \\sum_{s'\\in S}P_{ss'}v(s')</script><h3 id=\"Markov-Decision-Process\"><a href=\"#Markov-Decision-Process\" class=\"headerlink\" title=\"Markov Decision Process\"></a>Markov Decision Process</h3><p>A markov decision process is a Markov reward process with decisions. It is an environment in which all states are Markov.</p><p>A markov decision processs is a tuple $ \\lt S, A, P, R, \\gamma\\gt $</p><ul><li>S is a finite set of states</li><li>A is a finite set of actions</li><li>P is a state transition probability matrix $P_{ss’}^a = P[S_{t+1} =s’ | S_t = s, A_t=a]$</li><li>R is a reward function $R_s^a=E[R_{t+1} | S_t=s, A_t=a]$</li><li>$\\gamma$ is a discount factor</li></ul><h4 id=\"Policy\"><a href=\"#Policy\" class=\"headerlink\" title=\"Policy\"></a>Policy</h4><p>A policy $\\pi$ is a distribution over actions givens states.</p><script type=\"math/tex;mode=display\">\\pi(a|s) = P[A_t=a|S_t=s]</script><p>Given an MDP, M = $ \\lt S, A, P, R, \\gamma\\gt $ and a policy $\\pi$</p><p>The state sequence is a Markov process $ \\lt S, P^\\pi\\gt $</p><p>The state and reward sequence is a Markov reward process $ \\lt S, P^\\pi, R^\\pi, \\gamma\\gt $</p><script type=\"math/tex;mode=display\">P_{s, s'}^{\\pi} = \\sum_{a\\in A}\\pi(a|s)P_{ss'}^a \\\\\nR_s^{\\pi} = \\sum_{a\\in A}\\pi(a|s)R_s^a</script><h4 id=\"Value-function-1\"><a href=\"#Value-function-1\" class=\"headerlink\" title=\"Value function\"></a>Value function</h4><p>The state-value function of an MDP is the expected return starting from state S and then following policy $\\pi$</p><script type=\"math/tex;mode=display\">V\\pi(s) = E_\\pi[G_t|S_t=s]</script><p>The action-value function of an MDP is the expected return staring from state S, taking action a and then following policy $\\pi$</p><script type=\"math/tex;mode=display\">q_\\pi(s, a) = E\\pi[G_t|S_t=s, A_t=a]</script><p>Bellman Expectation Equation:</p><script type=\"math/tex;mode=display\">V_\\pi(s) = \\sum_{a\\in A}\\pi(a|s)q_\\pi(s,a)=\\sum_{a\\in A}\\pi(a|s)[R_s^a+\\gamma \\sum_{s'\\in S}P_{ss'}^a V_\\pi(s')]</script><script type=\"math/tex;mode=display\">q_{\\pi}(s, a) = R_s^a + \\gamma \\sum_{s'\\in S}P_{ss'}^a V_\\pi(s') = R_s^a + \\gamma \\sum_{s'\\in S}P_{ss'}^a\\sum_{a'\\in A}\\pi(a'|s')q_\\pi(s', a')</script><h4 id=\"Optimal-Value-Function\"><a href=\"#Optimal-Value-Function\" class=\"headerlink\" title=\"Optimal Value Function\"></a>Optimal Value Function</h4><p>The optimal value function is the maximum value function over all policies.</p><script type=\"math/tex;mode=display\">V_*(s) = \\max_\\pi V_\\pi(s) \\\\ \nq_*(s, a) = \\max_\\pi q\\pi(s, a)</script><p>Bellman Optimality Equation</p><script type=\"math/tex;mode=display\">V_*(s) = \\max_a q_*(s,a) = \\max_a R_s^a + \\gamma \\sum_{s'\\in S}P_{ss'}^a V_*(s') \\\\\nq_*(s,a) = R_s^a + \\gamma\\sum_{s'\\in S} P_{ss'}^a \\max_{a'} q_*(s', a')</script><p>methods</p><ul><li>Value iteration</li><li>policy iteration</li><li>Q-learning</li><li>Sarsa</li></ul><h3 id=\"Partially-Observable-MDPs\"><a href=\"#Partially-Observable-MDPs\" class=\"headerlink\" title=\"Partially Observable MDPs\"></a>Partially Observable MDPs</h3><p>A Partially Observable MDPs is a MDP with hidden states. It is a hidden Markov model with actions.</p><p>A PDMDP is a tuple ‘$ \\lt S, A, O, P, R, Z, \\gamma\\gt $</p><ul><li>S is a finite set of states</li><li>A is a finite set of actions</li><li>O is a finit set of observations</li><li>P is a state transition probability matrix $P_{ss’}^a = P[S_{t+1} =s’ | S_t = s, A_t=a]$</li><li>R is a reward function $R_s^a=E[R_{t+1} | S_t=s, A_t=a]$</li><li>Z is an observation function, $Z_{s’o}^a=P[O_{t+1}=o|S_{t+1} =s’, A_t=a$</li><li>$\\gamma$ is a discount factor</li></ul><h4 id=\"Belief-States\"><a href=\"#Belief-States\" class=\"headerlink\" title=\"Belief States\"></a>Belief States</h4><p>A belief state b(h) is a probability distribution over states, conditioned on the history h</p><script type=\"math/tex;mode=display\">b(h) = (P[S_t=s^1|H_t=h), ... , P(S_t=s^n | H_t=h)</script><!-- rebuild by neat -->"},{"title":"003-Planning by Dynamic Programming","mathjax":true,"date":"2019-08-28T09:27:24.000Z","_content":"### Planning\n\nDynamic programming assumes full knowledge of the MDP\n\n* Prediction\n    * Input: MDP $\\lt S, A, P, R, \\gamma\\gt$ policy $\\pi$\n    * Input: MRP $\\lt S, P^\\pi, R^\\pi, \\gamma\\gt$\n    * Output: value function $V_\\pi$\n* Control\n    * Input: MDP $ \\lt S, A, P, R, \\gamma\\gt $ \n    * Output: optimal value function $V_*$\n    * Output: optimal policy $\\pi_*$\n\n### Policy Evaluation\n\n* Problem: evaluate a given policy $\\pi$\n* Solution: iterative application of Bellman expectation backup\n* $V_1 \\rightarrow V_2 \\rightarrow ... \\rightarrow V_\\pi$\n* synchronout backups\n    * At each iteration $k+1$\n    * For all states $s\\in S$\n    * Update $V_{k+1}(s)$ from $V_k(s')$\n\n### Policy Iteration\n\n* Evaluate the policy $\\pi$\n* imporve the policy by acting greedily with respect to $V_\\pi$\n$$\n\\pi' = greedy(V_\\pi)\n$$\nthis process of policy iteration always converges to $\\pi_*$\n\n### Value Iteration\n\n* Problem: find optimal policy $\\pi$\n* Solution: iterative application of Bellman opimality backup\n* $V_1 \\rightarrow V_2 \\rightarrow ... \\rightarrow V_*$\n* sychronous backup\n    * At each iteration $k+1$\n    * For all state $s\\in S$\n    * Update $V_{k+1}(s)$ from $V_k(s')$\n\n### Summary\n\nProblem | Bellman Equation | Algorithm\n--- |--- | ---\nPrediction | Bellman Expectation Equation | Iterative Policy Evaluation\nControl | Bellman Expection Equation + Greedy Policy Improvement | Policy Iteration\nControl | Bllman Optimaliry Equation | Value Iteration \n\n\n","source":"_posts/003-Planning-by-Dynamic-Programming.md","raw":"---\ntitle: 003-Planning by Dynamic Programming\nmathjax: true\ndate: 2019-08-28 17:27:24\ncategories:\n    - RL(David Silver)\ntags:\n    - RL\n---\n### Planning\n\nDynamic programming assumes full knowledge of the MDP\n\n* Prediction\n    * Input: MDP $\\lt S, A, P, R, \\gamma\\gt$ policy $\\pi$\n    * Input: MRP $\\lt S, P^\\pi, R^\\pi, \\gamma\\gt$\n    * Output: value function $V_\\pi$\n* Control\n    * Input: MDP $ \\lt S, A, P, R, \\gamma\\gt $ \n    * Output: optimal value function $V_*$\n    * Output: optimal policy $\\pi_*$\n\n### Policy Evaluation\n\n* Problem: evaluate a given policy $\\pi$\n* Solution: iterative application of Bellman expectation backup\n* $V_1 \\rightarrow V_2 \\rightarrow ... \\rightarrow V_\\pi$\n* synchronout backups\n    * At each iteration $k+1$\n    * For all states $s\\in S$\n    * Update $V_{k+1}(s)$ from $V_k(s')$\n\n### Policy Iteration\n\n* Evaluate the policy $\\pi$\n* imporve the policy by acting greedily with respect to $V_\\pi$\n$$\n\\pi' = greedy(V_\\pi)\n$$\nthis process of policy iteration always converges to $\\pi_*$\n\n### Value Iteration\n\n* Problem: find optimal policy $\\pi$\n* Solution: iterative application of Bellman opimality backup\n* $V_1 \\rightarrow V_2 \\rightarrow ... \\rightarrow V_*$\n* sychronous backup\n    * At each iteration $k+1$\n    * For all state $s\\in S$\n    * Update $V_{k+1}(s)$ from $V_k(s')$\n\n### Summary\n\nProblem | Bellman Equation | Algorithm\n--- |--- | ---\nPrediction | Bellman Expectation Equation | Iterative Policy Evaluation\nControl | Bellman Expection Equation + Greedy Policy Improvement | Policy Iteration\nControl | Bllman Optimaliry Equation | Value Iteration \n\n\n","slug":"003-Planning-by-Dynamic-Programming","published":1,"updated":"2020-01-16T02:48:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5kuwy1g0004gz4dx9sczigf","content":"<!-- build time:Sun Jan 19 2020 18:07:22 GMT+0800 (GMT+08:00) --><h3 id=\"Planning\"><a href=\"#Planning\" class=\"headerlink\" title=\"Planning\"></a>Planning</h3><p>Dynamic programming assumes full knowledge of the MDP</p><ul><li>Prediction<ul><li>Input: MDP $\\lt S, A, P, R, \\gamma\\gt$ policy $\\pi$</li><li>Input: MRP $\\lt S, P^\\pi, R^\\pi, \\gamma\\gt$</li><li>Output: value function $V_\\pi$</li></ul></li><li>Control<ul><li>Input: MDP $ \\lt S, A, P, R, \\gamma\\gt $</li><li>Output: optimal value function $V_*$</li><li>Output: optimal policy $\\pi_*$</li></ul></li></ul><h3 id=\"Policy-Evaluation\"><a href=\"#Policy-Evaluation\" class=\"headerlink\" title=\"Policy Evaluation\"></a>Policy Evaluation</h3><ul><li>Problem: evaluate a given policy $\\pi$</li><li>Solution: iterative application of Bellman expectation backup</li><li>$V_1 \\rightarrow V_2 \\rightarrow … \\rightarrow V_\\pi$</li><li>synchronout backups<ul><li>At each iteration $k+1$</li><li>For all states $s\\in S$</li><li>Update $V_{k+1}(s)$ from $V_k(s’)$</li></ul></li></ul><h3 id=\"Policy-Iteration\"><a href=\"#Policy-Iteration\" class=\"headerlink\" title=\"Policy Iteration\"></a>Policy Iteration</h3><ul><li>Evaluate the policy $\\pi$</li><li>imporve the policy by acting greedily with respect to $V_\\pi$<script type=\"math/tex;mode=display\">\\pi' = greedy(V_\\pi)</script>this process of policy iteration always converges to $\\pi_*$</li></ul><h3 id=\"Value-Iteration\"><a href=\"#Value-Iteration\" class=\"headerlink\" title=\"Value Iteration\"></a>Value Iteration</h3><ul><li>Problem: find optimal policy $\\pi$</li><li>Solution: iterative application of Bellman opimality backup</li><li>$V_1 \\rightarrow V_2 \\rightarrow … \\rightarrow V_*$</li><li>sychronous backup<ul><li>At each iteration $k+1$</li><li>For all state $s\\in S$</li><li>Update $V_{k+1}(s)$ from $V_k(s’)$</li></ul></li></ul><h3 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h3><div class=\"table-container\"><table><thead><tr><th>Problem</th><th>Bellman Equation</th><th>Algorithm</th></tr></thead><tbody><tr><td>Prediction</td><td>Bellman Expectation Equation</td><td>Iterative Policy Evaluation</td></tr><tr><td>Control</td><td>Bellman Expection Equation + Greedy Policy Improvement</td><td>Policy Iteration</td></tr><tr><td>Control</td><td>Bllman Optimaliry Equation</td><td>Value Iteration</td></tr></tbody></table></div><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sun Jan 19 2020 18:07:22 GMT+0800 (GMT+08:00) --><h3 id=\"Planning\"><a href=\"#Planning\" class=\"headerlink\" title=\"Planning\"></a>Planning</h3><p>Dynamic programming assumes full knowledge of the MDP</p><ul><li>Prediction<ul><li>Input: MDP $\\lt S, A, P, R, \\gamma\\gt$ policy $\\pi$</li><li>Input: MRP $\\lt S, P^\\pi, R^\\pi, \\gamma\\gt$</li><li>Output: value function $V_\\pi$</li></ul></li><li>Control<ul><li>Input: MDP $ \\lt S, A, P, R, \\gamma\\gt $</li><li>Output: optimal value function $V_*$</li><li>Output: optimal policy $\\pi_*$</li></ul></li></ul><h3 id=\"Policy-Evaluation\"><a href=\"#Policy-Evaluation\" class=\"headerlink\" title=\"Policy Evaluation\"></a>Policy Evaluation</h3><ul><li>Problem: evaluate a given policy $\\pi$</li><li>Solution: iterative application of Bellman expectation backup</li><li>$V_1 \\rightarrow V_2 \\rightarrow … \\rightarrow V_\\pi$</li><li>synchronout backups<ul><li>At each iteration $k+1$</li><li>For all states $s\\in S$</li><li>Update $V_{k+1}(s)$ from $V_k(s’)$</li></ul></li></ul><h3 id=\"Policy-Iteration\"><a href=\"#Policy-Iteration\" class=\"headerlink\" title=\"Policy Iteration\"></a>Policy Iteration</h3><ul><li>Evaluate the policy $\\pi$</li><li>imporve the policy by acting greedily with respect to $V_\\pi$<script type=\"math/tex;mode=display\">\\pi' = greedy(V_\\pi)</script>this process of policy iteration always converges to $\\pi_*$</li></ul><h3 id=\"Value-Iteration\"><a href=\"#Value-Iteration\" class=\"headerlink\" title=\"Value Iteration\"></a>Value Iteration</h3><ul><li>Problem: find optimal policy $\\pi$</li><li>Solution: iterative application of Bellman opimality backup</li><li>$V_1 \\rightarrow V_2 \\rightarrow … \\rightarrow V_*$</li><li>sychronous backup<ul><li>At each iteration $k+1$</li><li>For all state $s\\in S$</li><li>Update $V_{k+1}(s)$ from $V_k(s’)$</li></ul></li></ul><h3 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h3><div class=\"table-container\"><table><thead><tr><th>Problem</th><th>Bellman Equation</th><th>Algorithm</th></tr></thead><tbody><tr><td>Prediction</td><td>Bellman Expectation Equation</td><td>Iterative Policy Evaluation</td></tr><tr><td>Control</td><td>Bellman Expection Equation + Greedy Policy Improvement</td><td>Policy Iteration</td></tr><tr><td>Control</td><td>Bllman Optimaliry Equation</td><td>Value Iteration</td></tr></tbody></table></div><!-- rebuild by neat -->"},{"title":"004-Model Free Prediction","mathjax":true,"date":"2019-08-28T09:27:35.000Z","_content":"Estimate the value function of an unknown MDP\n\n### Monte-Carlo Reinforcement Learning\n\n* Learn directly from episodes of experiecnce\n* model-free\n* complete episodes: no bootstraping\n* simplest possible idea: value = mean return\n\n#### First visit Monte-Carlo\n\n* evaluate state s\n* **first** time-step t that state is visited in an episode\n* $N(s) \\leftarrow N(s) + 1$\n* $S(s) \\leftarrow S(s) + G_t$\n*  $V(s) = S(s) / N(s)$\n\n#### Every-visit Monte-Carlo\n\n* evaluate state s\n* **every** time-step t that state is visited in an episode\n* $N(s) \\leftarrow N(s) + 1$\n* $S(s) \\leftarrow S(s) + G_t$\n*  $V(s)\\;=\\;S(s) / N(s)$\n\n#### Incremental Mean\n\n$$\n\\begin{aligned}\n\\mu_k &= \\frac{1}{k}\\sum_{j=1}^k x_j \\\\\n      &= \\frac{1}{k}(x_k + (k-1)\\mu_{k-1}) \\\\\n      &= \\mu_{k-1} + \\frac{1}{k}(x_k - \\mu_{k-1})\n\\end{aligned}\n$$\n\n#### Incremental Monte-Carlo Updates\n\nUpdate $V(s)$ incrementally after episode $S_1, A_1, R_1, ..., S_T$\n\n$$\n\\begin{aligned}\n&N(S_t) \\leftarrow N(S_t) + 1 \\\\\n&V(S_t) \\leftarrow V(S_t) + \\frac{1}{N(S_t)}(G_t - V(S_t)\n\\end{aligned}\n$$\nforget old episodes\n$$\nV(S_t) \\leftarrow V(S_t) + \\alpha(G_t - V(S_t))\n$$\n\n### Timeporal Difference Learning\n\n* Learn directly from episodes of experiecnce\n* model-free\n* incomplete episodes: by bootstraping\n* update a guess towards a guess\n\n#### TD(0)\n\n$$\n\\begin{aligned}\n\\delta &= R_{t+1}+\\gamma V(S_{t+1}) - V(S_t)\\\\\nV(S_t) &\\leftarrow V(S_t) + \\alpha * \\delta\n\\end{aligned}\n$$\n\n#### Forward View TD($\\lambda$)\n\nCompelete Episodes\n\nN-step Return\n$$\nG_t^{(n)} = R_{t+1} + \\gamma R_{t+2} + ... + \\gamma ^{n-1}R_{t+n}+\\gamma^n V(S_{t+n})\n$$\n\n$\\lambda$-Return \n$$\nG_t^{\\lambda} = (1-\\lambda)\\sum_{n=1}^{\\infin}\\lambda^{n-1}G_t^{(n)}\n$$\nForward view TD($\\lambda$)\n$$\nV(S_t) \\leftarrow V(S_t) + \\alpha(G_t^\\lambda - V(S_t))\n$$\n\n#### Backward View TD($\\lambda$)\n\n* Forward view provides theory\n* Backward view provides mechanism\n* Update online, every step, from incomplete sequences\n \nEligibility trace\n$$\n\\begin{aligned}\nE_0(s) &= 0 \\\\\nE_t(s) &= \\gamma\\lambda E_{t-1}(s)+I(S_t=s) \n\\end{aligned}\n$$\n\nBackward View TD($\\lambda$)\n* Keep an eligibility trace for every state s\n* Update value V(s) for every state s\n$$\n\\begin{aligned}\n\\delta_t &= R_{t+1}+\\gamma V(S_{t+1}) - V(S_t) \\\\ \nV(S) &\\leftarrow V(S) + \\alpha\\delta_t E_t(S)\n\\end{aligned}\n$$","source":"_posts/004-Model-Free-Prediction.md","raw":"---\ntitle: 004-Model Free Prediction\nmathjax: true\ndate: 2019-08-28 17:27:35\ncategories:\n    - RL(David Silver)\ntags:\n    - RL\n---\nEstimate the value function of an unknown MDP\n\n### Monte-Carlo Reinforcement Learning\n\n* Learn directly from episodes of experiecnce\n* model-free\n* complete episodes: no bootstraping\n* simplest possible idea: value = mean return\n\n#### First visit Monte-Carlo\n\n* evaluate state s\n* **first** time-step t that state is visited in an episode\n* $N(s) \\leftarrow N(s) + 1$\n* $S(s) \\leftarrow S(s) + G_t$\n*  $V(s) = S(s) / N(s)$\n\n#### Every-visit Monte-Carlo\n\n* evaluate state s\n* **every** time-step t that state is visited in an episode\n* $N(s) \\leftarrow N(s) + 1$\n* $S(s) \\leftarrow S(s) + G_t$\n*  $V(s)\\;=\\;S(s) / N(s)$\n\n#### Incremental Mean\n\n$$\n\\begin{aligned}\n\\mu_k &= \\frac{1}{k}\\sum_{j=1}^k x_j \\\\\n      &= \\frac{1}{k}(x_k + (k-1)\\mu_{k-1}) \\\\\n      &= \\mu_{k-1} + \\frac{1}{k}(x_k - \\mu_{k-1})\n\\end{aligned}\n$$\n\n#### Incremental Monte-Carlo Updates\n\nUpdate $V(s)$ incrementally after episode $S_1, A_1, R_1, ..., S_T$\n\n$$\n\\begin{aligned}\n&N(S_t) \\leftarrow N(S_t) + 1 \\\\\n&V(S_t) \\leftarrow V(S_t) + \\frac{1}{N(S_t)}(G_t - V(S_t)\n\\end{aligned}\n$$\nforget old episodes\n$$\nV(S_t) \\leftarrow V(S_t) + \\alpha(G_t - V(S_t))\n$$\n\n### Timeporal Difference Learning\n\n* Learn directly from episodes of experiecnce\n* model-free\n* incomplete episodes: by bootstraping\n* update a guess towards a guess\n\n#### TD(0)\n\n$$\n\\begin{aligned}\n\\delta &= R_{t+1}+\\gamma V(S_{t+1}) - V(S_t)\\\\\nV(S_t) &\\leftarrow V(S_t) + \\alpha * \\delta\n\\end{aligned}\n$$\n\n#### Forward View TD($\\lambda$)\n\nCompelete Episodes\n\nN-step Return\n$$\nG_t^{(n)} = R_{t+1} + \\gamma R_{t+2} + ... + \\gamma ^{n-1}R_{t+n}+\\gamma^n V(S_{t+n})\n$$\n\n$\\lambda$-Return \n$$\nG_t^{\\lambda} = (1-\\lambda)\\sum_{n=1}^{\\infin}\\lambda^{n-1}G_t^{(n)}\n$$\nForward view TD($\\lambda$)\n$$\nV(S_t) \\leftarrow V(S_t) + \\alpha(G_t^\\lambda - V(S_t))\n$$\n\n#### Backward View TD($\\lambda$)\n\n* Forward view provides theory\n* Backward view provides mechanism\n* Update online, every step, from incomplete sequences\n \nEligibility trace\n$$\n\\begin{aligned}\nE_0(s) &= 0 \\\\\nE_t(s) &= \\gamma\\lambda E_{t-1}(s)+I(S_t=s) \n\\end{aligned}\n$$\n\nBackward View TD($\\lambda$)\n* Keep an eligibility trace for every state s\n* Update value V(s) for every state s\n$$\n\\begin{aligned}\n\\delta_t &= R_{t+1}+\\gamma V(S_{t+1}) - V(S_t) \\\\ \nV(S) &\\leftarrow V(S) + \\alpha\\delta_t E_t(S)\n\\end{aligned}\n$$","slug":"004-Model-Free-Prediction","published":1,"updated":"2020-01-16T02:48:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5kuwy1h0005gz4d6usyszzd","content":"<!-- build time:Sun Jan 19 2020 18:07:22 GMT+0800 (GMT+08:00) --><p>Estimate the value function of an unknown MDP</p><h3 id=\"Monte-Carlo-Reinforcement-Learning\"><a href=\"#Monte-Carlo-Reinforcement-Learning\" class=\"headerlink\" title=\"Monte-Carlo Reinforcement Learning\"></a>Monte-Carlo Reinforcement Learning</h3><ul><li>Learn directly from episodes of experiecnce</li><li>model-free</li><li>complete episodes: no bootstraping</li><li>simplest possible idea: value = mean return</li></ul><h4 id=\"First-visit-Monte-Carlo\"><a href=\"#First-visit-Monte-Carlo\" class=\"headerlink\" title=\"First visit Monte-Carlo\"></a>First visit Monte-Carlo</h4><ul><li>evaluate state s</li><li><strong>first</strong> time-step t that state is visited in an episode</li><li>$N(s) \\leftarrow N(s) + 1$</li><li>$S(s) \\leftarrow S(s) + G_t$</li><li>$V(s) = S(s) / N(s)$</li></ul><h4 id=\"Every-visit-Monte-Carlo\"><a href=\"#Every-visit-Monte-Carlo\" class=\"headerlink\" title=\"Every-visit Monte-Carlo\"></a>Every-visit Monte-Carlo</h4><ul><li>evaluate state s</li><li><strong>every</strong> time-step t that state is visited in an episode</li><li>$N(s) \\leftarrow N(s) + 1$</li><li>$S(s) \\leftarrow S(s) + G_t$</li><li>$V(s)\\;=\\;S(s) / N(s)$</li></ul><h4 id=\"Incremental-Mean\"><a href=\"#Incremental-Mean\" class=\"headerlink\" title=\"Incremental Mean\"></a>Incremental Mean</h4><script type=\"math/tex;mode=display\">\\begin{aligned}\n\\mu_k &= \\frac{1}{k}\\sum_{j=1}^k x_j \\\\\n      &= \\frac{1}{k}(x_k + (k-1)\\mu_{k-1}) \\\\\n      &= \\mu_{k-1} + \\frac{1}{k}(x_k - \\mu_{k-1})\n\\end{aligned}</script><h4 id=\"Incremental-Monte-Carlo-Updates\"><a href=\"#Incremental-Monte-Carlo-Updates\" class=\"headerlink\" title=\"Incremental Monte-Carlo Updates\"></a>Incremental Monte-Carlo Updates</h4><p>Update $V(s)$ incrementally after episode $S_1, A_1, R_1, …, S_T$</p><script type=\"math/tex;mode=display\">\\begin{aligned}\n&N(S_t) \\leftarrow N(S_t) + 1 \\\\\n&V(S_t) \\leftarrow V(S_t) + \\frac{1}{N(S_t)}(G_t - V(S_t)\n\\end{aligned}</script><p>forget old episodes</p><script type=\"math/tex;mode=display\">V(S_t) \\leftarrow V(S_t) + \\alpha(G_t - V(S_t))</script><h3 id=\"Timeporal-Difference-Learning\"><a href=\"#Timeporal-Difference-Learning\" class=\"headerlink\" title=\"Timeporal Difference Learning\"></a>Timeporal Difference Learning</h3><ul><li>Learn directly from episodes of experiecnce</li><li>model-free</li><li>incomplete episodes: by bootstraping</li><li>update a guess towards a guess</li></ul><h4 id=\"TD-0\"><a href=\"#TD-0\" class=\"headerlink\" title=\"TD(0)\"></a>TD(0)</h4><script type=\"math/tex;mode=display\">\\begin{aligned}\n\\delta &= R_{t+1}+\\gamma V(S_{t+1}) - V(S_t)\\\\\nV(S_t) &\\leftarrow V(S_t) + \\alpha * \\delta\n\\end{aligned}</script><h4 id=\"Forward-View-TD-lambda\"><a href=\"#Forward-View-TD-lambda\" class=\"headerlink\" title=\"Forward View TD($\\lambda$)\"></a>Forward View TD($\\lambda$)</h4><p>Compelete Episodes</p><p>N-step Return</p><script type=\"math/tex;mode=display\">G_t^{(n)} = R_{t+1} + \\gamma R_{t+2} + ... + \\gamma ^{n-1}R_{t+n}+\\gamma^n V(S_{t+n})</script><p>$\\lambda$-Return</p><script type=\"math/tex;mode=display\">G_t^{\\lambda} = (1-\\lambda)\\sum_{n=1}^{\\infin}\\lambda^{n-1}G_t^{(n)}</script><p>Forward view TD($\\lambda$)</p><script type=\"math/tex;mode=display\">V(S_t) \\leftarrow V(S_t) + \\alpha(G_t^\\lambda - V(S_t))</script><h4 id=\"Backward-View-TD-lambda\"><a href=\"#Backward-View-TD-lambda\" class=\"headerlink\" title=\"Backward View TD($\\lambda$)\"></a>Backward View TD($\\lambda$)</h4><ul><li>Forward view provides theory</li><li>Backward view provides mechanism</li><li>Update online, every step, from incomplete sequences</li></ul><p>Eligibility trace</p><script type=\"math/tex;mode=display\">\\begin{aligned}\nE_0(s) &= 0 \\\\\nE_t(s) &= \\gamma\\lambda E_{t-1}(s)+I(S_t=s) \n\\end{aligned}</script><p>Backward View TD($\\lambda$)</p><ul><li>Keep an eligibility trace for every state s</li><li>Update value V(s) for every state s<script type=\"math/tex;mode=display\">\\begin{aligned}\n\\delta_t &= R_{t+1}+\\gamma V(S_{t+1}) - V(S_t) \\\\ \nV(S) &\\leftarrow V(S) + \\alpha\\delta_t E_t(S)\n\\end{aligned}</script></li></ul><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sun Jan 19 2020 18:07:22 GMT+0800 (GMT+08:00) --><p>Estimate the value function of an unknown MDP</p><h3 id=\"Monte-Carlo-Reinforcement-Learning\"><a href=\"#Monte-Carlo-Reinforcement-Learning\" class=\"headerlink\" title=\"Monte-Carlo Reinforcement Learning\"></a>Monte-Carlo Reinforcement Learning</h3><ul><li>Learn directly from episodes of experiecnce</li><li>model-free</li><li>complete episodes: no bootstraping</li><li>simplest possible idea: value = mean return</li></ul><h4 id=\"First-visit-Monte-Carlo\"><a href=\"#First-visit-Monte-Carlo\" class=\"headerlink\" title=\"First visit Monte-Carlo\"></a>First visit Monte-Carlo</h4><ul><li>evaluate state s</li><li><strong>first</strong> time-step t that state is visited in an episode</li><li>$N(s) \\leftarrow N(s) + 1$</li><li>$S(s) \\leftarrow S(s) + G_t$</li><li>$V(s) = S(s) / N(s)$</li></ul><h4 id=\"Every-visit-Monte-Carlo\"><a href=\"#Every-visit-Monte-Carlo\" class=\"headerlink\" title=\"Every-visit Monte-Carlo\"></a>Every-visit Monte-Carlo</h4><ul><li>evaluate state s</li><li><strong>every</strong> time-step t that state is visited in an episode</li><li>$N(s) \\leftarrow N(s) + 1$</li><li>$S(s) \\leftarrow S(s) + G_t$</li><li>$V(s)\\;=\\;S(s) / N(s)$</li></ul><h4 id=\"Incremental-Mean\"><a href=\"#Incremental-Mean\" class=\"headerlink\" title=\"Incremental Mean\"></a>Incremental Mean</h4><script type=\"math/tex;mode=display\">\\begin{aligned}\n\\mu_k &= \\frac{1}{k}\\sum_{j=1}^k x_j \\\\\n      &= \\frac{1}{k}(x_k + (k-1)\\mu_{k-1}) \\\\\n      &= \\mu_{k-1} + \\frac{1}{k}(x_k - \\mu_{k-1})\n\\end{aligned}</script><h4 id=\"Incremental-Monte-Carlo-Updates\"><a href=\"#Incremental-Monte-Carlo-Updates\" class=\"headerlink\" title=\"Incremental Monte-Carlo Updates\"></a>Incremental Monte-Carlo Updates</h4><p>Update $V(s)$ incrementally after episode $S_1, A_1, R_1, …, S_T$</p><script type=\"math/tex;mode=display\">\\begin{aligned}\n&N(S_t) \\leftarrow N(S_t) + 1 \\\\\n&V(S_t) \\leftarrow V(S_t) + \\frac{1}{N(S_t)}(G_t - V(S_t)\n\\end{aligned}</script><p>forget old episodes</p><script type=\"math/tex;mode=display\">V(S_t) \\leftarrow V(S_t) + \\alpha(G_t - V(S_t))</script><h3 id=\"Timeporal-Difference-Learning\"><a href=\"#Timeporal-Difference-Learning\" class=\"headerlink\" title=\"Timeporal Difference Learning\"></a>Timeporal Difference Learning</h3><ul><li>Learn directly from episodes of experiecnce</li><li>model-free</li><li>incomplete episodes: by bootstraping</li><li>update a guess towards a guess</li></ul><h4 id=\"TD-0\"><a href=\"#TD-0\" class=\"headerlink\" title=\"TD(0)\"></a>TD(0)</h4><script type=\"math/tex;mode=display\">\\begin{aligned}\n\\delta &= R_{t+1}+\\gamma V(S_{t+1}) - V(S_t)\\\\\nV(S_t) &\\leftarrow V(S_t) + \\alpha * \\delta\n\\end{aligned}</script><h4 id=\"Forward-View-TD-lambda\"><a href=\"#Forward-View-TD-lambda\" class=\"headerlink\" title=\"Forward View TD($\\lambda$)\"></a>Forward View TD($\\lambda$)</h4><p>Compelete Episodes</p><p>N-step Return</p><script type=\"math/tex;mode=display\">G_t^{(n)} = R_{t+1} + \\gamma R_{t+2} + ... + \\gamma ^{n-1}R_{t+n}+\\gamma^n V(S_{t+n})</script><p>$\\lambda$-Return</p><script type=\"math/tex;mode=display\">G_t^{\\lambda} = (1-\\lambda)\\sum_{n=1}^{\\infin}\\lambda^{n-1}G_t^{(n)}</script><p>Forward view TD($\\lambda$)</p><script type=\"math/tex;mode=display\">V(S_t) \\leftarrow V(S_t) + \\alpha(G_t^\\lambda - V(S_t))</script><h4 id=\"Backward-View-TD-lambda\"><a href=\"#Backward-View-TD-lambda\" class=\"headerlink\" title=\"Backward View TD($\\lambda$)\"></a>Backward View TD($\\lambda$)</h4><ul><li>Forward view provides theory</li><li>Backward view provides mechanism</li><li>Update online, every step, from incomplete sequences</li></ul><p>Eligibility trace</p><script type=\"math/tex;mode=display\">\\begin{aligned}\nE_0(s) &= 0 \\\\\nE_t(s) &= \\gamma\\lambda E_{t-1}(s)+I(S_t=s) \n\\end{aligned}</script><p>Backward View TD($\\lambda$)</p><ul><li>Keep an eligibility trace for every state s</li><li>Update value V(s) for every state s<script type=\"math/tex;mode=display\">\\begin{aligned}\n\\delta_t &= R_{t+1}+\\gamma V(S_{t+1}) - V(S_t) \\\\ \nV(S) &\\leftarrow V(S) + \\alpha\\delta_t E_t(S)\n\\end{aligned}</script></li></ul><!-- rebuild by neat -->"},{"title":"CS294-001-课程综述","mathjax":true,"date":"2020-01-19T09:03:00.000Z","_content":"\n### 深度强化学习\n\n* 深度学习: 提供了一种处理复杂无结构环境的方式。 \n* 强化学习: 提供了一种进行决策的数学框架。\n* 深度强化学习：端到端的连续决策。\n\n### 监督信号\n\n* 从奖励学习\n  * Basic RL的目标是最大化奖励。\n* 从实例学习\n  * Behavior Cloning: 直接复制模仿观测到的行为。\n  * Inverse RL: 从观测行为中推测奖励函数。\n* 通过观测世界来学习\n  * 学习预测当前的动作会带来的结果。\n  * 无监督学习\n* 从其他任务中学习\n  * Transfer Learning: 将多个领域的知识融合起来。\n  * Meta-leraning: 学习如何进行学习。\n\n### 通用人工智能 \n\n> 与其模拟人类大脑，不如从零开始学习。\n\n![image.png](http://ww1.sinaimg.cn/large/006A69aEgy1gb1zvx44igj31240eg11z.jpg)","source":"_posts/CS294-001-课程综述.md","raw":"---\ntitle: CS294-001-课程综述\nmathjax: true\ndate: 2020-01-19 17:03:00\ncategories: RL(CS294)\ntags: RL\n---\n\n### 深度强化学习\n\n* 深度学习: 提供了一种处理复杂无结构环境的方式。 \n* 强化学习: 提供了一种进行决策的数学框架。\n* 深度强化学习：端到端的连续决策。\n\n### 监督信号\n\n* 从奖励学习\n  * Basic RL的目标是最大化奖励。\n* 从实例学习\n  * Behavior Cloning: 直接复制模仿观测到的行为。\n  * Inverse RL: 从观测行为中推测奖励函数。\n* 通过观测世界来学习\n  * 学习预测当前的动作会带来的结果。\n  * 无监督学习\n* 从其他任务中学习\n  * Transfer Learning: 将多个领域的知识融合起来。\n  * Meta-leraning: 学习如何进行学习。\n\n### 通用人工智能 \n\n> 与其模拟人类大脑，不如从零开始学习。\n\n![image.png](http://ww1.sinaimg.cn/large/006A69aEgy1gb1zvx44igj31240eg11z.jpg)","slug":"CS294-001-课程综述","published":1,"updated":"2020-01-19T11:12:02.247Z","_id":"ck5kuwy1i0006gz4d2fetvbp7","comments":1,"layout":"post","photos":[],"link":"","content":"<!-- build time:Sun Jan 19 2020 21:27:23 GMT+0800 (GMT+08:00) --><h3 id=\"深度强化学习\"><a href=\"#深度强化学习\" class=\"headerlink\" title=\"深度强化学习\"></a>深度强化学习</h3><ul><li>深度学习: 提供了一种处理复杂无结构环境的方式。</li><li>强化学习: 提供了一种进行决策的数学框架。</li><li>深度强化学习：端到端的连续决策。</li></ul><h3 id=\"监督信号\"><a href=\"#监督信号\" class=\"headerlink\" title=\"监督信号\"></a>监督信号</h3><ul><li>从奖励学习<ul><li>Basic RL的目标是最大化奖励。</li></ul></li><li>从实例学习<ul><li>Behavior Cloning: 直接复制模仿观测到的行为。</li><li>Inverse RL: 从观测行为中推测奖励函数。</li></ul></li><li>通过观测世界来学习<ul><li>学习预测当前的动作会带来的结果。</li><li>无监督学习</li></ul></li><li>从其他任务中学习<ul><li>Transfer Learning: 将多个领域的知识融合起来。</li><li>Meta-leraning: 学习如何进行学习。</li></ul></li></ul><h3 id=\"通用人工智能\"><a href=\"#通用人工智能\" class=\"headerlink\" title=\"通用人工智能\"></a>通用人工智能</h3><blockquote><p>与其模拟人类大脑，不如从零开始学习。</p></blockquote><p><img src=\"http://ww1.sinaimg.cn/large/006A69aEgy1gb1zvx44igj31240eg11z.jpg\" alt=\"image.png\"></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sun Jan 19 2020 21:27:23 GMT+0800 (GMT+08:00) --><h3 id=\"深度强化学习\"><a href=\"#深度强化学习\" class=\"headerlink\" title=\"深度强化学习\"></a>深度强化学习</h3><ul><li>深度学习: 提供了一种处理复杂无结构环境的方式。</li><li>强化学习: 提供了一种进行决策的数学框架。</li><li>深度强化学习：端到端的连续决策。</li></ul><h3 id=\"监督信号\"><a href=\"#监督信号\" class=\"headerlink\" title=\"监督信号\"></a>监督信号</h3><ul><li>从奖励学习<ul><li>Basic RL的目标是最大化奖励。</li></ul></li><li>从实例学习<ul><li>Behavior Cloning: 直接复制模仿观测到的行为。</li><li>Inverse RL: 从观测行为中推测奖励函数。</li></ul></li><li>通过观测世界来学习<ul><li>学习预测当前的动作会带来的结果。</li><li>无监督学习</li></ul></li><li>从其他任务中学习<ul><li>Transfer Learning: 将多个领域的知识融合起来。</li><li>Meta-leraning: 学习如何进行学习。</li></ul></li></ul><h3 id=\"通用人工智能\"><a href=\"#通用人工智能\" class=\"headerlink\" title=\"通用人工智能\"></a>通用人工智能</h3><blockquote><p>与其模拟人类大脑，不如从零开始学习。</p></blockquote><p><img src=\"http://ww1.sinaimg.cn/large/006A69aEgy1gb1zvx44igj31240eg11z.jpg\" alt=\"image.png\"></p><!-- rebuild by neat -->"},{"title":"CS294-002-监督学习和模仿学习","mathjax":true,"date":"2019-09-15T08:41:00.000Z","_content":"\n### 模仿学习\n\n#### Behavior Cloning\n\n收集数据 $o_t, a_t$ 进行监督学习得到 $\\pi_\\theta(a_t|o_t)$\n\n#### 不足原因\n\n* 可以会碰到没见过的数据\n* 给定的行为不一定是正确的\n* 在序列决策中，一点细小误差将会逐渐积累成大误差。随着误差的变大，会遇到更多没见过的状态，又会导致更大的误差。\n\n![](https://ww1.sinaimg.cn/large/006A69aEly1gb23cjbnkmj30zl0kc0w1.jpg)\n\n#### 本质问题\n\nDrift Problem, 分布不匹配。训练数据的分布与实际遇到的分布不同。\n\n模型训练效果不佳，对于没见到过的数据预测能力较差。\n\n- 非马尔科夫行为：倾向于过去所做出的决策，决策还依赖于过去。\n- 多模型行为：面对同一个状态表现出不同的行为。\n\n### 解决方法\n\n解决方法包括人为调整，获取实际轨迹的分布，修改模型和修改数据等。DAgger为修改数据，解决非马尔科夫行为和多模型行为，从而提高模型的训练效果。\n\n#### 人为调整\n在自动驾驶中，使用左中右三个摄像头，神经网络的输入为摄像头拍摄到的图片，输出为方向盘转动的角度。对于左摄像头得到的图片，标记的转动角度比正常更朝右一些，右摄像头相反，中间的摄像头不变。这种做法的好处是，当实际测试时决策错误时，汽车的行驶方向发生偏差，所遇到的情况可能仍处在训练集中，则有机会进行校正，从而回到正常的行驶线路上来。\n![image.png](https://ww1.sinaimg.cn/large/006A69aEly1gb24jmvyznj30lr0lmdjm.jpg)\n\n#### 获取实际轨迹的分布\n\n对于可能出现的各种情况，除了正常状态外，还对各种异常状况进行标记，作为数据的一部分。如果能得到所有轨迹的分布，则很容易纠正实际出现的误差。\n\n实现起来很困难。获取大量数据并标记、不现实。一种可行的方法是首先建模环境，接着通过plan模拟实际出现的各种情况。\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEly1gb24t37szaj310x0hftf1.jpg)\n\n#### Dataset Aggregation\n\n将测试集不断加入到训练集中，使得真实遇到的数据的分布等同于训练数据的分布 --> Online Learning\n\n重复以下过程：\n\n* 使用训练集$D$训练策略，得到 $\\pi_\\theta(a_t|o_t)$\n* 运行策略得到数据集$D_\\pi$\n* 对数据集$D_\\pi$进行人工标记$a_t$\n* $D \\leftarrow D\\bigcup D_\\pi$\n\n#### 解决非马尔科夫行为\n\n使用所有的观测值作为输入。使用共享的CNN编码特征，再利用RNN进行序列处理。RNN为模型添加了记忆功能。\n\n#### 解决多模型行为\n\n多模型行为: 输出决策不是单一固定的。比如遇到障碍，可以从左边绕，也可以从右边绕。\n\n多模型行为可以分为离散决策和连续决策。解决该问题的出发点时使得模型可以对于同一个状态，输出多个结果。\n\n##### 离散决策\n\n在模型最后添加softmax层，输出不同的决策概率。\n\n##### 连续决策 \n\n* 输出混合的高斯分布。混合密度网络： N个高斯分布之和, $\\pi(a|o) =\\sum w_i N(\\mu_i,\\Sigma_i)$\n\n* 隐变量模型。对于输入添加噪声扰动$N(0, 1)$。简单地加入噪声对网络的影响较小。相关方法包括Normalizing flow / realNVP, stein variational gradient descent。  \n\n* 自动回归离散化。  对高维的连续变量进行离散化，一次离散化一个维度。训练多个网络，每一次输出减少一个连续变量维度，增加一个相对应的离散变量维度。缺点为较难实现、需要进行架构设计、离散化存在误差。\n\n#### 总结\n\n模仿学习指采用观测值和行为值作为训练数据进行监督学习。\n\n由于分布偏移问题，模仿学习的效果有时表现不佳。\n\n改进模仿学习的部分方法:\n\n* 人为调整\n* 从稳定的片分布中采样\n* 添加更多在线数据，Dagger\n* 更好的模型\n\n模仿学习的问题：\n\n* 需要人为提供数据。深度学习在数据量大时性能较好。\n* 人类在某些情况下较难提供正确的判断。如电机电压大小，多臂机器人。\n* 人类可以自动学习，机器也许也能做到类似的事情。\n  * 可以有无线的数据。\n  * 连续地自我提升。","source":"_posts/CS294-002-监督学习和模仿学习.md","raw":"---\ntitle: CS294-002-监督学习和模仿学习\nmathjax: true\ndate: 2019-09-15 16:41:00\ncategories: RL(CS294)\ntags: RL\n---\n\n### 模仿学习\n\n#### Behavior Cloning\n\n收集数据 $o_t, a_t$ 进行监督学习得到 $\\pi_\\theta(a_t|o_t)$\n\n#### 不足原因\n\n* 可以会碰到没见过的数据\n* 给定的行为不一定是正确的\n* 在序列决策中，一点细小误差将会逐渐积累成大误差。随着误差的变大，会遇到更多没见过的状态，又会导致更大的误差。\n\n![](https://ww1.sinaimg.cn/large/006A69aEly1gb23cjbnkmj30zl0kc0w1.jpg)\n\n#### 本质问题\n\nDrift Problem, 分布不匹配。训练数据的分布与实际遇到的分布不同。\n\n模型训练效果不佳，对于没见到过的数据预测能力较差。\n\n- 非马尔科夫行为：倾向于过去所做出的决策，决策还依赖于过去。\n- 多模型行为：面对同一个状态表现出不同的行为。\n\n### 解决方法\n\n解决方法包括人为调整，获取实际轨迹的分布，修改模型和修改数据等。DAgger为修改数据，解决非马尔科夫行为和多模型行为，从而提高模型的训练效果。\n\n#### 人为调整\n在自动驾驶中，使用左中右三个摄像头，神经网络的输入为摄像头拍摄到的图片，输出为方向盘转动的角度。对于左摄像头得到的图片，标记的转动角度比正常更朝右一些，右摄像头相反，中间的摄像头不变。这种做法的好处是，当实际测试时决策错误时，汽车的行驶方向发生偏差，所遇到的情况可能仍处在训练集中，则有机会进行校正，从而回到正常的行驶线路上来。\n![image.png](https://ww1.sinaimg.cn/large/006A69aEly1gb24jmvyznj30lr0lmdjm.jpg)\n\n#### 获取实际轨迹的分布\n\n对于可能出现的各种情况，除了正常状态外，还对各种异常状况进行标记，作为数据的一部分。如果能得到所有轨迹的分布，则很容易纠正实际出现的误差。\n\n实现起来很困难。获取大量数据并标记、不现实。一种可行的方法是首先建模环境，接着通过plan模拟实际出现的各种情况。\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEly1gb24t37szaj310x0hftf1.jpg)\n\n#### Dataset Aggregation\n\n将测试集不断加入到训练集中，使得真实遇到的数据的分布等同于训练数据的分布 --> Online Learning\n\n重复以下过程：\n\n* 使用训练集$D$训练策略，得到 $\\pi_\\theta(a_t|o_t)$\n* 运行策略得到数据集$D_\\pi$\n* 对数据集$D_\\pi$进行人工标记$a_t$\n* $D \\leftarrow D\\bigcup D_\\pi$\n\n#### 解决非马尔科夫行为\n\n使用所有的观测值作为输入。使用共享的CNN编码特征，再利用RNN进行序列处理。RNN为模型添加了记忆功能。\n\n#### 解决多模型行为\n\n多模型行为: 输出决策不是单一固定的。比如遇到障碍，可以从左边绕，也可以从右边绕。\n\n多模型行为可以分为离散决策和连续决策。解决该问题的出发点时使得模型可以对于同一个状态，输出多个结果。\n\n##### 离散决策\n\n在模型最后添加softmax层，输出不同的决策概率。\n\n##### 连续决策 \n\n* 输出混合的高斯分布。混合密度网络： N个高斯分布之和, $\\pi(a|o) =\\sum w_i N(\\mu_i,\\Sigma_i)$\n\n* 隐变量模型。对于输入添加噪声扰动$N(0, 1)$。简单地加入噪声对网络的影响较小。相关方法包括Normalizing flow / realNVP, stein variational gradient descent。  \n\n* 自动回归离散化。  对高维的连续变量进行离散化，一次离散化一个维度。训练多个网络，每一次输出减少一个连续变量维度，增加一个相对应的离散变量维度。缺点为较难实现、需要进行架构设计、离散化存在误差。\n\n#### 总结\n\n模仿学习指采用观测值和行为值作为训练数据进行监督学习。\n\n由于分布偏移问题，模仿学习的效果有时表现不佳。\n\n改进模仿学习的部分方法:\n\n* 人为调整\n* 从稳定的片分布中采样\n* 添加更多在线数据，Dagger\n* 更好的模型\n\n模仿学习的问题：\n\n* 需要人为提供数据。深度学习在数据量大时性能较好。\n* 人类在某些情况下较难提供正确的判断。如电机电压大小，多臂机器人。\n* 人类可以自动学习，机器也许也能做到类似的事情。\n  * 可以有无线的数据。\n  * 连续地自我提升。","slug":"CS294-002-监督学习和模仿学习","published":1,"updated":"2020-01-19T13:26:53.729Z","_id":"ck5kuwy1k000agz4diub867dc","comments":1,"layout":"post","photos":[],"link":"","content":"<!-- build time:Sun Jan 19 2020 21:27:23 GMT+0800 (GMT+08:00) --><h3 id=\"模仿学习\"><a href=\"#模仿学习\" class=\"headerlink\" title=\"模仿学习\"></a>模仿学习</h3><h4 id=\"Behavior-Cloning\"><a href=\"#Behavior-Cloning\" class=\"headerlink\" title=\"Behavior Cloning\"></a>Behavior Cloning</h4><p>收集数据 $o_t, a_t$ 进行监督学习得到 $\\pi_\\theta(a_t|o_t)$</p><h4 id=\"不足原因\"><a href=\"#不足原因\" class=\"headerlink\" title=\"不足原因\"></a>不足原因</h4><ul><li>可以会碰到没见过的数据</li><li>给定的行为不一定是正确的</li><li>在序列决策中，一点细小误差将会逐渐积累成大误差。随着误差的变大，会遇到更多没见过的状态，又会导致更大的误差。</li></ul><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1gb23cjbnkmj30zl0kc0w1.jpg\" alt></p><h4 id=\"本质问题\"><a href=\"#本质问题\" class=\"headerlink\" title=\"本质问题\"></a>本质问题</h4><p>Drift Problem, 分布不匹配。训练数据的分布与实际遇到的分布不同。</p><p>模型训练效果不佳，对于没见到过的数据预测能力较差。</p><ul><li>非马尔科夫行为：倾向于过去所做出的决策，决策还依赖于过去。</li><li>多模型行为：面对同一个状态表现出不同的行为。</li></ul><h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p>解决方法包括人为调整，获取实际轨迹的分布，修改模型和修改数据等。DAgger为修改数据，解决非马尔科夫行为和多模型行为，从而提高模型的训练效果。</p><h4 id=\"人为调整\"><a href=\"#人为调整\" class=\"headerlink\" title=\"人为调整\"></a>人为调整</h4><p>在自动驾驶中，使用左中右三个摄像头，神经网络的输入为摄像头拍摄到的图片，输出为方向盘转动的角度。对于左摄像头得到的图片，标记的转动角度比正常更朝右一些，右摄像头相反，中间的摄像头不变。这种做法的好处是，当实际测试时决策错误时，汽车的行驶方向发生偏差，所遇到的情况可能仍处在训练集中，则有机会进行校正，从而回到正常的行驶线路上来。<br><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1gb24jmvyznj30lr0lmdjm.jpg\" alt=\"image.png\"></p><h4 id=\"获取实际轨迹的分布\"><a href=\"#获取实际轨迹的分布\" class=\"headerlink\" title=\"获取实际轨迹的分布\"></a>获取实际轨迹的分布</h4><p>对于可能出现的各种情况，除了正常状态外，还对各种异常状况进行标记，作为数据的一部分。如果能得到所有轨迹的分布，则很容易纠正实际出现的误差。</p><p>实现起来很困难。获取大量数据并标记、不现实。一种可行的方法是首先建模环境，接着通过plan模拟实际出现的各种情况。</p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1gb24t37szaj310x0hftf1.jpg\" alt=\"image.png\"></p><h4 id=\"Dataset-Aggregation\"><a href=\"#Dataset-Aggregation\" class=\"headerlink\" title=\"Dataset Aggregation\"></a>Dataset Aggregation</h4><p>将测试集不断加入到训练集中，使得真实遇到的数据的分布等同于训练数据的分布 —&gt; Online Learning</p><p>重复以下过程：</p><ul><li>使用训练集$D$训练策略，得到 $\\pi_\\theta(a_t|o_t)$</li><li>运行策略得到数据集$D_\\pi$</li><li>对数据集$D_\\pi$进行人工标记$a_t$</li><li>$D \\leftarrow D\\bigcup D_\\pi$</li></ul><h4 id=\"解决非马尔科夫行为\"><a href=\"#解决非马尔科夫行为\" class=\"headerlink\" title=\"解决非马尔科夫行为\"></a>解决非马尔科夫行为</h4><p>使用所有的观测值作为输入。使用共享的CNN编码特征，再利用RNN进行序列处理。RNN为模型添加了记忆功能。</p><h4 id=\"解决多模型行为\"><a href=\"#解决多模型行为\" class=\"headerlink\" title=\"解决多模型行为\"></a>解决多模型行为</h4><p>多模型行为: 输出决策不是单一固定的。比如遇到障碍，可以从左边绕，也可以从右边绕。</p><p>多模型行为可以分为离散决策和连续决策。解决该问题的出发点时使得模型可以对于同一个状态，输出多个结果。</p><h5 id=\"离散决策\"><a href=\"#离散决策\" class=\"headerlink\" title=\"离散决策\"></a>离散决策</h5><p>在模型最后添加softmax层，输出不同的决策概率。</p><h5 id=\"连续决策\"><a href=\"#连续决策\" class=\"headerlink\" title=\"连续决策\"></a>连续决策</h5><ul><li><p>输出混合的高斯分布。混合密度网络： N个高斯分布之和, $\\pi(a|o) =\\sum w_i N(\\mu_i,\\Sigma_i)$</p></li><li><p>隐变量模型。对于输入添加噪声扰动$N(0, 1)$。简单地加入噪声对网络的影响较小。相关方法包括Normalizing flow / realNVP, stein variational gradient descent。</p></li><li><p>自动回归离散化。 对高维的连续变量进行离散化，一次离散化一个维度。训练多个网络，每一次输出减少一个连续变量维度，增加一个相对应的离散变量维度。缺点为较难实现、需要进行架构设计、离散化存在误差。</p></li></ul><h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>模仿学习指采用观测值和行为值作为训练数据进行监督学习。</p><p>由于分布偏移问题，模仿学习的效果有时表现不佳。</p><p>改进模仿学习的部分方法:</p><ul><li>人为调整</li><li>从稳定的片分布中采样</li><li>添加更多在线数据，Dagger</li><li>更好的模型</li></ul><p>模仿学习的问题：</p><ul><li>需要人为提供数据。深度学习在数据量大时性能较好。</li><li>人类在某些情况下较难提供正确的判断。如电机电压大小，多臂机器人。</li><li>人类可以自动学习，机器也许也能做到类似的事情。<ul><li>可以有无线的数据。</li><li>连续地自我提升。</li></ul></li></ul><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sun Jan 19 2020 21:27:23 GMT+0800 (GMT+08:00) --><h3 id=\"模仿学习\"><a href=\"#模仿学习\" class=\"headerlink\" title=\"模仿学习\"></a>模仿学习</h3><h4 id=\"Behavior-Cloning\"><a href=\"#Behavior-Cloning\" class=\"headerlink\" title=\"Behavior Cloning\"></a>Behavior Cloning</h4><p>收集数据 $o_t, a_t$ 进行监督学习得到 $\\pi_\\theta(a_t|o_t)$</p><h4 id=\"不足原因\"><a href=\"#不足原因\" class=\"headerlink\" title=\"不足原因\"></a>不足原因</h4><ul><li>可以会碰到没见过的数据</li><li>给定的行为不一定是正确的</li><li>在序列决策中，一点细小误差将会逐渐积累成大误差。随着误差的变大，会遇到更多没见过的状态，又会导致更大的误差。</li></ul><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1gb23cjbnkmj30zl0kc0w1.jpg\" alt></p><h4 id=\"本质问题\"><a href=\"#本质问题\" class=\"headerlink\" title=\"本质问题\"></a>本质问题</h4><p>Drift Problem, 分布不匹配。训练数据的分布与实际遇到的分布不同。</p><p>模型训练效果不佳，对于没见到过的数据预测能力较差。</p><ul><li>非马尔科夫行为：倾向于过去所做出的决策，决策还依赖于过去。</li><li>多模型行为：面对同一个状态表现出不同的行为。</li></ul><h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p>解决方法包括人为调整，获取实际轨迹的分布，修改模型和修改数据等。DAgger为修改数据，解决非马尔科夫行为和多模型行为，从而提高模型的训练效果。</p><h4 id=\"人为调整\"><a href=\"#人为调整\" class=\"headerlink\" title=\"人为调整\"></a>人为调整</h4><p>在自动驾驶中，使用左中右三个摄像头，神经网络的输入为摄像头拍摄到的图片，输出为方向盘转动的角度。对于左摄像头得到的图片，标记的转动角度比正常更朝右一些，右摄像头相反，中间的摄像头不变。这种做法的好处是，当实际测试时决策错误时，汽车的行驶方向发生偏差，所遇到的情况可能仍处在训练集中，则有机会进行校正，从而回到正常的行驶线路上来。<br><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1gb24jmvyznj30lr0lmdjm.jpg\" alt=\"image.png\"></p><h4 id=\"获取实际轨迹的分布\"><a href=\"#获取实际轨迹的分布\" class=\"headerlink\" title=\"获取实际轨迹的分布\"></a>获取实际轨迹的分布</h4><p>对于可能出现的各种情况，除了正常状态外，还对各种异常状况进行标记，作为数据的一部分。如果能得到所有轨迹的分布，则很容易纠正实际出现的误差。</p><p>实现起来很困难。获取大量数据并标记、不现实。一种可行的方法是首先建模环境，接着通过plan模拟实际出现的各种情况。</p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1gb24t37szaj310x0hftf1.jpg\" alt=\"image.png\"></p><h4 id=\"Dataset-Aggregation\"><a href=\"#Dataset-Aggregation\" class=\"headerlink\" title=\"Dataset Aggregation\"></a>Dataset Aggregation</h4><p>将测试集不断加入到训练集中，使得真实遇到的数据的分布等同于训练数据的分布 —&gt; Online Learning</p><p>重复以下过程：</p><ul><li>使用训练集$D$训练策略，得到 $\\pi_\\theta(a_t|o_t)$</li><li>运行策略得到数据集$D_\\pi$</li><li>对数据集$D_\\pi$进行人工标记$a_t$</li><li>$D \\leftarrow D\\bigcup D_\\pi$</li></ul><h4 id=\"解决非马尔科夫行为\"><a href=\"#解决非马尔科夫行为\" class=\"headerlink\" title=\"解决非马尔科夫行为\"></a>解决非马尔科夫行为</h4><p>使用所有的观测值作为输入。使用共享的CNN编码特征，再利用RNN进行序列处理。RNN为模型添加了记忆功能。</p><h4 id=\"解决多模型行为\"><a href=\"#解决多模型行为\" class=\"headerlink\" title=\"解决多模型行为\"></a>解决多模型行为</h4><p>多模型行为: 输出决策不是单一固定的。比如遇到障碍，可以从左边绕，也可以从右边绕。</p><p>多模型行为可以分为离散决策和连续决策。解决该问题的出发点时使得模型可以对于同一个状态，输出多个结果。</p><h5 id=\"离散决策\"><a href=\"#离散决策\" class=\"headerlink\" title=\"离散决策\"></a>离散决策</h5><p>在模型最后添加softmax层，输出不同的决策概率。</p><h5 id=\"连续决策\"><a href=\"#连续决策\" class=\"headerlink\" title=\"连续决策\"></a>连续决策</h5><ul><li><p>输出混合的高斯分布。混合密度网络： N个高斯分布之和, $\\pi(a|o) =\\sum w_i N(\\mu_i,\\Sigma_i)$</p></li><li><p>隐变量模型。对于输入添加噪声扰动$N(0, 1)$。简单地加入噪声对网络的影响较小。相关方法包括Normalizing flow / realNVP, stein variational gradient descent。</p></li><li><p>自动回归离散化。 对高维的连续变量进行离散化，一次离散化一个维度。训练多个网络，每一次输出减少一个连续变量维度，增加一个相对应的离散变量维度。缺点为较难实现、需要进行架构设计、离散化存在误差。</p></li></ul><h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>模仿学习指采用观测值和行为值作为训练数据进行监督学习。</p><p>由于分布偏移问题，模仿学习的效果有时表现不佳。</p><p>改进模仿学习的部分方法:</p><ul><li>人为调整</li><li>从稳定的片分布中采样</li><li>添加更多在线数据，Dagger</li><li>更好的模型</li></ul><p>模仿学习的问题：</p><ul><li>需要人为提供数据。深度学习在数据量大时性能较好。</li><li>人类在某些情况下较难提供正确的判断。如电机电压大小，多臂机器人。</li><li>人类可以自动学习，机器也许也能做到类似的事情。<ul><li>可以有无线的数据。</li><li>连续地自我提升。</li></ul></li></ul><!-- rebuild by neat -->"},{"title":"CS294-004-强化学习介绍","mathjax":true,"date":"2019-09-16T13:49:07.000Z","_content":"\n### 定义\n\n#### 符号\n\n$s_t$ 表示状态，$o_t$表示观测值，$a_t$表示动作，$\\pi(a_t|o_t)$表示部分观测下的策略，$\\pi(a_t|s_t)$表示完全观测下的策略。\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEly1gb2s41hc0oj31l10axwhy.jpg)\n\n#### 模仿学习\n\n收集训练数据$\\lt o_t,a_t\\gt$ ，进行监督学习得到$\\pi_\\theta(a_t|o_t)$\n\n#### 奖励函数\n\n$r(s, a)$ 定义了在某个状态下执行某个动作后得到的奖励。但强化学习期望得到的是全局的收益最大，即暂时的较小奖励可能会带来更大收益。\n\n#### 马尔科夫链\n\n##### 马尔科夫链\n\n$$\n\\mathcal{M} = \\{\\mathcal{S}, \\mathcal{T}\\}\n$$\n\n* $\\mathcal{S}$ 为状态空间\n* $\\mathcal{T}$ 为状态转移算子 $T_{i, j} = p(s_{t+1} = i | s_t=j)$, 可以将一个状态分布转移到另一个状态分布。 \n* 若$\\mu_{t, j} = p(s_t = i)$ , 则 $\\vec \\mu_{t+1} = T\\vec\\mu_t$\n\n##### 马尔科夫决策链 MDP\n\n$$\nM = \\{S, A, T, r\\}\n$$\n\n* $\\mathcal{S}$ 为状态空间\n* $\\mathcal{A}$为动作空间\n* $\\mathcal{T}$为状态转移算子,  $\\mathcal{T}_{i,j,k} = p(s_{t+1}=i | s_t=j, a_t=k)$\n* $r$ 为奖励函数 $r: S × A \\rightarrow \\mathbb{R}$ \n\n##### 部分观测马尔科夫决策链 POMDP\n\n$$\nM = \\{S, A, O, T, \\varepsilon, r\\}\n$$\n\n* S 为状态空间\n* A 为动作空间\n* O 为观测空间\n* T 为状态转移算子\n* $\\epsilon$ 为散发概率，在某状态下观测到某个现象的概率。 $p(o_t|s_t)$\n* r 为奖励函数 $r: S × A \\rightarrow \\mathbb{R}$ \n\n#### 强化学习目标\n\n强化学习为一个与环境不断交互的过程，从初始状态出发，根据制定的策略选择一个动作进行执行，环境给出下一个到达的状态以及对于该状态和动作的奖励。\n\n强化学习目标是制定一个策略，来最大化所有奖励之和的期望。\n$$\n\\theta^*=arg\\max_\\theta E_{\\tau\\sim p_\\theta(\\tau)}[\\sum_t r(s_t,a_t)]\n$$\n一个完整的交互过程被称为 trajectory， episode， $\\tau$, 完整地展开为一个序列$s_1, a_1, ... , s_T,  a_T$, 通过链式法则可以计算出观测到该轨迹的概率: \n$$\np_\\theta(\\tau)=p_\\theta(s_1, a_1, ..., s_T, a_T) = p(s_1) \\prod_{t=1}^{T}\\pi_\\theta(a_t|s_t)p(s_{t+1}|s_t, a_t)\n$$\n若将$s_t, a_t$视为一个整体，则马尔科夫决策链可以转化为马尔科夫链。\n$$\np(s_{t+1}, a_{t+1} | s_t, a_t) = \\pi_\\theta(a_t|s_t) p(s_{t+1}|s_t,a_t)\n$$\n故最大化奖励之和的期望可以进行转化\n$$\n\\theta^*=arg\\max_\\theta \\sum_{t=1}^T E_{(s_t,a_t)\\sim p_\\theta(s_t, a_t)}[r(s_t, a_t)]\n$$\n当序列为无限时，则当$(s_t,a_t)达到稳态分布时来评估策略，此时有 $$\\mu = \\mathcal{T}\\mu$ ，$\\mu$ 是 $\\mathcal{T}$ 的特征值为1对应的特征向量。\n$$\n\\theta^*=arg\\max_\\theta E_{(s,a)\\sim p_\\theta(s, a)}[r(s, a)]\n$$\n\n### 强化学习算法结构\n\n![2019-09-17 19-33-51 的屏幕截图.png](https://ww1.sinaimg.cn/large/006A69aEgy1g72qzb478ej30ek09vglu.jpg)\n\n通常强化学习算法由3个部分组成\n\n* 运行策略进行采样，与环境交互收集数据。\n* 分析收集到的数据，来提取将来发生的信息，估计收益。\n* 优化策略。\n\n#### 基于策略梯度方法\n\n* 采样数据\n* 计算收益 $J(\\theta)$ = $E_\\pi[\\sum r_t] \\approx \\frac{1}{N}\\sum_{i=1}^{N}\\sum_tr_t^i$\n\n*  优化策略 $\\theta \\leftarrow \\theta + \\alpha \\bigtriangledown_\\theta J(\\theta)$\n\n#### 基于模型方法\n\n* 采样数据\n* 根据数据计算模型，$s_{t+1} = f_\\phi(s_t, a_t)$, $r_t = g_\\theta(s_t, a_t)$\n* 反向传播优化策略，通过 $f_\\phi$ 和 $r$ 计算出合适的 $\\pi_\\theta(s_t) =a_t$\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEly1gb2tuu7mnqj30z1083aan.jpg)\n\nModel-based 方法\n\n* 使用模型进行规划\n  * 在连续空间中，使用最优控制等理论，进行反向传播优化得到动作。\n  * 在离散空间中，进行离散的规划，如蒙特卡洛树搜索。\n* 反向传播梯度到策略中\n  * 需要一定的trick来保证实施。\n* 使用模型来学习值函数\n  * 动态规划\n  * 产生模拟的经历，结合Model-Free进行学习，如Dyna\n\n### 值函数和Q函数\n\n$$\n\\sum_{t=1}^T E_{(s_t,a_t)\\sim p_\\theta(s_t, a_t)}[r(s_t, a_t)]\n$$\n\n对收益的计算公式进行分解可以得到一个递归的条件期望表达式\n$$\nE_{s1\\sim p(s1)}[E_{a1\\sim\\pi(a_1|s_1)}[r(s_1,a_1) + E_{s2\\sim p(s2)}[E_{a_2\\sim\\pi(a_2|s_2)}[r(s_2,a_2) + ...|s2]|s_1,a_1]|s_1]]\n$$\n\n将后面的一系列递归式子定义为Q.\n$$\nQ(S_1,a_1) = r(s_1,a_1) + E_{s_2\\sim p(s_2 | s_1,a_1)}[E_{a_2\\sim \\pi(a_2|s_2)}[r(s_2,a_2) + ... | s_2] | s_1,a_1]\n$$\n\n$$\nE_{s_1 \\sim p(s_1)}[E_{a_1\\sim\\pi(a_1|s_1)}|Q(s_1,a_1)|s_1]]\n$$\n\n当$Q(s_1,a_1)$已知时，很容易修改$\\pi(a_1|s_1)$来最大化收益。\n\n#### Q函数\n\n在$s_t$状态执行$a_t$开始期望得到的总收益。\n$$\nQ^\\pi(s_t, a_t) = \\sum_{t'=t}^T E_{\\pi_\\theta}[r(s_{t'}, a_{t'})|s_t,a_t]\n$$\n\n#### 值函数\n\n在$s_t$状态开始期望得到的总收益\n$$\nV^\\pi(s_t) = \\sum_{t'=t}^T E_{\\pi_\\theta}[r(s_{t', }, a_{t'})|s_t]\n$$\n\n$$\nV^\\pi(s_t) = E_{a_t\\sim\\pi(a_t|s_t)}[Q^\\pi(s_t,a_t)]\n$$\n\n$s_1$ 状态的值函数即为强化学习的目标\n$$\nE_{s_1\\sim p(s_1)}[V^\\pi(s_1)]\n$$\n\n#### 重要使用方法\n\n*  给定策略$\\pi$, 在得到 $Q^\\pi(s, a)$后，可以优化策略。将每个状态的策略修改为Q值最大的动作，则该策略将不差于原策略。\n* 使用Q函数来计算梯度，来提升较优动作的概率。如果$Q^\\pi(s,a)>V^\\pi(s)$则该动作优于平均动作。\n\n### 强化学习算法类型`\n\n* policy gradients: 直接优化收益计算表达式。基于样本采样的近似，再计算策略表达式的梯度。\n\n  ![image.png](https://ww1.sinaimg.cn/large/006A69aEgy1gb2uwl8l4aj30wi0eiq49.jpg)\n\n* Value-based: 直接估计值函数和Q函数，通过神经网络来计算，使用argmax来优化策略。\n\n  ![image.png](https://ww1.sinaimg.cn/large/006A69aEgy1gb2uvyxvelj30xr0fc0u0.jpg)\n\n* Actor-critic: 两者的结合。在得到值函数和Q函数后，通过计算策略表达式的梯度来优化策略\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEgy1gb2uxbtqz6j30vm0f4jsl.jpg)\n\n* Model-based RL： 首先估计模型，再提升策略。方法包括使用模型进行规划, 反向传播梯度到策略，使用模型来学习价值函数，使用模型来模拟新的经历。\n\n  ![image.png](https://ww1.sinaimg.cn/large/006A69aEgy1gb2uuupfnuj30ri0fm0tz.jpg)\n\n### 强化学习算法多样性原因\n\n#### 不同的抉择\n\n* 采样效率\n* 稳定性，易用性。(收敛的概率，依赖人为调整超参数)\n\n#### 不同的前提假设\n\n* 随机或确定\n* 连续或离散\n* 片段或无限\n\n#### 不同的问题设定\n\n* 容易表示策略\n* 容易表示环境\n\n### 强化学习算法比较\n\n#### 样本效率\n\n样本效率指训练得到一个优秀的策略需要多少样本。\n\n一个重要的抉择在于算法是否是off-policy\n\n* off-policy: 可以通过样本来提升策略，而不需要当前策略产生新的样本。\n\n  > able to improve the policy without generating new samples from that policy.\n\n* on-policy: 每当策略改变时，都需要使用当前策略产生新的样本。\n\n  > each time the policy is changed, even a little bit, we need to generate new samples.\n\n![2019-09-18 17-20-12 的屏幕截图.png](https://ww1.sinaimg.cn/large/006A69aEly1g73skv6974j30oy06i74n.jpg)\n\non-policy 策略的样本效率低，但可以通过并行算法来增加运行速率。\n\n#### 稳定性\n\n稳定性指算法是否收敛，是否每一次都能收敛，收敛到什么值。\n\n在监督学习中总是通过梯度下降来收敛到误差的较小值。\n\n在强化学习中并不总是梯度下降。\n\n* Value Function Fitting(Q-leaning): 采用的固定点迭代方法。在理想情况下最小化贝尔曼误差，但不一定保证能收敛。\n* Model-based RL: 模型并不是为了优化收益，更精确的模型不一定能带来收益的提高。\n* policy gradient： 采用了梯度下降，但是样本效率很低。\n\n#### 前提假设\n\n* 全观测：价值函数拟合方法默认该假设，可以通过添加循环模块来解决。\n* 片段学习：直接策略梯度方法和一些基于模型方法默认该假设。\n* 连续和平滑：连续价值函数学习方法和一些基于模型方法默认该假设。\n\n### 强化学习算法举例\n\n#### 价值函数拟合方法\n\n* Q-learning, DQN\n* Temporal difference learning\n* Fitted value iteration\n\n#### 策略梯度方法\n\n* REINFORCE \n* Natural policy gradient\n\n#### 演员表演家方法\n\n* Asynchronous Advantage Actor-Critic\n* Soft Actor-Critic\n\n#### 基于模型方法\n\n* Dyna\n* Guided policy search\n\n\n\n","source":"_posts/CS294-004-强化学习介绍.md","raw":"---\ntitle: CS294-004-强化学习介绍\nmathjax: true\ndate: 2019-09-16 21:49:07\ncategories: RL(CS294)\ntags: RL\n---\n\n### 定义\n\n#### 符号\n\n$s_t$ 表示状态，$o_t$表示观测值，$a_t$表示动作，$\\pi(a_t|o_t)$表示部分观测下的策略，$\\pi(a_t|s_t)$表示完全观测下的策略。\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEly1gb2s41hc0oj31l10axwhy.jpg)\n\n#### 模仿学习\n\n收集训练数据$\\lt o_t,a_t\\gt$ ，进行监督学习得到$\\pi_\\theta(a_t|o_t)$\n\n#### 奖励函数\n\n$r(s, a)$ 定义了在某个状态下执行某个动作后得到的奖励。但强化学习期望得到的是全局的收益最大，即暂时的较小奖励可能会带来更大收益。\n\n#### 马尔科夫链\n\n##### 马尔科夫链\n\n$$\n\\mathcal{M} = \\{\\mathcal{S}, \\mathcal{T}\\}\n$$\n\n* $\\mathcal{S}$ 为状态空间\n* $\\mathcal{T}$ 为状态转移算子 $T_{i, j} = p(s_{t+1} = i | s_t=j)$, 可以将一个状态分布转移到另一个状态分布。 \n* 若$\\mu_{t, j} = p(s_t = i)$ , 则 $\\vec \\mu_{t+1} = T\\vec\\mu_t$\n\n##### 马尔科夫决策链 MDP\n\n$$\nM = \\{S, A, T, r\\}\n$$\n\n* $\\mathcal{S}$ 为状态空间\n* $\\mathcal{A}$为动作空间\n* $\\mathcal{T}$为状态转移算子,  $\\mathcal{T}_{i,j,k} = p(s_{t+1}=i | s_t=j, a_t=k)$\n* $r$ 为奖励函数 $r: S × A \\rightarrow \\mathbb{R}$ \n\n##### 部分观测马尔科夫决策链 POMDP\n\n$$\nM = \\{S, A, O, T, \\varepsilon, r\\}\n$$\n\n* S 为状态空间\n* A 为动作空间\n* O 为观测空间\n* T 为状态转移算子\n* $\\epsilon$ 为散发概率，在某状态下观测到某个现象的概率。 $p(o_t|s_t)$\n* r 为奖励函数 $r: S × A \\rightarrow \\mathbb{R}$ \n\n#### 强化学习目标\n\n强化学习为一个与环境不断交互的过程，从初始状态出发，根据制定的策略选择一个动作进行执行，环境给出下一个到达的状态以及对于该状态和动作的奖励。\n\n强化学习目标是制定一个策略，来最大化所有奖励之和的期望。\n$$\n\\theta^*=arg\\max_\\theta E_{\\tau\\sim p_\\theta(\\tau)}[\\sum_t r(s_t,a_t)]\n$$\n一个完整的交互过程被称为 trajectory， episode， $\\tau$, 完整地展开为一个序列$s_1, a_1, ... , s_T,  a_T$, 通过链式法则可以计算出观测到该轨迹的概率: \n$$\np_\\theta(\\tau)=p_\\theta(s_1, a_1, ..., s_T, a_T) = p(s_1) \\prod_{t=1}^{T}\\pi_\\theta(a_t|s_t)p(s_{t+1}|s_t, a_t)\n$$\n若将$s_t, a_t$视为一个整体，则马尔科夫决策链可以转化为马尔科夫链。\n$$\np(s_{t+1}, a_{t+1} | s_t, a_t) = \\pi_\\theta(a_t|s_t) p(s_{t+1}|s_t,a_t)\n$$\n故最大化奖励之和的期望可以进行转化\n$$\n\\theta^*=arg\\max_\\theta \\sum_{t=1}^T E_{(s_t,a_t)\\sim p_\\theta(s_t, a_t)}[r(s_t, a_t)]\n$$\n当序列为无限时，则当$(s_t,a_t)达到稳态分布时来评估策略，此时有 $$\\mu = \\mathcal{T}\\mu$ ，$\\mu$ 是 $\\mathcal{T}$ 的特征值为1对应的特征向量。\n$$\n\\theta^*=arg\\max_\\theta E_{(s,a)\\sim p_\\theta(s, a)}[r(s, a)]\n$$\n\n### 强化学习算法结构\n\n![2019-09-17 19-33-51 的屏幕截图.png](https://ww1.sinaimg.cn/large/006A69aEgy1g72qzb478ej30ek09vglu.jpg)\n\n通常强化学习算法由3个部分组成\n\n* 运行策略进行采样，与环境交互收集数据。\n* 分析收集到的数据，来提取将来发生的信息，估计收益。\n* 优化策略。\n\n#### 基于策略梯度方法\n\n* 采样数据\n* 计算收益 $J(\\theta)$ = $E_\\pi[\\sum r_t] \\approx \\frac{1}{N}\\sum_{i=1}^{N}\\sum_tr_t^i$\n\n*  优化策略 $\\theta \\leftarrow \\theta + \\alpha \\bigtriangledown_\\theta J(\\theta)$\n\n#### 基于模型方法\n\n* 采样数据\n* 根据数据计算模型，$s_{t+1} = f_\\phi(s_t, a_t)$, $r_t = g_\\theta(s_t, a_t)$\n* 反向传播优化策略，通过 $f_\\phi$ 和 $r$ 计算出合适的 $\\pi_\\theta(s_t) =a_t$\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEly1gb2tuu7mnqj30z1083aan.jpg)\n\nModel-based 方法\n\n* 使用模型进行规划\n  * 在连续空间中，使用最优控制等理论，进行反向传播优化得到动作。\n  * 在离散空间中，进行离散的规划，如蒙特卡洛树搜索。\n* 反向传播梯度到策略中\n  * 需要一定的trick来保证实施。\n* 使用模型来学习值函数\n  * 动态规划\n  * 产生模拟的经历，结合Model-Free进行学习，如Dyna\n\n### 值函数和Q函数\n\n$$\n\\sum_{t=1}^T E_{(s_t,a_t)\\sim p_\\theta(s_t, a_t)}[r(s_t, a_t)]\n$$\n\n对收益的计算公式进行分解可以得到一个递归的条件期望表达式\n$$\nE_{s1\\sim p(s1)}[E_{a1\\sim\\pi(a_1|s_1)}[r(s_1,a_1) + E_{s2\\sim p(s2)}[E_{a_2\\sim\\pi(a_2|s_2)}[r(s_2,a_2) + ...|s2]|s_1,a_1]|s_1]]\n$$\n\n将后面的一系列递归式子定义为Q.\n$$\nQ(S_1,a_1) = r(s_1,a_1) + E_{s_2\\sim p(s_2 | s_1,a_1)}[E_{a_2\\sim \\pi(a_2|s_2)}[r(s_2,a_2) + ... | s_2] | s_1,a_1]\n$$\n\n$$\nE_{s_1 \\sim p(s_1)}[E_{a_1\\sim\\pi(a_1|s_1)}|Q(s_1,a_1)|s_1]]\n$$\n\n当$Q(s_1,a_1)$已知时，很容易修改$\\pi(a_1|s_1)$来最大化收益。\n\n#### Q函数\n\n在$s_t$状态执行$a_t$开始期望得到的总收益。\n$$\nQ^\\pi(s_t, a_t) = \\sum_{t'=t}^T E_{\\pi_\\theta}[r(s_{t'}, a_{t'})|s_t,a_t]\n$$\n\n#### 值函数\n\n在$s_t$状态开始期望得到的总收益\n$$\nV^\\pi(s_t) = \\sum_{t'=t}^T E_{\\pi_\\theta}[r(s_{t', }, a_{t'})|s_t]\n$$\n\n$$\nV^\\pi(s_t) = E_{a_t\\sim\\pi(a_t|s_t)}[Q^\\pi(s_t,a_t)]\n$$\n\n$s_1$ 状态的值函数即为强化学习的目标\n$$\nE_{s_1\\sim p(s_1)}[V^\\pi(s_1)]\n$$\n\n#### 重要使用方法\n\n*  给定策略$\\pi$, 在得到 $Q^\\pi(s, a)$后，可以优化策略。将每个状态的策略修改为Q值最大的动作，则该策略将不差于原策略。\n* 使用Q函数来计算梯度，来提升较优动作的概率。如果$Q^\\pi(s,a)>V^\\pi(s)$则该动作优于平均动作。\n\n### 强化学习算法类型`\n\n* policy gradients: 直接优化收益计算表达式。基于样本采样的近似，再计算策略表达式的梯度。\n\n  ![image.png](https://ww1.sinaimg.cn/large/006A69aEgy1gb2uwl8l4aj30wi0eiq49.jpg)\n\n* Value-based: 直接估计值函数和Q函数，通过神经网络来计算，使用argmax来优化策略。\n\n  ![image.png](https://ww1.sinaimg.cn/large/006A69aEgy1gb2uvyxvelj30xr0fc0u0.jpg)\n\n* Actor-critic: 两者的结合。在得到值函数和Q函数后，通过计算策略表达式的梯度来优化策略\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEgy1gb2uxbtqz6j30vm0f4jsl.jpg)\n\n* Model-based RL： 首先估计模型，再提升策略。方法包括使用模型进行规划, 反向传播梯度到策略，使用模型来学习价值函数，使用模型来模拟新的经历。\n\n  ![image.png](https://ww1.sinaimg.cn/large/006A69aEgy1gb2uuupfnuj30ri0fm0tz.jpg)\n\n### 强化学习算法多样性原因\n\n#### 不同的抉择\n\n* 采样效率\n* 稳定性，易用性。(收敛的概率，依赖人为调整超参数)\n\n#### 不同的前提假设\n\n* 随机或确定\n* 连续或离散\n* 片段或无限\n\n#### 不同的问题设定\n\n* 容易表示策略\n* 容易表示环境\n\n### 强化学习算法比较\n\n#### 样本效率\n\n样本效率指训练得到一个优秀的策略需要多少样本。\n\n一个重要的抉择在于算法是否是off-policy\n\n* off-policy: 可以通过样本来提升策略，而不需要当前策略产生新的样本。\n\n  > able to improve the policy without generating new samples from that policy.\n\n* on-policy: 每当策略改变时，都需要使用当前策略产生新的样本。\n\n  > each time the policy is changed, even a little bit, we need to generate new samples.\n\n![2019-09-18 17-20-12 的屏幕截图.png](https://ww1.sinaimg.cn/large/006A69aEly1g73skv6974j30oy06i74n.jpg)\n\non-policy 策略的样本效率低，但可以通过并行算法来增加运行速率。\n\n#### 稳定性\n\n稳定性指算法是否收敛，是否每一次都能收敛，收敛到什么值。\n\n在监督学习中总是通过梯度下降来收敛到误差的较小值。\n\n在强化学习中并不总是梯度下降。\n\n* Value Function Fitting(Q-leaning): 采用的固定点迭代方法。在理想情况下最小化贝尔曼误差，但不一定保证能收敛。\n* Model-based RL: 模型并不是为了优化收益，更精确的模型不一定能带来收益的提高。\n* policy gradient： 采用了梯度下降，但是样本效率很低。\n\n#### 前提假设\n\n* 全观测：价值函数拟合方法默认该假设，可以通过添加循环模块来解决。\n* 片段学习：直接策略梯度方法和一些基于模型方法默认该假设。\n* 连续和平滑：连续价值函数学习方法和一些基于模型方法默认该假设。\n\n### 强化学习算法举例\n\n#### 价值函数拟合方法\n\n* Q-learning, DQN\n* Temporal difference learning\n* Fitted value iteration\n\n#### 策略梯度方法\n\n* REINFORCE \n* Natural policy gradient\n\n#### 演员表演家方法\n\n* Asynchronous Advantage Actor-Critic\n* Soft Actor-Critic\n\n#### 基于模型方法\n\n* Dyna\n* Guided policy search\n\n\n\n","slug":"CS294-004-强化学习介绍","published":1,"updated":"2020-01-20T03:32:11.298Z","_id":"ck5kuwy1l000cgz4dtebf95nw","comments":1,"layout":"post","photos":[],"link":"","content":"<!-- build time:Mon Jan 20 2020 11:32:24 GMT+0800 (GMT+08:00) --><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h4 id=\"符号\"><a href=\"#符号\" class=\"headerlink\" title=\"符号\"></a>符号</h4><p>$s_t$ 表示状态，$o_t$表示观测值，$a_t$表示动作，$\\pi(a_t|o_t)$表示部分观测下的策略，$\\pi(a_t|s_t)$表示完全观测下的策略。</p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1gb2s41hc0oj31l10axwhy.jpg\" alt=\"image.png\"></p><h4 id=\"模仿学习\"><a href=\"#模仿学习\" class=\"headerlink\" title=\"模仿学习\"></a>模仿学习</h4><p>收集训练数据$\\lt o_t,a_t\\gt$ ，进行监督学习得到$\\pi_\\theta(a_t|o_t)$</p><h4 id=\"奖励函数\"><a href=\"#奖励函数\" class=\"headerlink\" title=\"奖励函数\"></a>奖励函数</h4><p>$r(s, a)$ 定义了在某个状态下执行某个动作后得到的奖励。但强化学习期望得到的是全局的收益最大，即暂时的较小奖励可能会带来更大收益。</p><h4 id=\"马尔科夫链\"><a href=\"#马尔科夫链\" class=\"headerlink\" title=\"马尔科夫链\"></a>马尔科夫链</h4><h5 id=\"马尔科夫链-1\"><a href=\"#马尔科夫链-1\" class=\"headerlink\" title=\"马尔科夫链\"></a>马尔科夫链</h5><script type=\"math/tex;mode=display\">\\mathcal{M} = \\{\\mathcal{S}, \\mathcal{T}\\}</script><ul><li>$\\mathcal{S}$ 为状态空间</li><li>$\\mathcal{T}$ 为状态转移算子 $T_{i, j} = p(s_{t+1} = i | s_t=j)$, 可以将一个状态分布转移到另一个状态分布。</li><li>若$\\mu_{t, j} = p(s_t = i)$ , 则 $\\vec \\mu_{t+1} = T\\vec\\mu_t$</li></ul><h5 id=\"马尔科夫决策链-MDP\"><a href=\"#马尔科夫决策链-MDP\" class=\"headerlink\" title=\"马尔科夫决策链 MDP\"></a>马尔科夫决策链 MDP</h5><script type=\"math/tex;mode=display\">M = \\{S, A, T, r\\}</script><ul><li>$\\mathcal{S}$ 为状态空间</li><li>$\\mathcal{A}$为动作空间</li><li>$\\mathcal{T}$为状态转移算子, $\\mathcal{T}_{i,j,k} = p(s_{t+1}=i | s_t=j, a_t=k)$</li><li>$r$ 为奖励函数 $r: S × A \\rightarrow \\mathbb{R}$</li></ul><h5 id=\"部分观测马尔科夫决策链-POMDP\"><a href=\"#部分观测马尔科夫决策链-POMDP\" class=\"headerlink\" title=\"部分观测马尔科夫决策链 POMDP\"></a>部分观测马尔科夫决策链 POMDP</h5><script type=\"math/tex;mode=display\">M = \\{S, A, O, T, \\varepsilon, r\\}</script><ul><li>S 为状态空间</li><li>A 为动作空间</li><li>O 为观测空间</li><li>T 为状态转移算子</li><li>$\\epsilon$ 为散发概率，在某状态下观测到某个现象的概率。 $p(o_t|s_t)$</li><li>r 为奖励函数 $r: S × A \\rightarrow \\mathbb{R}$</li></ul><h4 id=\"强化学习目标\"><a href=\"#强化学习目标\" class=\"headerlink\" title=\"强化学习目标\"></a>强化学习目标</h4><p>强化学习为一个与环境不断交互的过程，从初始状态出发，根据制定的策略选择一个动作进行执行，环境给出下一个到达的状态以及对于该状态和动作的奖励。</p><p>强化学习目标是制定一个策略，来最大化所有奖励之和的期望。</p><script type=\"math/tex;mode=display\">\\theta^*=arg\\max_\\theta E_{\\tau\\sim p_\\theta(\\tau)}[\\sum_t r(s_t,a_t)]</script><p>一个完整的交互过程被称为 trajectory， episode， $\\tau$, 完整地展开为一个序列$s_1, a_1, … , s_T, a_T$, 通过链式法则可以计算出观测到该轨迹的概率:</p><script type=\"math/tex;mode=display\">p_\\theta(\\tau)=p_\\theta(s_1, a_1, ..., s_T, a_T) = p(s_1) \\prod_{t=1}^{T}\\pi_\\theta(a_t|s_t)p(s_{t+1}|s_t, a_t)</script><p>若将$s_t, a_t$视为一个整体，则马尔科夫决策链可以转化为马尔科夫链。</p><script type=\"math/tex;mode=display\">p(s_{t+1}, a_{t+1} | s_t, a_t) = \\pi_\\theta(a_t|s_t) p(s_{t+1}|s_t,a_t)</script><p>故最大化奖励之和的期望可以进行转化</p><script type=\"math/tex;mode=display\">\\theta^*=arg\\max_\\theta \\sum_{t=1}^T E_{(s_t,a_t)\\sim p_\\theta(s_t, a_t)}[r(s_t, a_t)]</script><p>当序列为无限时，则当$(s_t,a_t)达到稳态分布时来评估策略，此时有 $$\\mu = \\mathcal{T}\\mu$ ，$\\mu$ 是 $\\mathcal{T}$ 的特征值为1对应的特征向量。</p><script type=\"math/tex;mode=display\">\\theta^*=arg\\max_\\theta E_{(s,a)\\sim p_\\theta(s, a)}[r(s, a)]</script><h3 id=\"强化学习算法结构\"><a href=\"#强化学习算法结构\" class=\"headerlink\" title=\"强化学习算法结构\"></a>强化学习算法结构</h3><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1g72qzb478ej30ek09vglu.jpg\" alt=\"2019-09-17 19-33-51 的屏幕截图.png\"></p><p>通常强化学习算法由3个部分组成</p><ul><li>运行策略进行采样，与环境交互收集数据。</li><li>分析收集到的数据，来提取将来发生的信息，估计收益。</li><li>优化策略。</li></ul><h4 id=\"基于策略梯度方法\"><a href=\"#基于策略梯度方法\" class=\"headerlink\" title=\"基于策略梯度方法\"></a>基于策略梯度方法</h4><ul><li>采样数据</li><li><p>计算收益 $J(\\theta)$ = $E_\\pi[\\sum r_t] \\approx \\frac{1}{N}\\sum_{i=1}^{N}\\sum_tr_t^i$</p></li><li><p>优化策略 $\\theta \\leftarrow \\theta + \\alpha \\bigtriangledown_\\theta J(\\theta)$</p></li></ul><h4 id=\"基于模型方法\"><a href=\"#基于模型方法\" class=\"headerlink\" title=\"基于模型方法\"></a>基于模型方法</h4><ul><li>采样数据</li><li>根据数据计算模型，$s_{t+1} = f_\\phi(s_t, a_t)$, $r_t = g_\\theta(s_t, a_t)$</li><li>反向传播优化策略，通过 $f_\\phi$ 和 $r$ 计算出合适的 $\\pi_\\theta(s_t) =a_t$</li></ul><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1gb2tuu7mnqj30z1083aan.jpg\" alt=\"image.png\"></p><p>Model-based 方法</p><ul><li>使用模型进行规划<ul><li>在连续空间中，使用最优控制等理论，进行反向传播优化得到动作。</li><li>在离散空间中，进行离散的规划，如蒙特卡洛树搜索。</li></ul></li><li>反向传播梯度到策略中<ul><li>需要一定的trick来保证实施。</li></ul></li><li>使用模型来学习值函数<ul><li>动态规划</li><li>产生模拟的经历，结合Model-Free进行学习，如Dyna</li></ul></li></ul><h3 id=\"值函数和Q函数\"><a href=\"#值函数和Q函数\" class=\"headerlink\" title=\"值函数和Q函数\"></a>值函数和Q函数</h3><script type=\"math/tex;mode=display\">\\sum_{t=1}^T E_{(s_t,a_t)\\sim p_\\theta(s_t, a_t)}[r(s_t, a_t)]</script><p>对收益的计算公式进行分解可以得到一个递归的条件期望表达式</p><script type=\"math/tex;mode=display\">E_{s1\\sim p(s1)}[E_{a1\\sim\\pi(a_1|s_1)}[r(s_1,a_1) + E_{s2\\sim p(s2)}[E_{a_2\\sim\\pi(a_2|s_2)}[r(s_2,a_2) + ...|s2]|s_1,a_1]|s_1]]</script><p>将后面的一系列递归式子定义为Q.</p><script type=\"math/tex;mode=display\">Q(S_1,a_1) = r(s_1,a_1) + E_{s_2\\sim p(s_2 | s_1,a_1)}[E_{a_2\\sim \\pi(a_2|s_2)}[r(s_2,a_2) + ... | s_2] | s_1,a_1]</script><script type=\"math/tex;mode=display\">E_{s_1 \\sim p(s_1)}[E_{a_1\\sim\\pi(a_1|s_1)}|Q(s_1,a_1)|s_1]]</script><p>当$Q(s_1,a_1)$已知时，很容易修改$\\pi(a_1|s_1)$来最大化收益。</p><h4 id=\"Q函数\"><a href=\"#Q函数\" class=\"headerlink\" title=\"Q函数\"></a>Q函数</h4><p>在$s_t$状态执行$a_t$开始期望得到的总收益。</p><script type=\"math/tex;mode=display\">Q^\\pi(s_t, a_t) = \\sum_{t'=t}^T E_{\\pi_\\theta}[r(s_{t'}, a_{t'})|s_t,a_t]</script><h4 id=\"值函数\"><a href=\"#值函数\" class=\"headerlink\" title=\"值函数\"></a>值函数</h4><p>在$s_t$状态开始期望得到的总收益</p><script type=\"math/tex;mode=display\">V^\\pi(s_t) = \\sum_{t'=t}^T E_{\\pi_\\theta}[r(s_{t', }, a_{t'})|s_t]</script><script type=\"math/tex;mode=display\">V^\\pi(s_t) = E_{a_t\\sim\\pi(a_t|s_t)}[Q^\\pi(s_t,a_t)]</script><p>$s_1$ 状态的值函数即为强化学习的目标</p><script type=\"math/tex;mode=display\">E_{s_1\\sim p(s_1)}[V^\\pi(s_1)]</script><h4 id=\"重要使用方法\"><a href=\"#重要使用方法\" class=\"headerlink\" title=\"重要使用方法\"></a>重要使用方法</h4><ul><li>给定策略$\\pi$, 在得到 $Q^\\pi(s, a)$后，可以优化策略。将每个状态的策略修改为Q值最大的动作，则该策略将不差于原策略。</li><li>使用Q函数来计算梯度，来提升较优动作的概率。如果$Q^\\pi(s,a)&gt;V^\\pi(s)$则该动作优于平均动作。</li></ul><h3 id=\"强化学习算法类型\"><a href=\"#强化学习算法类型\" class=\"headerlink\" title=\"强化学习算法类型`\"></a>强化学习算法类型`</h3><ul><li><p>policy gradients: 直接优化收益计算表达式。基于样本采样的近似，再计算策略表达式的梯度。</p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1gb2uwl8l4aj30wi0eiq49.jpg\" alt=\"image.png\"></p></li><li><p>Value-based: 直接估计值函数和Q函数，通过神经网络来计算，使用argmax来优化策略。</p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1gb2uvyxvelj30xr0fc0u0.jpg\" alt=\"image.png\"></p></li><li><p>Actor-critic: 两者的结合。在得到值函数和Q函数后，通过计算策略表达式的梯度来优化策略</p></li></ul><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1gb2uxbtqz6j30vm0f4jsl.jpg\" alt=\"image.png\"></p><ul><li><p>Model-based RL： 首先估计模型，再提升策略。方法包括使用模型进行规划, 反向传播梯度到策略，使用模型来学习价值函数，使用模型来模拟新的经历。</p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1gb2uuupfnuj30ri0fm0tz.jpg\" alt=\"image.png\"></p></li></ul><h3 id=\"强化学习算法多样性原因\"><a href=\"#强化学习算法多样性原因\" class=\"headerlink\" title=\"强化学习算法多样性原因\"></a>强化学习算法多样性原因</h3><h4 id=\"不同的抉择\"><a href=\"#不同的抉择\" class=\"headerlink\" title=\"不同的抉择\"></a>不同的抉择</h4><ul><li>采样效率</li><li>稳定性，易用性。(收敛的概率，依赖人为调整超参数)</li></ul><h4 id=\"不同的前提假设\"><a href=\"#不同的前提假设\" class=\"headerlink\" title=\"不同的前提假设\"></a>不同的前提假设</h4><ul><li>随机或确定</li><li>连续或离散</li><li>片段或无限</li></ul><h4 id=\"不同的问题设定\"><a href=\"#不同的问题设定\" class=\"headerlink\" title=\"不同的问题设定\"></a>不同的问题设定</h4><ul><li>容易表示策略</li><li>容易表示环境</li></ul><h3 id=\"强化学习算法比较\"><a href=\"#强化学习算法比较\" class=\"headerlink\" title=\"强化学习算法比较\"></a>强化学习算法比较</h3><h4 id=\"样本效率\"><a href=\"#样本效率\" class=\"headerlink\" title=\"样本效率\"></a>样本效率</h4><p>样本效率指训练得到一个优秀的策略需要多少样本。</p><p>一个重要的抉择在于算法是否是off-policy</p><ul><li><p>off-policy: 可以通过样本来提升策略，而不需要当前策略产生新的样本。</p><blockquote><p>able to improve the policy without generating new samples from that policy.</p></blockquote></li><li><p>on-policy: 每当策略改变时，都需要使用当前策略产生新的样本。</p><blockquote><p>each time the policy is changed, even a little bit, we need to generate new samples.</p></blockquote></li></ul><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g73skv6974j30oy06i74n.jpg\" alt=\"2019-09-18 17-20-12 的屏幕截图.png\"></p><p>on-policy 策略的样本效率低，但可以通过并行算法来增加运行速率。</p><h4 id=\"稳定性\"><a href=\"#稳定性\" class=\"headerlink\" title=\"稳定性\"></a>稳定性</h4><p>稳定性指算法是否收敛，是否每一次都能收敛，收敛到什么值。</p><p>在监督学习中总是通过梯度下降来收敛到误差的较小值。</p><p>在强化学习中并不总是梯度下降。</p><ul><li>Value Function Fitting(Q-leaning): 采用的固定点迭代方法。在理想情况下最小化贝尔曼误差，但不一定保证能收敛。</li><li>Model-based RL: 模型并不是为了优化收益，更精确的模型不一定能带来收益的提高。</li><li>policy gradient： 采用了梯度下降，但是样本效率很低。</li></ul><h4 id=\"前提假设\"><a href=\"#前提假设\" class=\"headerlink\" title=\"前提假设\"></a>前提假设</h4><ul><li>全观测：价值函数拟合方法默认该假设，可以通过添加循环模块来解决。</li><li>片段学习：直接策略梯度方法和一些基于模型方法默认该假设。</li><li>连续和平滑：连续价值函数学习方法和一些基于模型方法默认该假设。</li></ul><h3 id=\"强化学习算法举例\"><a href=\"#强化学习算法举例\" class=\"headerlink\" title=\"强化学习算法举例\"></a>强化学习算法举例</h3><h4 id=\"价值函数拟合方法\"><a href=\"#价值函数拟合方法\" class=\"headerlink\" title=\"价值函数拟合方法\"></a>价值函数拟合方法</h4><ul><li>Q-learning, DQN</li><li>Temporal difference learning</li><li>Fitted value iteration</li></ul><h4 id=\"策略梯度方法\"><a href=\"#策略梯度方法\" class=\"headerlink\" title=\"策略梯度方法\"></a>策略梯度方法</h4><ul><li>REINFORCE</li><li>Natural policy gradient</li></ul><h4 id=\"演员表演家方法\"><a href=\"#演员表演家方法\" class=\"headerlink\" title=\"演员表演家方法\"></a>演员表演家方法</h4><ul><li>Asynchronous Advantage Actor-Critic</li><li>Soft Actor-Critic</li></ul><h4 id=\"基于模型方法-1\"><a href=\"#基于模型方法-1\" class=\"headerlink\" title=\"基于模型方法\"></a>基于模型方法</h4><ul><li>Dyna</li><li>Guided policy search</li></ul><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Mon Jan 20 2020 11:32:24 GMT+0800 (GMT+08:00) --><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h4 id=\"符号\"><a href=\"#符号\" class=\"headerlink\" title=\"符号\"></a>符号</h4><p>$s_t$ 表示状态，$o_t$表示观测值，$a_t$表示动作，$\\pi(a_t|o_t)$表示部分观测下的策略，$\\pi(a_t|s_t)$表示完全观测下的策略。</p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1gb2s41hc0oj31l10axwhy.jpg\" alt=\"image.png\"></p><h4 id=\"模仿学习\"><a href=\"#模仿学习\" class=\"headerlink\" title=\"模仿学习\"></a>模仿学习</h4><p>收集训练数据$\\lt o_t,a_t\\gt$ ，进行监督学习得到$\\pi_\\theta(a_t|o_t)$</p><h4 id=\"奖励函数\"><a href=\"#奖励函数\" class=\"headerlink\" title=\"奖励函数\"></a>奖励函数</h4><p>$r(s, a)$ 定义了在某个状态下执行某个动作后得到的奖励。但强化学习期望得到的是全局的收益最大，即暂时的较小奖励可能会带来更大收益。</p><h4 id=\"马尔科夫链\"><a href=\"#马尔科夫链\" class=\"headerlink\" title=\"马尔科夫链\"></a>马尔科夫链</h4><h5 id=\"马尔科夫链-1\"><a href=\"#马尔科夫链-1\" class=\"headerlink\" title=\"马尔科夫链\"></a>马尔科夫链</h5><script type=\"math/tex;mode=display\">\\mathcal{M} = \\{\\mathcal{S}, \\mathcal{T}\\}</script><ul><li>$\\mathcal{S}$ 为状态空间</li><li>$\\mathcal{T}$ 为状态转移算子 $T_{i, j} = p(s_{t+1} = i | s_t=j)$, 可以将一个状态分布转移到另一个状态分布。</li><li>若$\\mu_{t, j} = p(s_t = i)$ , 则 $\\vec \\mu_{t+1} = T\\vec\\mu_t$</li></ul><h5 id=\"马尔科夫决策链-MDP\"><a href=\"#马尔科夫决策链-MDP\" class=\"headerlink\" title=\"马尔科夫决策链 MDP\"></a>马尔科夫决策链 MDP</h5><script type=\"math/tex;mode=display\">M = \\{S, A, T, r\\}</script><ul><li>$\\mathcal{S}$ 为状态空间</li><li>$\\mathcal{A}$为动作空间</li><li>$\\mathcal{T}$为状态转移算子, $\\mathcal{T}_{i,j,k} = p(s_{t+1}=i | s_t=j, a_t=k)$</li><li>$r$ 为奖励函数 $r: S × A \\rightarrow \\mathbb{R}$</li></ul><h5 id=\"部分观测马尔科夫决策链-POMDP\"><a href=\"#部分观测马尔科夫决策链-POMDP\" class=\"headerlink\" title=\"部分观测马尔科夫决策链 POMDP\"></a>部分观测马尔科夫决策链 POMDP</h5><script type=\"math/tex;mode=display\">M = \\{S, A, O, T, \\varepsilon, r\\}</script><ul><li>S 为状态空间</li><li>A 为动作空间</li><li>O 为观测空间</li><li>T 为状态转移算子</li><li>$\\epsilon$ 为散发概率，在某状态下观测到某个现象的概率。 $p(o_t|s_t)$</li><li>r 为奖励函数 $r: S × A \\rightarrow \\mathbb{R}$</li></ul><h4 id=\"强化学习目标\"><a href=\"#强化学习目标\" class=\"headerlink\" title=\"强化学习目标\"></a>强化学习目标</h4><p>强化学习为一个与环境不断交互的过程，从初始状态出发，根据制定的策略选择一个动作进行执行，环境给出下一个到达的状态以及对于该状态和动作的奖励。</p><p>强化学习目标是制定一个策略，来最大化所有奖励之和的期望。</p><script type=\"math/tex;mode=display\">\\theta^*=arg\\max_\\theta E_{\\tau\\sim p_\\theta(\\tau)}[\\sum_t r(s_t,a_t)]</script><p>一个完整的交互过程被称为 trajectory， episode， $\\tau$, 完整地展开为一个序列$s_1, a_1, … , s_T, a_T$, 通过链式法则可以计算出观测到该轨迹的概率:</p><script type=\"math/tex;mode=display\">p_\\theta(\\tau)=p_\\theta(s_1, a_1, ..., s_T, a_T) = p(s_1) \\prod_{t=1}^{T}\\pi_\\theta(a_t|s_t)p(s_{t+1}|s_t, a_t)</script><p>若将$s_t, a_t$视为一个整体，则马尔科夫决策链可以转化为马尔科夫链。</p><script type=\"math/tex;mode=display\">p(s_{t+1}, a_{t+1} | s_t, a_t) = \\pi_\\theta(a_t|s_t) p(s_{t+1}|s_t,a_t)</script><p>故最大化奖励之和的期望可以进行转化</p><script type=\"math/tex;mode=display\">\\theta^*=arg\\max_\\theta \\sum_{t=1}^T E_{(s_t,a_t)\\sim p_\\theta(s_t, a_t)}[r(s_t, a_t)]</script><p>当序列为无限时，则当$(s_t,a_t)达到稳态分布时来评估策略，此时有 $$\\mu = \\mathcal{T}\\mu$ ，$\\mu$ 是 $\\mathcal{T}$ 的特征值为1对应的特征向量。</p><script type=\"math/tex;mode=display\">\\theta^*=arg\\max_\\theta E_{(s,a)\\sim p_\\theta(s, a)}[r(s, a)]</script><h3 id=\"强化学习算法结构\"><a href=\"#强化学习算法结构\" class=\"headerlink\" title=\"强化学习算法结构\"></a>强化学习算法结构</h3><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1g72qzb478ej30ek09vglu.jpg\" alt=\"2019-09-17 19-33-51 的屏幕截图.png\"></p><p>通常强化学习算法由3个部分组成</p><ul><li>运行策略进行采样，与环境交互收集数据。</li><li>分析收集到的数据，来提取将来发生的信息，估计收益。</li><li>优化策略。</li></ul><h4 id=\"基于策略梯度方法\"><a href=\"#基于策略梯度方法\" class=\"headerlink\" title=\"基于策略梯度方法\"></a>基于策略梯度方法</h4><ul><li>采样数据</li><li><p>计算收益 $J(\\theta)$ = $E_\\pi[\\sum r_t] \\approx \\frac{1}{N}\\sum_{i=1}^{N}\\sum_tr_t^i$</p></li><li><p>优化策略 $\\theta \\leftarrow \\theta + \\alpha \\bigtriangledown_\\theta J(\\theta)$</p></li></ul><h4 id=\"基于模型方法\"><a href=\"#基于模型方法\" class=\"headerlink\" title=\"基于模型方法\"></a>基于模型方法</h4><ul><li>采样数据</li><li>根据数据计算模型，$s_{t+1} = f_\\phi(s_t, a_t)$, $r_t = g_\\theta(s_t, a_t)$</li><li>反向传播优化策略，通过 $f_\\phi$ 和 $r$ 计算出合适的 $\\pi_\\theta(s_t) =a_t$</li></ul><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1gb2tuu7mnqj30z1083aan.jpg\" alt=\"image.png\"></p><p>Model-based 方法</p><ul><li>使用模型进行规划<ul><li>在连续空间中，使用最优控制等理论，进行反向传播优化得到动作。</li><li>在离散空间中，进行离散的规划，如蒙特卡洛树搜索。</li></ul></li><li>反向传播梯度到策略中<ul><li>需要一定的trick来保证实施。</li></ul></li><li>使用模型来学习值函数<ul><li>动态规划</li><li>产生模拟的经历，结合Model-Free进行学习，如Dyna</li></ul></li></ul><h3 id=\"值函数和Q函数\"><a href=\"#值函数和Q函数\" class=\"headerlink\" title=\"值函数和Q函数\"></a>值函数和Q函数</h3><script type=\"math/tex;mode=display\">\\sum_{t=1}^T E_{(s_t,a_t)\\sim p_\\theta(s_t, a_t)}[r(s_t, a_t)]</script><p>对收益的计算公式进行分解可以得到一个递归的条件期望表达式</p><script type=\"math/tex;mode=display\">E_{s1\\sim p(s1)}[E_{a1\\sim\\pi(a_1|s_1)}[r(s_1,a_1) + E_{s2\\sim p(s2)}[E_{a_2\\sim\\pi(a_2|s_2)}[r(s_2,a_2) + ...|s2]|s_1,a_1]|s_1]]</script><p>将后面的一系列递归式子定义为Q.</p><script type=\"math/tex;mode=display\">Q(S_1,a_1) = r(s_1,a_1) + E_{s_2\\sim p(s_2 | s_1,a_1)}[E_{a_2\\sim \\pi(a_2|s_2)}[r(s_2,a_2) + ... | s_2] | s_1,a_1]</script><script type=\"math/tex;mode=display\">E_{s_1 \\sim p(s_1)}[E_{a_1\\sim\\pi(a_1|s_1)}|Q(s_1,a_1)|s_1]]</script><p>当$Q(s_1,a_1)$已知时，很容易修改$\\pi(a_1|s_1)$来最大化收益。</p><h4 id=\"Q函数\"><a href=\"#Q函数\" class=\"headerlink\" title=\"Q函数\"></a>Q函数</h4><p>在$s_t$状态执行$a_t$开始期望得到的总收益。</p><script type=\"math/tex;mode=display\">Q^\\pi(s_t, a_t) = \\sum_{t'=t}^T E_{\\pi_\\theta}[r(s_{t'}, a_{t'})|s_t,a_t]</script><h4 id=\"值函数\"><a href=\"#值函数\" class=\"headerlink\" title=\"值函数\"></a>值函数</h4><p>在$s_t$状态开始期望得到的总收益</p><script type=\"math/tex;mode=display\">V^\\pi(s_t) = \\sum_{t'=t}^T E_{\\pi_\\theta}[r(s_{t', }, a_{t'})|s_t]</script><script type=\"math/tex;mode=display\">V^\\pi(s_t) = E_{a_t\\sim\\pi(a_t|s_t)}[Q^\\pi(s_t,a_t)]</script><p>$s_1$ 状态的值函数即为强化学习的目标</p><script type=\"math/tex;mode=display\">E_{s_1\\sim p(s_1)}[V^\\pi(s_1)]</script><h4 id=\"重要使用方法\"><a href=\"#重要使用方法\" class=\"headerlink\" title=\"重要使用方法\"></a>重要使用方法</h4><ul><li>给定策略$\\pi$, 在得到 $Q^\\pi(s, a)$后，可以优化策略。将每个状态的策略修改为Q值最大的动作，则该策略将不差于原策略。</li><li>使用Q函数来计算梯度，来提升较优动作的概率。如果$Q^\\pi(s,a)&gt;V^\\pi(s)$则该动作优于平均动作。</li></ul><h3 id=\"强化学习算法类型\"><a href=\"#强化学习算法类型\" class=\"headerlink\" title=\"强化学习算法类型`\"></a>强化学习算法类型`</h3><ul><li><p>policy gradients: 直接优化收益计算表达式。基于样本采样的近似，再计算策略表达式的梯度。</p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1gb2uwl8l4aj30wi0eiq49.jpg\" alt=\"image.png\"></p></li><li><p>Value-based: 直接估计值函数和Q函数，通过神经网络来计算，使用argmax来优化策略。</p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1gb2uvyxvelj30xr0fc0u0.jpg\" alt=\"image.png\"></p></li><li><p>Actor-critic: 两者的结合。在得到值函数和Q函数后，通过计算策略表达式的梯度来优化策略</p></li></ul><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1gb2uxbtqz6j30vm0f4jsl.jpg\" alt=\"image.png\"></p><ul><li><p>Model-based RL： 首先估计模型，再提升策略。方法包括使用模型进行规划, 反向传播梯度到策略，使用模型来学习价值函数，使用模型来模拟新的经历。</p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1gb2uuupfnuj30ri0fm0tz.jpg\" alt=\"image.png\"></p></li></ul><h3 id=\"强化学习算法多样性原因\"><a href=\"#强化学习算法多样性原因\" class=\"headerlink\" title=\"强化学习算法多样性原因\"></a>强化学习算法多样性原因</h3><h4 id=\"不同的抉择\"><a href=\"#不同的抉择\" class=\"headerlink\" title=\"不同的抉择\"></a>不同的抉择</h4><ul><li>采样效率</li><li>稳定性，易用性。(收敛的概率，依赖人为调整超参数)</li></ul><h4 id=\"不同的前提假设\"><a href=\"#不同的前提假设\" class=\"headerlink\" title=\"不同的前提假设\"></a>不同的前提假设</h4><ul><li>随机或确定</li><li>连续或离散</li><li>片段或无限</li></ul><h4 id=\"不同的问题设定\"><a href=\"#不同的问题设定\" class=\"headerlink\" title=\"不同的问题设定\"></a>不同的问题设定</h4><ul><li>容易表示策略</li><li>容易表示环境</li></ul><h3 id=\"强化学习算法比较\"><a href=\"#强化学习算法比较\" class=\"headerlink\" title=\"强化学习算法比较\"></a>强化学习算法比较</h3><h4 id=\"样本效率\"><a href=\"#样本效率\" class=\"headerlink\" title=\"样本效率\"></a>样本效率</h4><p>样本效率指训练得到一个优秀的策略需要多少样本。</p><p>一个重要的抉择在于算法是否是off-policy</p><ul><li><p>off-policy: 可以通过样本来提升策略，而不需要当前策略产生新的样本。</p><blockquote><p>able to improve the policy without generating new samples from that policy.</p></blockquote></li><li><p>on-policy: 每当策略改变时，都需要使用当前策略产生新的样本。</p><blockquote><p>each time the policy is changed, even a little bit, we need to generate new samples.</p></blockquote></li></ul><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g73skv6974j30oy06i74n.jpg\" alt=\"2019-09-18 17-20-12 的屏幕截图.png\"></p><p>on-policy 策略的样本效率低，但可以通过并行算法来增加运行速率。</p><h4 id=\"稳定性\"><a href=\"#稳定性\" class=\"headerlink\" title=\"稳定性\"></a>稳定性</h4><p>稳定性指算法是否收敛，是否每一次都能收敛，收敛到什么值。</p><p>在监督学习中总是通过梯度下降来收敛到误差的较小值。</p><p>在强化学习中并不总是梯度下降。</p><ul><li>Value Function Fitting(Q-leaning): 采用的固定点迭代方法。在理想情况下最小化贝尔曼误差，但不一定保证能收敛。</li><li>Model-based RL: 模型并不是为了优化收益，更精确的模型不一定能带来收益的提高。</li><li>policy gradient： 采用了梯度下降，但是样本效率很低。</li></ul><h4 id=\"前提假设\"><a href=\"#前提假设\" class=\"headerlink\" title=\"前提假设\"></a>前提假设</h4><ul><li>全观测：价值函数拟合方法默认该假设，可以通过添加循环模块来解决。</li><li>片段学习：直接策略梯度方法和一些基于模型方法默认该假设。</li><li>连续和平滑：连续价值函数学习方法和一些基于模型方法默认该假设。</li></ul><h3 id=\"强化学习算法举例\"><a href=\"#强化学习算法举例\" class=\"headerlink\" title=\"强化学习算法举例\"></a>强化学习算法举例</h3><h4 id=\"价值函数拟合方法\"><a href=\"#价值函数拟合方法\" class=\"headerlink\" title=\"价值函数拟合方法\"></a>价值函数拟合方法</h4><ul><li>Q-learning, DQN</li><li>Temporal difference learning</li><li>Fitted value iteration</li></ul><h4 id=\"策略梯度方法\"><a href=\"#策略梯度方法\" class=\"headerlink\" title=\"策略梯度方法\"></a>策略梯度方法</h4><ul><li>REINFORCE</li><li>Natural policy gradient</li></ul><h4 id=\"演员表演家方法\"><a href=\"#演员表演家方法\" class=\"headerlink\" title=\"演员表演家方法\"></a>演员表演家方法</h4><ul><li>Asynchronous Advantage Actor-Critic</li><li>Soft Actor-Critic</li></ul><h4 id=\"基于模型方法-1\"><a href=\"#基于模型方法-1\" class=\"headerlink\" title=\"基于模型方法\"></a>基于模型方法</h4><ul><li>Dyna</li><li>Guided policy search</li></ul><!-- rebuild by neat -->"},{"title":"006-Value Function Approximation","mathjax":true,"date":"2019-08-28T09:27:54.000Z","_content":"### Introduction\n\n* Estimate value function with function approximation\n$$\n\\hat v(s, w) ≈ v_\\pi(s) \\\\ \n\\hat q(s, a, w) ≈ q_\\pi(s, a)\n$$\n* Generalise from seen states to unseen states\nUpdate parameter w using MC or TD learning\n\n![](https://ww1.sinaimg.cn/large/006A69aEly1g5zeudlp2lj30o80cuq3m.jpg)\n\n#### Objective Function\n\n$$\nJ(w) = E_\\pi[(v_\\pi(S) - \\hat v(S, w))^2]\n$$\n\n#### Least Squares Prediction\n\nexperice \n$$\nD = \\{\\lt s_1, v_1^\\pi\\gt, \\lt s_2, v_2^\\pi\\gt, ... , \\lt s_T, v_T^\\pi\\gt\\}\n$$\nloss\n$$\nLS(w) = \\sum_{t=1}^T(v_t^\\pi - \\hat v(s_t, w))^2\n$$\n### Deep Q-Network\n\n* DQN uses experience replay and fixed Q-targets\n* Take action $a_t$ according to $\\epsilon$-greedy policy\n* Store transition $(s_t, a_t, r_{t+1}, s_{t+1})$ in replay memory D\n* Sample random mini-batch of transitions $(s, a, r, s')$ from D\n* Compute Q-learning targets w.r.t. old, fixed parameters $w-$\n* Optimise MSE between Q-network and Q-learning targets\n$$\nL_i(w_i) = E_{s, a, r, s' \\sim D_i}[(r + \\gamma \\max_{a'}Q(s', a'; w_i^-)-Q(s, a; w_i))^2]\n$$\n* Using variant of stochastic gradient descent\n\n","source":"_posts/006-Value-Function-Approximation.md","raw":"---\ntitle: 006-Value Function Approximation\nmathjax: true\ndate: 2019-08-28 17:27:54\ncategories:\n    - RL(David Silver)\ntags:\n    - RL\n---\n### Introduction\n\n* Estimate value function with function approximation\n$$\n\\hat v(s, w) ≈ v_\\pi(s) \\\\ \n\\hat q(s, a, w) ≈ q_\\pi(s, a)\n$$\n* Generalise from seen states to unseen states\nUpdate parameter w using MC or TD learning\n\n![](https://ww1.sinaimg.cn/large/006A69aEly1g5zeudlp2lj30o80cuq3m.jpg)\n\n#### Objective Function\n\n$$\nJ(w) = E_\\pi[(v_\\pi(S) - \\hat v(S, w))^2]\n$$\n\n#### Least Squares Prediction\n\nexperice \n$$\nD = \\{\\lt s_1, v_1^\\pi\\gt, \\lt s_2, v_2^\\pi\\gt, ... , \\lt s_T, v_T^\\pi\\gt\\}\n$$\nloss\n$$\nLS(w) = \\sum_{t=1}^T(v_t^\\pi - \\hat v(s_t, w))^2\n$$\n### Deep Q-Network\n\n* DQN uses experience replay and fixed Q-targets\n* Take action $a_t$ according to $\\epsilon$-greedy policy\n* Store transition $(s_t, a_t, r_{t+1}, s_{t+1})$ in replay memory D\n* Sample random mini-batch of transitions $(s, a, r, s')$ from D\n* Compute Q-learning targets w.r.t. old, fixed parameters $w-$\n* Optimise MSE between Q-network and Q-learning targets\n$$\nL_i(w_i) = E_{s, a, r, s' \\sim D_i}[(r + \\gamma \\max_{a'}Q(s', a'; w_i^-)-Q(s, a; w_i))^2]\n$$\n* Using variant of stochastic gradient descent\n\n","slug":"006-Value-Function-Approximation","published":1,"updated":"2020-01-16T02:48:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5kuwy1m000hgz4d9oozwywb","content":"<!-- build time:Sun Jan 19 2020 18:07:22 GMT+0800 (GMT+08:00) --><h3 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h3><ul><li>Estimate value function with function approximation<script type=\"math/tex;mode=display\">\\hat v(s, w) ≈ v_\\pi(s) \\\\ \n\\hat q(s, a, w) ≈ q_\\pi(s, a)</script></li><li>Generalise from seen states to unseen states<br>Update parameter w using MC or TD learning</li></ul><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g5zeudlp2lj30o80cuq3m.jpg\" alt></p><h4 id=\"Objective-Function\"><a href=\"#Objective-Function\" class=\"headerlink\" title=\"Objective Function\"></a>Objective Function</h4><script type=\"math/tex;mode=display\">J(w) = E_\\pi[(v_\\pi(S) - \\hat v(S, w))^2]</script><h4 id=\"Least-Squares-Prediction\"><a href=\"#Least-Squares-Prediction\" class=\"headerlink\" title=\"Least Squares Prediction\"></a>Least Squares Prediction</h4><p>experice</p><script type=\"math/tex;mode=display\">D = \\{\\lt s_1, v_1^\\pi\\gt, \\lt s_2, v_2^\\pi\\gt, ... , \\lt s_T, v_T^\\pi\\gt\\}</script><p>loss</p><script type=\"math/tex;mode=display\">LS(w) = \\sum_{t=1}^T(v_t^\\pi - \\hat v(s_t, w))^2</script><h3 id=\"Deep-Q-Network\"><a href=\"#Deep-Q-Network\" class=\"headerlink\" title=\"Deep Q-Network\"></a>Deep Q-Network</h3><ul><li>DQN uses experience replay and fixed Q-targets</li><li>Take action $a_t$ according to $\\epsilon$-greedy policy</li><li>Store transition $(s_t, a_t, r_{t+1}, s_{t+1})$ in replay memory D</li><li>Sample random mini-batch of transitions $(s, a, r, s’)$ from D</li><li>Compute Q-learning targets w.r.t. old, fixed parameters $w-$</li><li>Optimise MSE between Q-network and Q-learning targets<script type=\"math/tex;mode=display\">L_i(w_i) = E_{s, a, r, s' \\sim D_i}[(r + \\gamma \\max_{a'}Q(s', a'; w_i^-)-Q(s, a; w_i))^2]</script></li><li>Using variant of stochastic gradient descent</li></ul><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sun Jan 19 2020 18:07:22 GMT+0800 (GMT+08:00) --><h3 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h3><ul><li>Estimate value function with function approximation<script type=\"math/tex;mode=display\">\\hat v(s, w) ≈ v_\\pi(s) \\\\ \n\\hat q(s, a, w) ≈ q_\\pi(s, a)</script></li><li>Generalise from seen states to unseen states<br>Update parameter w using MC or TD learning</li></ul><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g5zeudlp2lj30o80cuq3m.jpg\" alt></p><h4 id=\"Objective-Function\"><a href=\"#Objective-Function\" class=\"headerlink\" title=\"Objective Function\"></a>Objective Function</h4><script type=\"math/tex;mode=display\">J(w) = E_\\pi[(v_\\pi(S) - \\hat v(S, w))^2]</script><h4 id=\"Least-Squares-Prediction\"><a href=\"#Least-Squares-Prediction\" class=\"headerlink\" title=\"Least Squares Prediction\"></a>Least Squares Prediction</h4><p>experice</p><script type=\"math/tex;mode=display\">D = \\{\\lt s_1, v_1^\\pi\\gt, \\lt s_2, v_2^\\pi\\gt, ... , \\lt s_T, v_T^\\pi\\gt\\}</script><p>loss</p><script type=\"math/tex;mode=display\">LS(w) = \\sum_{t=1}^T(v_t^\\pi - \\hat v(s_t, w))^2</script><h3 id=\"Deep-Q-Network\"><a href=\"#Deep-Q-Network\" class=\"headerlink\" title=\"Deep Q-Network\"></a>Deep Q-Network</h3><ul><li>DQN uses experience replay and fixed Q-targets</li><li>Take action $a_t$ according to $\\epsilon$-greedy policy</li><li>Store transition $(s_t, a_t, r_{t+1}, s_{t+1})$ in replay memory D</li><li>Sample random mini-batch of transitions $(s, a, r, s’)$ from D</li><li>Compute Q-learning targets w.r.t. old, fixed parameters $w-$</li><li>Optimise MSE between Q-network and Q-learning targets<script type=\"math/tex;mode=display\">L_i(w_i) = E_{s, a, r, s' \\sim D_i}[(r + \\gamma \\max_{a'}Q(s', a'; w_i^-)-Q(s, a; w_i))^2]</script></li><li>Using variant of stochastic gradient descent</li></ul><!-- rebuild by neat -->"},{"title":"007-Policy Gradient","mathjax":true,"date":"2019-08-28T09:28:03.000Z","_content":"### Introduction\n\n#### Advantage\n\nAdvantages:\n\n* Better convergence properties\n* Effective in high-dimensional or continuous action spaces\n* Can learn stochastic policies\n\nDisadvantages:\n\n* Typically converge to a local rather than global optimum\n* Evaluating a policy is typically inefficient and high variance\n\n#### policy objective function\n\n","source":"_posts/007-Policy-Gradient.md","raw":"---\ntitle: 007-Policy Gradient\nmathjax: true\ndate: 2019-08-28 17:28:03\ncategories:\n    - RL(David Silver)\ntags:\n    - RL\n---\n### Introduction\n\n#### Advantage\n\nAdvantages:\n\n* Better convergence properties\n* Effective in high-dimensional or continuous action spaces\n* Can learn stochastic policies\n\nDisadvantages:\n\n* Typically converge to a local rather than global optimum\n* Evaluating a policy is typically inefficient and high variance\n\n#### policy objective function\n\n","slug":"007-Policy-Gradient","published":1,"updated":"2020-01-16T02:48:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5kuwy1n000kgz4deh4adriu","content":"<!-- build time:Sun Jan 19 2020 18:07:22 GMT+0800 (GMT+08:00) --><h3 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h3><h4 id=\"Advantage\"><a href=\"#Advantage\" class=\"headerlink\" title=\"Advantage\"></a>Advantage</h4><p>Advantages:</p><ul><li>Better convergence properties</li><li>Effective in high-dimensional or continuous action spaces</li><li>Can learn stochastic policies</li></ul><p>Disadvantages:</p><ul><li>Typically converge to a local rather than global optimum</li><li>Evaluating a policy is typically inefficient and high variance</li></ul><h4 id=\"policy-objective-function\"><a href=\"#policy-objective-function\" class=\"headerlink\" title=\"policy objective function\"></a>policy objective function</h4><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sun Jan 19 2020 18:07:22 GMT+0800 (GMT+08:00) --><h3 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h3><h4 id=\"Advantage\"><a href=\"#Advantage\" class=\"headerlink\" title=\"Advantage\"></a>Advantage</h4><p>Advantages:</p><ul><li>Better convergence properties</li><li>Effective in high-dimensional or continuous action spaces</li><li>Can learn stochastic policies</li></ul><p>Disadvantages:</p><ul><li>Typically converge to a local rather than global optimum</li><li>Evaluating a policy is typically inefficient and high variance</li></ul><h4 id=\"policy-objective-function\"><a href=\"#policy-objective-function\" class=\"headerlink\" title=\"policy objective function\"></a>policy objective function</h4><!-- rebuild by neat -->"},{"title":"005-Model Free Control","mathjax":true,"date":"2019-08-28T09:27:44.000Z","_content":"optimise the valuefunction of an unknown MDP\n\n### On-policy and Off-policy\n\n* On-policy learning\n    * Learn on the job\n    * Learn about policy π from experience sampled from π \n* Off-policy learning\n    * Look over someone’s shoulder\n    * Learn about policy π from experience sampled from µ\n\n### On-policy Monte-Carlo Learning\n\n#### $\\epsilon$-Greedy Exploration\n\n$$\n \\pi(a|s)=\\left\\{\n\\begin{aligned}\n&\\epsilon / m + 1 - \\epsilon \\;& if a^* = \\arg\\max_{a\\in A} Q(s, a)\\\\\n&\\epsilon / m    & otherwise\n\\end{aligned}\n\\right.\n$$\n\n#### Monte-Carlo Policy Iteration\n\n* Policy Evaluation: Monte-Carlo policy Evalutaion, $Q=q_\\pi$\n* Pollicy Improvement: $\\epsilon$-greedy policy improvement\n\n#### GLIE Monte-Carlo Control(Greedy in the Limit with Infinite Exploration)\n\n* 对于使用$\\pi$的第k次采样序列: $\\{S_1, A_1, R_2, ..., S_T\\}$\n* 更新每一个状态和动作\n$$\n\\begin{aligned}\nN(S_t, A_t) &\\leftarrow N(S_t, A_t) + 1 \\\\\nQ(S_t, A_r) &\\leftarrow Q(S_t, A_t) + \\frac{1}{N(S_t, A_t)}(G_t - Q(S_t, A_t))\n\\end{aligned}\n$$\n* 优化策略\n$$\n\\begin{aligned}\n\\epsilon &\\leftarrow 1 / k \\\\\n\\pi & \\leftarrow \\epsilon-greedy(Q)\n\\end{aligned}\n$$\n\n### On-Policy Temporal-Difference Learning\n\n#### Sarsa\n\n$$\nQ(S, A) \\leftarrow Q(S, A) + \\alpha(R + \\gamma Q(S', A') - Q(S, A)\n$$\n![](https://ww1.sinaimg.cn/large/006A69aEly1g5zckgpzehj30j1078whp.jpg)\n#### n-step Sarsa\n\nQ-return\n$$\nq_t(n) = R_{t+1} + \\gamma R_{t+2} + ... + \\gamma ^ {n - 1} R_{t + n} + \\gamma^n Q(S_{t+n}) \n$$\nn-step Sarsa\n$$\nQ(S_t, A_t) \\leftarrow Q(S_t, A_t) + \\alpha(q_t^{(n)} - Q(S_t, A_t))\n$$\n\n#### Forward View Sarsa($\\lambda$)\n\n$$\nq_t^\\lambda = (1 - \\lambda)\\sum_{n=1}^\\infty \\lambda^{n-1}q_t^{(n)}\n$$\nSarsa($\\lambda$)\n$$\nQ(S_t, A_t) \\leftarrow Q(S_t, A_t) + \\alpha(q_t^{\\lambda} - Q(S_t, A_t))\n$$\n\n#### Backward View Sarsa($\\lambda$)\n\nEligible Trace\n$$\nE_t(s, a) = \\gamma\\lambda E_{t-1}(s, a) + I(S_t=s, A_t=a)\n$$\nUpdate for every state s and action a\n$$\n\\begin{aligned}\n\\delta_t &= R_{t+1}+\\gamma Q(S_{t+1}, A_{t+1}) - Q(S_t, A_t) \\\\ \nQ(s, a) &\\leftarrow Q(s, a) + \\alpha \\delta_t E_t(s, a)\n\\end{aligned}\n$$\n\n#### Backward View Sarsa($\\lambda$) Algorithm\n![image](https://ww1.sinaimg.cn/large/006A69aEly1g5scilvdj6j30i60aatbw.jpg)\n\n### Off-Policy Learning\n\n* evaluate target policy $\\pi(a|s)$ to compute $v_\\pi(s)$ or $q_\\pi(s, a)$\n* While following behaviour policy $\\mu(a|s)$\n$$\n\\{S_1, A_1, R_2, ..., S_T \\} ∼ \\mu\n$$\n\n#### Importance Sampling for off-policy Monte-Carlo\n\n$$\nG_t^{\\pi/\\mu}=\\frac{\\pi(A_t|S_t)\\pi(A_{t+1}|S_{t+1})}{\\mu(A_t|S_t)\\mu(A_{t+1}|S_{t+1})}...\\frac{\\pi(A_T|S_T)}{\\mu(A_T|S_T)}G_t\n$$\n$$\nV(S_t) \\leftarrow V(S_t) + \\alpha(G_t^{\\pi/\\mu}-V(S_t))\n$$\nImportance sampling can dramatically increase variance\n\n#### Importance Sampling for off-policy TD  \n$$\nV(S_t) \\leftarrow V(S_t) + \\alpha(\\frac{\\pi(A_t|S_t)}{\\mu(A_t|S_t)}(R_{t+1}+\\gamma V(S_{t+1})-V(S_t))\n$$\n\n#### Q-learning\n\n* Next action is chosen using behavior policy $A_{t+1} \\sim \\mu(·|S_t) $\n* Consider Alternative successor action $A' \\sim \\pi(·|S_t)$\n\n$$\nQ(S_t, A_t) \\leftarrow Q(S_t, A_r) + \\alpha(R_{t+1} + \\gamma Q(S_{t+1}, A') - Q(S_t, A_t))\n$$\n\n#### Off-policy Q-learning\n$$\nQ(S, A) \\leftarrow Q(S, A) + \\alpha(R + \\gamma \\max_a'Q(S', a') - Q(S, A))\n$$\n![](https://ww1.sinaimg.cn/large/006A69aEly1g5zcice89cj30j406lwgt.jpg)\n\n","source":"_posts/005-Model-Free-Control.md","raw":"---\ntitle: 005-Model Free Control\nmathjax: true\ndate: 2019-08-28 17:27:44\ncategories:\n    - RL(David Silver)\ntags:\n    - RL\n---\noptimise the valuefunction of an unknown MDP\n\n### On-policy and Off-policy\n\n* On-policy learning\n    * Learn on the job\n    * Learn about policy π from experience sampled from π \n* Off-policy learning\n    * Look over someone’s shoulder\n    * Learn about policy π from experience sampled from µ\n\n### On-policy Monte-Carlo Learning\n\n#### $\\epsilon$-Greedy Exploration\n\n$$\n \\pi(a|s)=\\left\\{\n\\begin{aligned}\n&\\epsilon / m + 1 - \\epsilon \\;& if a^* = \\arg\\max_{a\\in A} Q(s, a)\\\\\n&\\epsilon / m    & otherwise\n\\end{aligned}\n\\right.\n$$\n\n#### Monte-Carlo Policy Iteration\n\n* Policy Evaluation: Monte-Carlo policy Evalutaion, $Q=q_\\pi$\n* Pollicy Improvement: $\\epsilon$-greedy policy improvement\n\n#### GLIE Monte-Carlo Control(Greedy in the Limit with Infinite Exploration)\n\n* 对于使用$\\pi$的第k次采样序列: $\\{S_1, A_1, R_2, ..., S_T\\}$\n* 更新每一个状态和动作\n$$\n\\begin{aligned}\nN(S_t, A_t) &\\leftarrow N(S_t, A_t) + 1 \\\\\nQ(S_t, A_r) &\\leftarrow Q(S_t, A_t) + \\frac{1}{N(S_t, A_t)}(G_t - Q(S_t, A_t))\n\\end{aligned}\n$$\n* 优化策略\n$$\n\\begin{aligned}\n\\epsilon &\\leftarrow 1 / k \\\\\n\\pi & \\leftarrow \\epsilon-greedy(Q)\n\\end{aligned}\n$$\n\n### On-Policy Temporal-Difference Learning\n\n#### Sarsa\n\n$$\nQ(S, A) \\leftarrow Q(S, A) + \\alpha(R + \\gamma Q(S', A') - Q(S, A)\n$$\n![](https://ww1.sinaimg.cn/large/006A69aEly1g5zckgpzehj30j1078whp.jpg)\n#### n-step Sarsa\n\nQ-return\n$$\nq_t(n) = R_{t+1} + \\gamma R_{t+2} + ... + \\gamma ^ {n - 1} R_{t + n} + \\gamma^n Q(S_{t+n}) \n$$\nn-step Sarsa\n$$\nQ(S_t, A_t) \\leftarrow Q(S_t, A_t) + \\alpha(q_t^{(n)} - Q(S_t, A_t))\n$$\n\n#### Forward View Sarsa($\\lambda$)\n\n$$\nq_t^\\lambda = (1 - \\lambda)\\sum_{n=1}^\\infty \\lambda^{n-1}q_t^{(n)}\n$$\nSarsa($\\lambda$)\n$$\nQ(S_t, A_t) \\leftarrow Q(S_t, A_t) + \\alpha(q_t^{\\lambda} - Q(S_t, A_t))\n$$\n\n#### Backward View Sarsa($\\lambda$)\n\nEligible Trace\n$$\nE_t(s, a) = \\gamma\\lambda E_{t-1}(s, a) + I(S_t=s, A_t=a)\n$$\nUpdate for every state s and action a\n$$\n\\begin{aligned}\n\\delta_t &= R_{t+1}+\\gamma Q(S_{t+1}, A_{t+1}) - Q(S_t, A_t) \\\\ \nQ(s, a) &\\leftarrow Q(s, a) + \\alpha \\delta_t E_t(s, a)\n\\end{aligned}\n$$\n\n#### Backward View Sarsa($\\lambda$) Algorithm\n![image](https://ww1.sinaimg.cn/large/006A69aEly1g5scilvdj6j30i60aatbw.jpg)\n\n### Off-Policy Learning\n\n* evaluate target policy $\\pi(a|s)$ to compute $v_\\pi(s)$ or $q_\\pi(s, a)$\n* While following behaviour policy $\\mu(a|s)$\n$$\n\\{S_1, A_1, R_2, ..., S_T \\} ∼ \\mu\n$$\n\n#### Importance Sampling for off-policy Monte-Carlo\n\n$$\nG_t^{\\pi/\\mu}=\\frac{\\pi(A_t|S_t)\\pi(A_{t+1}|S_{t+1})}{\\mu(A_t|S_t)\\mu(A_{t+1}|S_{t+1})}...\\frac{\\pi(A_T|S_T)}{\\mu(A_T|S_T)}G_t\n$$\n$$\nV(S_t) \\leftarrow V(S_t) + \\alpha(G_t^{\\pi/\\mu}-V(S_t))\n$$\nImportance sampling can dramatically increase variance\n\n#### Importance Sampling for off-policy TD  \n$$\nV(S_t) \\leftarrow V(S_t) + \\alpha(\\frac{\\pi(A_t|S_t)}{\\mu(A_t|S_t)}(R_{t+1}+\\gamma V(S_{t+1})-V(S_t))\n$$\n\n#### Q-learning\n\n* Next action is chosen using behavior policy $A_{t+1} \\sim \\mu(·|S_t) $\n* Consider Alternative successor action $A' \\sim \\pi(·|S_t)$\n\n$$\nQ(S_t, A_t) \\leftarrow Q(S_t, A_r) + \\alpha(R_{t+1} + \\gamma Q(S_{t+1}, A') - Q(S_t, A_t))\n$$\n\n#### Off-policy Q-learning\n$$\nQ(S, A) \\leftarrow Q(S, A) + \\alpha(R + \\gamma \\max_a'Q(S', a') - Q(S, A))\n$$\n![](https://ww1.sinaimg.cn/large/006A69aEly1g5zcice89cj30j406lwgt.jpg)\n\n","slug":"005-Model-Free-Control","published":1,"updated":"2020-01-16T02:48:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5kuwy1o000ogz4dg4rribqt","content":"<!-- build time:Sun Jan 19 2020 18:07:22 GMT+0800 (GMT+08:00) --><p>optimise the valuefunction of an unknown MDP</p><h3 id=\"On-policy-and-Off-policy\"><a href=\"#On-policy-and-Off-policy\" class=\"headerlink\" title=\"On-policy and Off-policy\"></a>On-policy and Off-policy</h3><ul><li>On-policy learning<ul><li>Learn on the job</li><li>Learn about policy π from experience sampled from π</li></ul></li><li>Off-policy learning<ul><li>Look over someone’s shoulder</li><li>Learn about policy π from experience sampled from µ</li></ul></li></ul><h3 id=\"On-policy-Monte-Carlo-Learning\"><a href=\"#On-policy-Monte-Carlo-Learning\" class=\"headerlink\" title=\"On-policy Monte-Carlo Learning\"></a>On-policy Monte-Carlo Learning</h3><h4 id=\"epsilon-Greedy-Exploration\"><a href=\"#epsilon-Greedy-Exploration\" class=\"headerlink\" title=\"$\\epsilon$-Greedy Exploration\"></a>$\\epsilon$-Greedy Exploration</h4><script type=\"math/tex;mode=display\">\\pi(a|s)=\\left\\{\n\\begin{aligned}\n&\\epsilon / m + 1 - \\epsilon \\;& if a^* = \\arg\\max_{a\\in A} Q(s, a)\\\\\n&\\epsilon / m    & otherwise\n\\end{aligned}\n\\right.</script><h4 id=\"Monte-Carlo-Policy-Iteration\"><a href=\"#Monte-Carlo-Policy-Iteration\" class=\"headerlink\" title=\"Monte-Carlo Policy Iteration\"></a>Monte-Carlo Policy Iteration</h4><ul><li>Policy Evaluation: Monte-Carlo policy Evalutaion, $Q=q_\\pi$</li><li>Pollicy Improvement: $\\epsilon$-greedy policy improvement</li></ul><h4 id=\"GLIE-Monte-Carlo-Control-Greedy-in-the-Limit-with-Infinite-Exploration\"><a href=\"#GLIE-Monte-Carlo-Control-Greedy-in-the-Limit-with-Infinite-Exploration\" class=\"headerlink\" title=\"GLIE Monte-Carlo Control(Greedy in the Limit with Infinite Exploration)\"></a>GLIE Monte-Carlo Control(Greedy in the Limit with Infinite Exploration)</h4><ul><li>对于使用$\\pi$的第k次采样序列: $\\{S_1, A_1, R_2, …, S_T\\}$</li><li>更新每一个状态和动作<script type=\"math/tex;mode=display\">\\begin{aligned}\nN(S_t, A_t) &\\leftarrow N(S_t, A_t) + 1 \\\\\nQ(S_t, A_r) &\\leftarrow Q(S_t, A_t) + \\frac{1}{N(S_t, A_t)}(G_t - Q(S_t, A_t))\n\\end{aligned}</script></li><li>优化策略<script type=\"math/tex;mode=display\">\\begin{aligned}\n\\epsilon &\\leftarrow 1 / k \\\\\n\\pi & \\leftarrow \\epsilon-greedy(Q)\n\\end{aligned}</script></li></ul><h3 id=\"On-Policy-Temporal-Difference-Learning\"><a href=\"#On-Policy-Temporal-Difference-Learning\" class=\"headerlink\" title=\"On-Policy Temporal-Difference Learning\"></a>On-Policy Temporal-Difference Learning</h3><h4 id=\"Sarsa\"><a href=\"#Sarsa\" class=\"headerlink\" title=\"Sarsa\"></a>Sarsa</h4><script type=\"math/tex;mode=display\">Q(S, A) \\leftarrow Q(S, A) + \\alpha(R + \\gamma Q(S', A') - Q(S, A)</script><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g5zckgpzehj30j1078whp.jpg\" alt></p><h4 id=\"n-step-Sarsa\"><a href=\"#n-step-Sarsa\" class=\"headerlink\" title=\"n-step Sarsa\"></a>n-step Sarsa</h4><p>Q-return</p><script type=\"math/tex;mode=display\">q_t(n) = R_{t+1} + \\gamma R_{t+2} + ... + \\gamma ^ {n - 1} R_{t + n} + \\gamma^n Q(S_{t+n})</script><p>n-step Sarsa</p><script type=\"math/tex;mode=display\">Q(S_t, A_t) \\leftarrow Q(S_t, A_t) + \\alpha(q_t^{(n)} - Q(S_t, A_t))</script><h4 id=\"Forward-View-Sarsa-lambda\"><a href=\"#Forward-View-Sarsa-lambda\" class=\"headerlink\" title=\"Forward View Sarsa($\\lambda$)\"></a>Forward View Sarsa($\\lambda$)</h4><script type=\"math/tex;mode=display\">q_t^\\lambda = (1 - \\lambda)\\sum_{n=1}^\\infty \\lambda^{n-1}q_t^{(n)}</script><p>Sarsa($\\lambda$)</p><script type=\"math/tex;mode=display\">Q(S_t, A_t) \\leftarrow Q(S_t, A_t) + \\alpha(q_t^{\\lambda} - Q(S_t, A_t))</script><h4 id=\"Backward-View-Sarsa-lambda\"><a href=\"#Backward-View-Sarsa-lambda\" class=\"headerlink\" title=\"Backward View Sarsa($\\lambda$)\"></a>Backward View Sarsa($\\lambda$)</h4><p>Eligible Trace</p><script type=\"math/tex;mode=display\">E_t(s, a) = \\gamma\\lambda E_{t-1}(s, a) + I(S_t=s, A_t=a)</script><p>Update for every state s and action a</p><script type=\"math/tex;mode=display\">\\begin{aligned}\n\\delta_t &= R_{t+1}+\\gamma Q(S_{t+1}, A_{t+1}) - Q(S_t, A_t) \\\\ \nQ(s, a) &\\leftarrow Q(s, a) + \\alpha \\delta_t E_t(s, a)\n\\end{aligned}</script><h4 id=\"Backward-View-Sarsa-lambda-Algorithm\"><a href=\"#Backward-View-Sarsa-lambda-Algorithm\" class=\"headerlink\" title=\"Backward View Sarsa($\\lambda$) Algorithm\"></a>Backward View Sarsa($\\lambda$) Algorithm</h4><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g5scilvdj6j30i60aatbw.jpg\" alt=\"image\"></p><h3 id=\"Off-Policy-Learning\"><a href=\"#Off-Policy-Learning\" class=\"headerlink\" title=\"Off-Policy Learning\"></a>Off-Policy Learning</h3><ul><li>evaluate target policy $\\pi(a|s)$ to compute $v_\\pi(s)$ or $q_\\pi(s, a)$</li><li>While following behaviour policy $\\mu(a|s)$<script type=\"math/tex;mode=display\">\\{S_1, A_1, R_2, ..., S_T \\} ∼ \\mu</script></li></ul><h4 id=\"Importance-Sampling-for-off-policy-Monte-Carlo\"><a href=\"#Importance-Sampling-for-off-policy-Monte-Carlo\" class=\"headerlink\" title=\"Importance Sampling for off-policy Monte-Carlo\"></a>Importance Sampling for off-policy Monte-Carlo</h4><script type=\"math/tex;mode=display\">G_t^{\\pi/\\mu}=\\frac{\\pi(A_t|S_t)\\pi(A_{t+1}|S_{t+1})}{\\mu(A_t|S_t)\\mu(A_{t+1}|S_{t+1})}...\\frac{\\pi(A_T|S_T)}{\\mu(A_T|S_T)}G_t</script><script type=\"math/tex;mode=display\">V(S_t) \\leftarrow V(S_t) + \\alpha(G_t^{\\pi/\\mu}-V(S_t))</script><p>Importance sampling can dramatically increase variance</p><h4 id=\"Importance-Sampling-for-off-policy-TD\"><a href=\"#Importance-Sampling-for-off-policy-TD\" class=\"headerlink\" title=\"Importance Sampling for off-policy TD\"></a>Importance Sampling for off-policy TD</h4><script type=\"math/tex;mode=display\">V(S_t) \\leftarrow V(S_t) + \\alpha(\\frac{\\pi(A_t|S_t)}{\\mu(A_t|S_t)}(R_{t+1}+\\gamma V(S_{t+1})-V(S_t))</script><h4 id=\"Q-learning\"><a href=\"#Q-learning\" class=\"headerlink\" title=\"Q-learning\"></a>Q-learning</h4><ul><li>Next action is chosen using behavior policy $A_{t+1} \\sim \\mu(·|S_t) $</li><li>Consider Alternative successor action $A’ \\sim \\pi(·|S_t)$</li></ul><script type=\"math/tex;mode=display\">Q(S_t, A_t) \\leftarrow Q(S_t, A_r) + \\alpha(R_{t+1} + \\gamma Q(S_{t+1}, A') - Q(S_t, A_t))</script><h4 id=\"Off-policy-Q-learning\"><a href=\"#Off-policy-Q-learning\" class=\"headerlink\" title=\"Off-policy Q-learning\"></a>Off-policy Q-learning</h4><script type=\"math/tex;mode=display\">Q(S, A) \\leftarrow Q(S, A) + \\alpha(R + \\gamma \\max_a'Q(S', a') - Q(S, A))</script><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g5zcice89cj30j406lwgt.jpg\" alt></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sun Jan 19 2020 18:07:22 GMT+0800 (GMT+08:00) --><p>optimise the valuefunction of an unknown MDP</p><h3 id=\"On-policy-and-Off-policy\"><a href=\"#On-policy-and-Off-policy\" class=\"headerlink\" title=\"On-policy and Off-policy\"></a>On-policy and Off-policy</h3><ul><li>On-policy learning<ul><li>Learn on the job</li><li>Learn about policy π from experience sampled from π</li></ul></li><li>Off-policy learning<ul><li>Look over someone’s shoulder</li><li>Learn about policy π from experience sampled from µ</li></ul></li></ul><h3 id=\"On-policy-Monte-Carlo-Learning\"><a href=\"#On-policy-Monte-Carlo-Learning\" class=\"headerlink\" title=\"On-policy Monte-Carlo Learning\"></a>On-policy Monte-Carlo Learning</h3><h4 id=\"epsilon-Greedy-Exploration\"><a href=\"#epsilon-Greedy-Exploration\" class=\"headerlink\" title=\"$\\epsilon$-Greedy Exploration\"></a>$\\epsilon$-Greedy Exploration</h4><script type=\"math/tex;mode=display\">\\pi(a|s)=\\left\\{\n\\begin{aligned}\n&\\epsilon / m + 1 - \\epsilon \\;& if a^* = \\arg\\max_{a\\in A} Q(s, a)\\\\\n&\\epsilon / m    & otherwise\n\\end{aligned}\n\\right.</script><h4 id=\"Monte-Carlo-Policy-Iteration\"><a href=\"#Monte-Carlo-Policy-Iteration\" class=\"headerlink\" title=\"Monte-Carlo Policy Iteration\"></a>Monte-Carlo Policy Iteration</h4><ul><li>Policy Evaluation: Monte-Carlo policy Evalutaion, $Q=q_\\pi$</li><li>Pollicy Improvement: $\\epsilon$-greedy policy improvement</li></ul><h4 id=\"GLIE-Monte-Carlo-Control-Greedy-in-the-Limit-with-Infinite-Exploration\"><a href=\"#GLIE-Monte-Carlo-Control-Greedy-in-the-Limit-with-Infinite-Exploration\" class=\"headerlink\" title=\"GLIE Monte-Carlo Control(Greedy in the Limit with Infinite Exploration)\"></a>GLIE Monte-Carlo Control(Greedy in the Limit with Infinite Exploration)</h4><ul><li>对于使用$\\pi$的第k次采样序列: $\\{S_1, A_1, R_2, …, S_T\\}$</li><li>更新每一个状态和动作<script type=\"math/tex;mode=display\">\\begin{aligned}\nN(S_t, A_t) &\\leftarrow N(S_t, A_t) + 1 \\\\\nQ(S_t, A_r) &\\leftarrow Q(S_t, A_t) + \\frac{1}{N(S_t, A_t)}(G_t - Q(S_t, A_t))\n\\end{aligned}</script></li><li>优化策略<script type=\"math/tex;mode=display\">\\begin{aligned}\n\\epsilon &\\leftarrow 1 / k \\\\\n\\pi & \\leftarrow \\epsilon-greedy(Q)\n\\end{aligned}</script></li></ul><h3 id=\"On-Policy-Temporal-Difference-Learning\"><a href=\"#On-Policy-Temporal-Difference-Learning\" class=\"headerlink\" title=\"On-Policy Temporal-Difference Learning\"></a>On-Policy Temporal-Difference Learning</h3><h4 id=\"Sarsa\"><a href=\"#Sarsa\" class=\"headerlink\" title=\"Sarsa\"></a>Sarsa</h4><script type=\"math/tex;mode=display\">Q(S, A) \\leftarrow Q(S, A) + \\alpha(R + \\gamma Q(S', A') - Q(S, A)</script><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g5zckgpzehj30j1078whp.jpg\" alt></p><h4 id=\"n-step-Sarsa\"><a href=\"#n-step-Sarsa\" class=\"headerlink\" title=\"n-step Sarsa\"></a>n-step Sarsa</h4><p>Q-return</p><script type=\"math/tex;mode=display\">q_t(n) = R_{t+1} + \\gamma R_{t+2} + ... + \\gamma ^ {n - 1} R_{t + n} + \\gamma^n Q(S_{t+n})</script><p>n-step Sarsa</p><script type=\"math/tex;mode=display\">Q(S_t, A_t) \\leftarrow Q(S_t, A_t) + \\alpha(q_t^{(n)} - Q(S_t, A_t))</script><h4 id=\"Forward-View-Sarsa-lambda\"><a href=\"#Forward-View-Sarsa-lambda\" class=\"headerlink\" title=\"Forward View Sarsa($\\lambda$)\"></a>Forward View Sarsa($\\lambda$)</h4><script type=\"math/tex;mode=display\">q_t^\\lambda = (1 - \\lambda)\\sum_{n=1}^\\infty \\lambda^{n-1}q_t^{(n)}</script><p>Sarsa($\\lambda$)</p><script type=\"math/tex;mode=display\">Q(S_t, A_t) \\leftarrow Q(S_t, A_t) + \\alpha(q_t^{\\lambda} - Q(S_t, A_t))</script><h4 id=\"Backward-View-Sarsa-lambda\"><a href=\"#Backward-View-Sarsa-lambda\" class=\"headerlink\" title=\"Backward View Sarsa($\\lambda$)\"></a>Backward View Sarsa($\\lambda$)</h4><p>Eligible Trace</p><script type=\"math/tex;mode=display\">E_t(s, a) = \\gamma\\lambda E_{t-1}(s, a) + I(S_t=s, A_t=a)</script><p>Update for every state s and action a</p><script type=\"math/tex;mode=display\">\\begin{aligned}\n\\delta_t &= R_{t+1}+\\gamma Q(S_{t+1}, A_{t+1}) - Q(S_t, A_t) \\\\ \nQ(s, a) &\\leftarrow Q(s, a) + \\alpha \\delta_t E_t(s, a)\n\\end{aligned}</script><h4 id=\"Backward-View-Sarsa-lambda-Algorithm\"><a href=\"#Backward-View-Sarsa-lambda-Algorithm\" class=\"headerlink\" title=\"Backward View Sarsa($\\lambda$) Algorithm\"></a>Backward View Sarsa($\\lambda$) Algorithm</h4><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g5scilvdj6j30i60aatbw.jpg\" alt=\"image\"></p><h3 id=\"Off-Policy-Learning\"><a href=\"#Off-Policy-Learning\" class=\"headerlink\" title=\"Off-Policy Learning\"></a>Off-Policy Learning</h3><ul><li>evaluate target policy $\\pi(a|s)$ to compute $v_\\pi(s)$ or $q_\\pi(s, a)$</li><li>While following behaviour policy $\\mu(a|s)$<script type=\"math/tex;mode=display\">\\{S_1, A_1, R_2, ..., S_T \\} ∼ \\mu</script></li></ul><h4 id=\"Importance-Sampling-for-off-policy-Monte-Carlo\"><a href=\"#Importance-Sampling-for-off-policy-Monte-Carlo\" class=\"headerlink\" title=\"Importance Sampling for off-policy Monte-Carlo\"></a>Importance Sampling for off-policy Monte-Carlo</h4><script type=\"math/tex;mode=display\">G_t^{\\pi/\\mu}=\\frac{\\pi(A_t|S_t)\\pi(A_{t+1}|S_{t+1})}{\\mu(A_t|S_t)\\mu(A_{t+1}|S_{t+1})}...\\frac{\\pi(A_T|S_T)}{\\mu(A_T|S_T)}G_t</script><script type=\"math/tex;mode=display\">V(S_t) \\leftarrow V(S_t) + \\alpha(G_t^{\\pi/\\mu}-V(S_t))</script><p>Importance sampling can dramatically increase variance</p><h4 id=\"Importance-Sampling-for-off-policy-TD\"><a href=\"#Importance-Sampling-for-off-policy-TD\" class=\"headerlink\" title=\"Importance Sampling for off-policy TD\"></a>Importance Sampling for off-policy TD</h4><script type=\"math/tex;mode=display\">V(S_t) \\leftarrow V(S_t) + \\alpha(\\frac{\\pi(A_t|S_t)}{\\mu(A_t|S_t)}(R_{t+1}+\\gamma V(S_{t+1})-V(S_t))</script><h4 id=\"Q-learning\"><a href=\"#Q-learning\" class=\"headerlink\" title=\"Q-learning\"></a>Q-learning</h4><ul><li>Next action is chosen using behavior policy $A_{t+1} \\sim \\mu(·|S_t) $</li><li>Consider Alternative successor action $A’ \\sim \\pi(·|S_t)$</li></ul><script type=\"math/tex;mode=display\">Q(S_t, A_t) \\leftarrow Q(S_t, A_r) + \\alpha(R_{t+1} + \\gamma Q(S_{t+1}, A') - Q(S_t, A_t))</script><h4 id=\"Off-policy-Q-learning\"><a href=\"#Off-policy-Q-learning\" class=\"headerlink\" title=\"Off-policy Q-learning\"></a>Off-policy Q-learning</h4><script type=\"math/tex;mode=display\">Q(S, A) \\leftarrow Q(S, A) + \\alpha(R + \\gamma \\max_a'Q(S', a') - Q(S, A))</script><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g5zcice89cj30j406lwgt.jpg\" alt></p><!-- rebuild by neat -->"},{"title":"LHY-ML-Week1","mathjax":true,"date":"2019-09-29T10:37:31.000Z","_content":"\n## 机器学习的介绍\n\n### 机器学习目标\n\n寻找一个通用函数，对于给定的数据，输出符合要求的数据。\n\n### Framework\n\n在一个函数集中，利用一系列的数据，找出最适合的函数。\n\n### Relation\n\n![2019-09-29 18-38-50 的屏幕截图.png](https://ww1.sinaimg.cn/large/006A69aEgy1g7gkoxn1fyj310b0qfh1w.jpg)\n\n#### Scenario\n\n机器学习根据使用场景不同可以分为监督学习，半监督学习, 迁移学习，无监督学习和强化学习。\n\n不同场景的区别在于数据的获取难度，不同的数据决定使用场景。\n\n* 监督学习中所有数据给定标签。\n* 半监督学习中部分数据给定标签。\n* 迁移学习中具有大量相似问题的数据。\n* 无监督学习中所有数据没有标签。\n* 强化学习中训练数据只有好坏的评估机制。\n\n#### Task\n\n在一个场景中根据输出的不同要求，分为回归任务，分类任务和结构化学习。\n\n* 回归任务输出的是连续性数据。\n* 分类任务输出的是离散性数据。\n* 结构化学习任务输出的是多样化的数据，如目标检测是需要同时输出目标所在位置和目标的类别。\n\n#### Method\n\n对于一个具体的任务，需要对数据进行拟合一个函数，根据该函数的不同可以分为线性模型和非线性模型，非线性模型又包括深度学习，支持向量机，决策树，K-近邻等。\n\n","source":"_posts/LHY-ML-Week1.md","raw":"---\ntitle: LHY-ML-Week1\nmathjax: true\ndate: 2019-09-29 18:37:31\ncategories: LHY-ML\ntags: ML\n---\n\n## 机器学习的介绍\n\n### 机器学习目标\n\n寻找一个通用函数，对于给定的数据，输出符合要求的数据。\n\n### Framework\n\n在一个函数集中，利用一系列的数据，找出最适合的函数。\n\n### Relation\n\n![2019-09-29 18-38-50 的屏幕截图.png](https://ww1.sinaimg.cn/large/006A69aEgy1g7gkoxn1fyj310b0qfh1w.jpg)\n\n#### Scenario\n\n机器学习根据使用场景不同可以分为监督学习，半监督学习, 迁移学习，无监督学习和强化学习。\n\n不同场景的区别在于数据的获取难度，不同的数据决定使用场景。\n\n* 监督学习中所有数据给定标签。\n* 半监督学习中部分数据给定标签。\n* 迁移学习中具有大量相似问题的数据。\n* 无监督学习中所有数据没有标签。\n* 强化学习中训练数据只有好坏的评估机制。\n\n#### Task\n\n在一个场景中根据输出的不同要求，分为回归任务，分类任务和结构化学习。\n\n* 回归任务输出的是连续性数据。\n* 分类任务输出的是离散性数据。\n* 结构化学习任务输出的是多样化的数据，如目标检测是需要同时输出目标所在位置和目标的类别。\n\n#### Method\n\n对于一个具体的任务，需要对数据进行拟合一个函数，根据该函数的不同可以分为线性模型和非线性模型，非线性模型又包括深度学习，支持向量机，决策树，K-近邻等。\n\n","slug":"LHY-ML-Week1","published":1,"updated":"2020-01-16T02:48:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5kuwy1p000qgz4d6i68g3ab","content":"<!-- build time:Sun Jan 19 2020 18:07:22 GMT+0800 (GMT+08:00) --><h2 id=\"机器学习的介绍\"><a href=\"#机器学习的介绍\" class=\"headerlink\" title=\"机器学习的介绍\"></a>机器学习的介绍</h2><h3 id=\"机器学习目标\"><a href=\"#机器学习目标\" class=\"headerlink\" title=\"机器学习目标\"></a>机器学习目标</h3><p>寻找一个通用函数，对于给定的数据，输出符合要求的数据。</p><h3 id=\"Framework\"><a href=\"#Framework\" class=\"headerlink\" title=\"Framework\"></a>Framework</h3><p>在一个函数集中，利用一系列的数据，找出最适合的函数。</p><h3 id=\"Relation\"><a href=\"#Relation\" class=\"headerlink\" title=\"Relation\"></a>Relation</h3><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1g7gkoxn1fyj310b0qfh1w.jpg\" alt=\"2019-09-29 18-38-50 的屏幕截图.png\"></p><h4 id=\"Scenario\"><a href=\"#Scenario\" class=\"headerlink\" title=\"Scenario\"></a>Scenario</h4><p>机器学习根据使用场景不同可以分为监督学习，半监督学习, 迁移学习，无监督学习和强化学习。</p><p>不同场景的区别在于数据的获取难度，不同的数据决定使用场景。</p><ul><li>监督学习中所有数据给定标签。</li><li>半监督学习中部分数据给定标签。</li><li>迁移学习中具有大量相似问题的数据。</li><li>无监督学习中所有数据没有标签。</li><li>强化学习中训练数据只有好坏的评估机制。</li></ul><h4 id=\"Task\"><a href=\"#Task\" class=\"headerlink\" title=\"Task\"></a>Task</h4><p>在一个场景中根据输出的不同要求，分为回归任务，分类任务和结构化学习。</p><ul><li>回归任务输出的是连续性数据。</li><li>分类任务输出的是离散性数据。</li><li>结构化学习任务输出的是多样化的数据，如目标检测是需要同时输出目标所在位置和目标的类别。</li></ul><h4 id=\"Method\"><a href=\"#Method\" class=\"headerlink\" title=\"Method\"></a>Method</h4><p>对于一个具体的任务，需要对数据进行拟合一个函数，根据该函数的不同可以分为线性模型和非线性模型，非线性模型又包括深度学习，支持向量机，决策树，K-近邻等。</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sun Jan 19 2020 18:07:22 GMT+0800 (GMT+08:00) --><h2 id=\"机器学习的介绍\"><a href=\"#机器学习的介绍\" class=\"headerlink\" title=\"机器学习的介绍\"></a>机器学习的介绍</h2><h3 id=\"机器学习目标\"><a href=\"#机器学习目标\" class=\"headerlink\" title=\"机器学习目标\"></a>机器学习目标</h3><p>寻找一个通用函数，对于给定的数据，输出符合要求的数据。</p><h3 id=\"Framework\"><a href=\"#Framework\" class=\"headerlink\" title=\"Framework\"></a>Framework</h3><p>在一个函数集中，利用一系列的数据，找出最适合的函数。</p><h3 id=\"Relation\"><a href=\"#Relation\" class=\"headerlink\" title=\"Relation\"></a>Relation</h3><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1g7gkoxn1fyj310b0qfh1w.jpg\" alt=\"2019-09-29 18-38-50 的屏幕截图.png\"></p><h4 id=\"Scenario\"><a href=\"#Scenario\" class=\"headerlink\" title=\"Scenario\"></a>Scenario</h4><p>机器学习根据使用场景不同可以分为监督学习，半监督学习, 迁移学习，无监督学习和强化学习。</p><p>不同场景的区别在于数据的获取难度，不同的数据决定使用场景。</p><ul><li>监督学习中所有数据给定标签。</li><li>半监督学习中部分数据给定标签。</li><li>迁移学习中具有大量相似问题的数据。</li><li>无监督学习中所有数据没有标签。</li><li>强化学习中训练数据只有好坏的评估机制。</li></ul><h4 id=\"Task\"><a href=\"#Task\" class=\"headerlink\" title=\"Task\"></a>Task</h4><p>在一个场景中根据输出的不同要求，分为回归任务，分类任务和结构化学习。</p><ul><li>回归任务输出的是连续性数据。</li><li>分类任务输出的是离散性数据。</li><li>结构化学习任务输出的是多样化的数据，如目标检测是需要同时输出目标所在位置和目标的类别。</li></ul><h4 id=\"Method\"><a href=\"#Method\" class=\"headerlink\" title=\"Method\"></a>Method</h4><p>对于一个具体的任务，需要对数据进行拟合一个函数，根据该函数的不同可以分为线性模型和非线性模型，非线性模型又包括深度学习，支持向量机，决策树，K-近邻等。</p><!-- rebuild by neat -->"},{"title":"CS294-005-策略梯度简介","mathjax":true,"date":"2019-09-18T13:24:53.000Z","_content":"\n### 直接策略梯度推导\n\n强化学习的目标为找出最优的策略，使得期望收益最大。\n$$\n\\theta^* = arg\\max_\\theta J(\\theta) = arg \\max_\\theta E_{\\tau\\sim p_\\theta(\\tau)}[r(\\tau)]\n$$\n对$J(\\theta)$进行求导可得\n$$\n\\begin{aligned}\n\\bigtriangledown_\\theta J(\\theta) &=\\bigtriangledown_\\theta  E_{\\tau\\sim p_\\theta(\\tau)}[r(\\tau)]\\\\\n&= \\bigtriangledown_\\theta\\int p_\\theta(\\tau)r(\\tau)d\\tau\\\\\n&=\\int \\bigtriangledown_\\theta p_\\theta(\\tau) r(\\tau)d\\tau \\\\\n&=\\int p_\\theta(\\tau)\\bigtriangledown_\\theta log\\,p_\\theta(\\tau) r(\\tau)d\\tau\\\\\n&= E_{\\tau\\sim p_\\theta(\\tau)}[\\bigtriangledown_\\theta log\\,p_\\theta(\\tau)r(\\tau)]\n\\end{aligned}\n$$\n由$p_\\theta(\\tau)$展开式可得\n$$\n\\begin{aligned}\np_\\theta(\\tau) &= p(s_1) \\prod_{t=1}^T \\pi_\\theta(a_t|s_t)p(s_{t+1}|s_t, a_t) \\\\\nlog\\,p_\\theta(\\tau) &= log \\,p(s_1) + \\sum_{t=1}^T log\\,\\pi_\\theta(a_t|s_t) + log\\,p(s_{t+1}|s_t,a_t)\\\\\n\\bigtriangledown_\\theta log\\,p_\\theta(\\tau) &=  \\sum_{t=1}^T \\bigtriangledown_\\theta log \\pi_\\theta(a_t|s_t)\n\\end{aligned}\n$$\n故化简后得到的$J(\\theta)$的梯度表达式为\n$$\n\\bigtriangledown_\\theta J(\\theta) = E_{\\tau\\sim p_\\theta(\\tau)}[(\\sum_{t=1}^T \\bigtriangledown_\\theta log\\,\\pi_\\theta(a_t|s_t))](\\sum_{t=1}^T r(s_t, a_t))\n$$\n根据采样值来逼近期望值可以得到\n$$\n\\bigtriangledown_\\theta J(\\theta) =\\frac{1}{N}\\sum_{i=1}^N[(\\sum_{t=1}^T \\bigtriangledown_\\theta log\\,\\pi_\\theta(a_t|s_t))](\\sum_{t=1}^T r(s_t, a_t))\n$$\n","source":"_posts/CS294-005-策略梯度简介.md","raw":"---\ntitle: CS294-005-策略梯度简介\nmathjax: true\ndate: 2019-09-18 21:24:53\ncategories: RL(CS294)\ntags: RL\n---\n\n### 直接策略梯度推导\n\n强化学习的目标为找出最优的策略，使得期望收益最大。\n$$\n\\theta^* = arg\\max_\\theta J(\\theta) = arg \\max_\\theta E_{\\tau\\sim p_\\theta(\\tau)}[r(\\tau)]\n$$\n对$J(\\theta)$进行求导可得\n$$\n\\begin{aligned}\n\\bigtriangledown_\\theta J(\\theta) &=\\bigtriangledown_\\theta  E_{\\tau\\sim p_\\theta(\\tau)}[r(\\tau)]\\\\\n&= \\bigtriangledown_\\theta\\int p_\\theta(\\tau)r(\\tau)d\\tau\\\\\n&=\\int \\bigtriangledown_\\theta p_\\theta(\\tau) r(\\tau)d\\tau \\\\\n&=\\int p_\\theta(\\tau)\\bigtriangledown_\\theta log\\,p_\\theta(\\tau) r(\\tau)d\\tau\\\\\n&= E_{\\tau\\sim p_\\theta(\\tau)}[\\bigtriangledown_\\theta log\\,p_\\theta(\\tau)r(\\tau)]\n\\end{aligned}\n$$\n由$p_\\theta(\\tau)$展开式可得\n$$\n\\begin{aligned}\np_\\theta(\\tau) &= p(s_1) \\prod_{t=1}^T \\pi_\\theta(a_t|s_t)p(s_{t+1}|s_t, a_t) \\\\\nlog\\,p_\\theta(\\tau) &= log \\,p(s_1) + \\sum_{t=1}^T log\\,\\pi_\\theta(a_t|s_t) + log\\,p(s_{t+1}|s_t,a_t)\\\\\n\\bigtriangledown_\\theta log\\,p_\\theta(\\tau) &=  \\sum_{t=1}^T \\bigtriangledown_\\theta log \\pi_\\theta(a_t|s_t)\n\\end{aligned}\n$$\n故化简后得到的$J(\\theta)$的梯度表达式为\n$$\n\\bigtriangledown_\\theta J(\\theta) = E_{\\tau\\sim p_\\theta(\\tau)}[(\\sum_{t=1}^T \\bigtriangledown_\\theta log\\,\\pi_\\theta(a_t|s_t))](\\sum_{t=1}^T r(s_t, a_t))\n$$\n根据采样值来逼近期望值可以得到\n$$\n\\bigtriangledown_\\theta J(\\theta) =\\frac{1}{N}\\sum_{i=1}^N[(\\sum_{t=1}^T \\bigtriangledown_\\theta log\\,\\pi_\\theta(a_t|s_t))](\\sum_{t=1}^T r(s_t, a_t))\n$$\n","slug":"CS294-005-策略梯度简介","published":1,"updated":"2020-01-16T02:48:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5kuwy1r000ugz4dpp80l6jf","content":"<!-- build time:Sun Jan 19 2020 18:07:22 GMT+0800 (GMT+08:00) --><h3 id=\"直接策略梯度推导\"><a href=\"#直接策略梯度推导\" class=\"headerlink\" title=\"直接策略梯度推导\"></a>直接策略梯度推导</h3><p>强化学习的目标为找出最优的策略，使得期望收益最大。</p><script type=\"math/tex;mode=display\">\\theta^* = arg\\max_\\theta J(\\theta) = arg \\max_\\theta E_{\\tau\\sim p_\\theta(\\tau)}[r(\\tau)]</script><p>对$J(\\theta)$进行求导可得</p><script type=\"math/tex;mode=display\">\\begin{aligned}\n\\bigtriangledown_\\theta J(\\theta) &=\\bigtriangledown_\\theta  E_{\\tau\\sim p_\\theta(\\tau)}[r(\\tau)]\\\\\n&= \\bigtriangledown_\\theta\\int p_\\theta(\\tau)r(\\tau)d\\tau\\\\\n&=\\int \\bigtriangledown_\\theta p_\\theta(\\tau) r(\\tau)d\\tau \\\\\n&=\\int p_\\theta(\\tau)\\bigtriangledown_\\theta log\\,p_\\theta(\\tau) r(\\tau)d\\tau\\\\\n&= E_{\\tau\\sim p_\\theta(\\tau)}[\\bigtriangledown_\\theta log\\,p_\\theta(\\tau)r(\\tau)]\n\\end{aligned}</script><p>由$p_\\theta(\\tau)$展开式可得</p><script type=\"math/tex;mode=display\">\\begin{aligned}\np_\\theta(\\tau) &= p(s_1) \\prod_{t=1}^T \\pi_\\theta(a_t|s_t)p(s_{t+1}|s_t, a_t) \\\\\nlog\\,p_\\theta(\\tau) &= log \\,p(s_1) + \\sum_{t=1}^T log\\,\\pi_\\theta(a_t|s_t) + log\\,p(s_{t+1}|s_t,a_t)\\\\\n\\bigtriangledown_\\theta log\\,p_\\theta(\\tau) &=  \\sum_{t=1}^T \\bigtriangledown_\\theta log \\pi_\\theta(a_t|s_t)\n\\end{aligned}</script><p>故化简后得到的$J(\\theta)$的梯度表达式为</p><script type=\"math/tex;mode=display\">\\bigtriangledown_\\theta J(\\theta) = E_{\\tau\\sim p_\\theta(\\tau)}[(\\sum_{t=1}^T \\bigtriangledown_\\theta log\\,\\pi_\\theta(a_t|s_t))](\\sum_{t=1}^T r(s_t, a_t))</script><p>根据采样值来逼近期望值可以得到</p><script type=\"math/tex;mode=display\">\\bigtriangledown_\\theta J(\\theta) =\\frac{1}{N}\\sum_{i=1}^N[(\\sum_{t=1}^T \\bigtriangledown_\\theta log\\,\\pi_\\theta(a_t|s_t))](\\sum_{t=1}^T r(s_t, a_t))</script><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sun Jan 19 2020 18:07:22 GMT+0800 (GMT+08:00) --><h3 id=\"直接策略梯度推导\"><a href=\"#直接策略梯度推导\" class=\"headerlink\" title=\"直接策略梯度推导\"></a>直接策略梯度推导</h3><p>强化学习的目标为找出最优的策略，使得期望收益最大。</p><script type=\"math/tex;mode=display\">\\theta^* = arg\\max_\\theta J(\\theta) = arg \\max_\\theta E_{\\tau\\sim p_\\theta(\\tau)}[r(\\tau)]</script><p>对$J(\\theta)$进行求导可得</p><script type=\"math/tex;mode=display\">\\begin{aligned}\n\\bigtriangledown_\\theta J(\\theta) &=\\bigtriangledown_\\theta  E_{\\tau\\sim p_\\theta(\\tau)}[r(\\tau)]\\\\\n&= \\bigtriangledown_\\theta\\int p_\\theta(\\tau)r(\\tau)d\\tau\\\\\n&=\\int \\bigtriangledown_\\theta p_\\theta(\\tau) r(\\tau)d\\tau \\\\\n&=\\int p_\\theta(\\tau)\\bigtriangledown_\\theta log\\,p_\\theta(\\tau) r(\\tau)d\\tau\\\\\n&= E_{\\tau\\sim p_\\theta(\\tau)}[\\bigtriangledown_\\theta log\\,p_\\theta(\\tau)r(\\tau)]\n\\end{aligned}</script><p>由$p_\\theta(\\tau)$展开式可得</p><script type=\"math/tex;mode=display\">\\begin{aligned}\np_\\theta(\\tau) &= p(s_1) \\prod_{t=1}^T \\pi_\\theta(a_t|s_t)p(s_{t+1}|s_t, a_t) \\\\\nlog\\,p_\\theta(\\tau) &= log \\,p(s_1) + \\sum_{t=1}^T log\\,\\pi_\\theta(a_t|s_t) + log\\,p(s_{t+1}|s_t,a_t)\\\\\n\\bigtriangledown_\\theta log\\,p_\\theta(\\tau) &=  \\sum_{t=1}^T \\bigtriangledown_\\theta log \\pi_\\theta(a_t|s_t)\n\\end{aligned}</script><p>故化简后得到的$J(\\theta)$的梯度表达式为</p><script type=\"math/tex;mode=display\">\\bigtriangledown_\\theta J(\\theta) = E_{\\tau\\sim p_\\theta(\\tau)}[(\\sum_{t=1}^T \\bigtriangledown_\\theta log\\,\\pi_\\theta(a_t|s_t))](\\sum_{t=1}^T r(s_t, a_t))</script><p>根据采样值来逼近期望值可以得到</p><script type=\"math/tex;mode=display\">\\bigtriangledown_\\theta J(\\theta) =\\frac{1}{N}\\sum_{i=1}^N[(\\sum_{t=1}^T \\bigtriangledown_\\theta log\\,\\pi_\\theta(a_t|s_t))](\\sum_{t=1}^T r(s_t, a_t))</script><!-- rebuild by neat -->"},{"title":"sarsa(λ)推导","mathjax":true,"date":"2019-09-04T09:13:36.000Z","_content":"\n在阅读David Silver中提到了 Forward View Sarsa(λ) 和 Backward View Sarsa(λ)， 下面对这两种方法之间的转化进行推导，并比较两者之间的关系。\n\n### Forward View Sarsa(λ)\n\n假设一个片段为\n$$\nS_t, A_t, R_{t+1}, S_{t+1},A_{t+1},R_{t+2},...,R_{T-1},S_{T-1},A_{T-1},R_{T},S_T\n$$\n在估计 $S_t, A_t$ 的价值时 Sarsa 采用的是\n$$\nR_{t+1} + \\gamma Q(S_{t+1},A_{t+1})\n$$\nn-step Sarsa采用的是\n$$\nq_t^{(n)} = R_{t+1} + \\gamma R_{t+2} + ... + \\gamma^{n-1}R_{t+n} + \\gamma^n Q(S_{t+n}, A_{t+n})\n$$\n对该片段展开得\n$$\n\\begin{aligned}\nq_t^{(1)} & = R_{t+1} + \\gamma Q(S_{t+1}, A_{t+1}) \\\\\nq_t^{(2)} & = R_{t+1} + \\gamma R_{t+2} + \\gamma^2 Q(S_{t+2}, A_{t+2}) \\\\\n...\\\\\nq_t^{(T-t -1)}&=R_{t+1} + \\gamma R_{t+2} + \\gamma^2 R_{t+3} + ... + \\gamma^{T-t-2}R_{T-1} +\\gamma^{T-t-1}Q(S_{T-1},A_{T-1}) \\\\\nq_t^{T-t} &=R_{t+1} + \\gamma R_{t+2} + \\gamma^2 R_{t+3}  + ... + \\gamma^{T-t-2}R_{T-1} + \\gamma^{T-t-1}R_T\n\\end{aligned}\n$$\n\nSarsa(λ) 对 所有的 $q_t^{n}$ 进行加权\n$$\nq_t^\\lambda = (1-\\lambda)q_t^{(1)} + (1-\\lambda)\\lambda q_t^{(2)} + (1-\\lambda)\\lambda^2 q_t^{(3)} + ... + (1-\\lambda)\\lambda^{T-t-2}q_t^{T-t-1} + \\lambda^{T-t-1}q_t^{T-t}\n$$\n\n对该片段，并合并同类项得\n$$\n\\begin{aligned}\nq_t^\\lambda = &[(1-\\lambda)(1 + \\lambda+\\lambda^2+...+\\lambda^{T-t-2} )+\\lambda^{T-t-1}] R_{t+1} + \\\\\n&[(1-\\lambda)(\\lambda + \\lambda^2 + ...+ \\lambda^{T-t-2}) + \\lambda^{T-t-1}]\\gamma R_{t+2} + \\\\\n& ...\\\\\n&[(1-\\lambda)(\\lambda^{T-t-2}) + \\lambda^{T-t-1}]\\gamma^{T-t-2}R_{T-1}  + \\\\\n&\\lambda^{T-t-1}\\gamma^{T-t-1}R_{T} +\\\\\n&(1-\\lambda)\\gamma Q(S_{t+1},A_{t+1}) + \\\\\n&(1-\\lambda)\\lambda\\gamma^2Q(S_{t+2}, A_{t+2}) + \\\\\n&... \\\\\n&(1-\\lambda)\\lambda^{T-t-2}\\gamma^{T-t-1}Q(S_{T-1}, A_{T-1})\n\n\\end{aligned}\n$$\n利用等比数列公式化简可得\n$$\n\\begin{aligned}\nq_t^\\lambda = &R_{t+1} + \\gamma Q(S_{t+1}, A_{t+1}) +\\\\\n&\\lambda\\gamma (R_{t+2} + \\gamma Q(S_{t+2}, A_{t+2} - Q(S_{t+1}, A_{t+1})) +\\\\\n&...\\\\\n& \\lambda^{T-t-2}\\gamma^{T-t-2}(R_{T-1}+\\gamma Q(S_{T-1}, A_{T-1}) -Q(S_{T-2}, A_{T-2}) +\\\\\n&\\lambda^{T-t-1}\\gamma^{T-t-1}R_{T}\n\\end{aligned}\n$$\n对于$S_t, A_t$ 的TD更新误差为\n$$\n\\delta_t = R_{t+1} + \\gamma Q(S_{t+1}, A_{t+1}) - Q(S_t, A_t)\n$$\n则对于$S_t, A_t$ 的 Sarsa(λ)的更新误差为\n$$\n\\begin{aligned}\n\\Delta_t &= q_t^\\lambda  - Q(S_t, A_t) \\\\\n&= \\delta_t + \\gamma\\lambda \\delta_{t+1} + ... + \\lambda^{T-t-2}\\gamma^{T-t-2}\\delta_{T-2} + \\gamma^{T-t-1}\\gamma^{T-t-1}\\delta_{T-1}\n\\end{aligned}\n$$\n\n### Backward View Sarsa(λ)\n\n从上述误差计算公式可以看出Forward View Sarsa(λ)不需要在计算完整个片段之后再计算，可以和TD一样，每计算完一次误差，对前面所有经过的状态的误差进行更新。\n\n对于每一个误差的权重，初始值为1，每经过一次，衰减$\\gamma\\lambda$，即Eligibility_trace的作用。\n\n![image](https://ww1.sinaimg.cn/large/006A69aEly1g5scilvdj6j30i60aatbw.jpg)\n\n### Backward View 和 Forward View 比较\n\n在off-line中，即优化的策略和选取下一个动作的策略是不同时，Backward View 和 Forward View是相同的。\n\n而在on-line中，两者有轻微的区别。因为对于前面到达的状态的估计值是不完全的，当且仅当整个片段完成后，对一个状态的更新才完成。若在片段中可能会使用不完全的估计值来选取下一个动作。\n\n当 λ = 0 时，则 Sarsa(λ) 和 TD 完全相同，Backward View 和 Forward View也完全相同。\n\n当 λ = 1时， 则 Forward View Sarsa(λ) 和 MC 相同。\n\n","source":"_posts/sarsa-λ-推导.md","raw":"---\ntitle: sarsa(λ)推导\nmathjax: true\ndate: 2019-09-04 17:13:36\ncategories:  \n    - RL(David Silver)\ntags:\n    - RL\n---\n\n在阅读David Silver中提到了 Forward View Sarsa(λ) 和 Backward View Sarsa(λ)， 下面对这两种方法之间的转化进行推导，并比较两者之间的关系。\n\n### Forward View Sarsa(λ)\n\n假设一个片段为\n$$\nS_t, A_t, R_{t+1}, S_{t+1},A_{t+1},R_{t+2},...,R_{T-1},S_{T-1},A_{T-1},R_{T},S_T\n$$\n在估计 $S_t, A_t$ 的价值时 Sarsa 采用的是\n$$\nR_{t+1} + \\gamma Q(S_{t+1},A_{t+1})\n$$\nn-step Sarsa采用的是\n$$\nq_t^{(n)} = R_{t+1} + \\gamma R_{t+2} + ... + \\gamma^{n-1}R_{t+n} + \\gamma^n Q(S_{t+n}, A_{t+n})\n$$\n对该片段展开得\n$$\n\\begin{aligned}\nq_t^{(1)} & = R_{t+1} + \\gamma Q(S_{t+1}, A_{t+1}) \\\\\nq_t^{(2)} & = R_{t+1} + \\gamma R_{t+2} + \\gamma^2 Q(S_{t+2}, A_{t+2}) \\\\\n...\\\\\nq_t^{(T-t -1)}&=R_{t+1} + \\gamma R_{t+2} + \\gamma^2 R_{t+3} + ... + \\gamma^{T-t-2}R_{T-1} +\\gamma^{T-t-1}Q(S_{T-1},A_{T-1}) \\\\\nq_t^{T-t} &=R_{t+1} + \\gamma R_{t+2} + \\gamma^2 R_{t+3}  + ... + \\gamma^{T-t-2}R_{T-1} + \\gamma^{T-t-1}R_T\n\\end{aligned}\n$$\n\nSarsa(λ) 对 所有的 $q_t^{n}$ 进行加权\n$$\nq_t^\\lambda = (1-\\lambda)q_t^{(1)} + (1-\\lambda)\\lambda q_t^{(2)} + (1-\\lambda)\\lambda^2 q_t^{(3)} + ... + (1-\\lambda)\\lambda^{T-t-2}q_t^{T-t-1} + \\lambda^{T-t-1}q_t^{T-t}\n$$\n\n对该片段，并合并同类项得\n$$\n\\begin{aligned}\nq_t^\\lambda = &[(1-\\lambda)(1 + \\lambda+\\lambda^2+...+\\lambda^{T-t-2} )+\\lambda^{T-t-1}] R_{t+1} + \\\\\n&[(1-\\lambda)(\\lambda + \\lambda^2 + ...+ \\lambda^{T-t-2}) + \\lambda^{T-t-1}]\\gamma R_{t+2} + \\\\\n& ...\\\\\n&[(1-\\lambda)(\\lambda^{T-t-2}) + \\lambda^{T-t-1}]\\gamma^{T-t-2}R_{T-1}  + \\\\\n&\\lambda^{T-t-1}\\gamma^{T-t-1}R_{T} +\\\\\n&(1-\\lambda)\\gamma Q(S_{t+1},A_{t+1}) + \\\\\n&(1-\\lambda)\\lambda\\gamma^2Q(S_{t+2}, A_{t+2}) + \\\\\n&... \\\\\n&(1-\\lambda)\\lambda^{T-t-2}\\gamma^{T-t-1}Q(S_{T-1}, A_{T-1})\n\n\\end{aligned}\n$$\n利用等比数列公式化简可得\n$$\n\\begin{aligned}\nq_t^\\lambda = &R_{t+1} + \\gamma Q(S_{t+1}, A_{t+1}) +\\\\\n&\\lambda\\gamma (R_{t+2} + \\gamma Q(S_{t+2}, A_{t+2} - Q(S_{t+1}, A_{t+1})) +\\\\\n&...\\\\\n& \\lambda^{T-t-2}\\gamma^{T-t-2}(R_{T-1}+\\gamma Q(S_{T-1}, A_{T-1}) -Q(S_{T-2}, A_{T-2}) +\\\\\n&\\lambda^{T-t-1}\\gamma^{T-t-1}R_{T}\n\\end{aligned}\n$$\n对于$S_t, A_t$ 的TD更新误差为\n$$\n\\delta_t = R_{t+1} + \\gamma Q(S_{t+1}, A_{t+1}) - Q(S_t, A_t)\n$$\n则对于$S_t, A_t$ 的 Sarsa(λ)的更新误差为\n$$\n\\begin{aligned}\n\\Delta_t &= q_t^\\lambda  - Q(S_t, A_t) \\\\\n&= \\delta_t + \\gamma\\lambda \\delta_{t+1} + ... + \\lambda^{T-t-2}\\gamma^{T-t-2}\\delta_{T-2} + \\gamma^{T-t-1}\\gamma^{T-t-1}\\delta_{T-1}\n\\end{aligned}\n$$\n\n### Backward View Sarsa(λ)\n\n从上述误差计算公式可以看出Forward View Sarsa(λ)不需要在计算完整个片段之后再计算，可以和TD一样，每计算完一次误差，对前面所有经过的状态的误差进行更新。\n\n对于每一个误差的权重，初始值为1，每经过一次，衰减$\\gamma\\lambda$，即Eligibility_trace的作用。\n\n![image](https://ww1.sinaimg.cn/large/006A69aEly1g5scilvdj6j30i60aatbw.jpg)\n\n### Backward View 和 Forward View 比较\n\n在off-line中，即优化的策略和选取下一个动作的策略是不同时，Backward View 和 Forward View是相同的。\n\n而在on-line中，两者有轻微的区别。因为对于前面到达的状态的估计值是不完全的，当且仅当整个片段完成后，对一个状态的更新才完成。若在片段中可能会使用不完全的估计值来选取下一个动作。\n\n当 λ = 0 时，则 Sarsa(λ) 和 TD 完全相同，Backward View 和 Forward View也完全相同。\n\n当 λ = 1时， 则 Forward View Sarsa(λ) 和 MC 相同。\n\n","slug":"sarsa-λ-推导","published":1,"updated":"2020-01-16T02:48:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5kuwy1s000ygz4dgp19d6mj","content":"<!-- build time:Sun Jan 19 2020 18:07:22 GMT+0800 (GMT+08:00) --><p>在阅读David Silver中提到了 Forward View Sarsa(λ) 和 Backward View Sarsa(λ)， 下面对这两种方法之间的转化进行推导，并比较两者之间的关系。</p><h3 id=\"Forward-View-Sarsa-λ\"><a href=\"#Forward-View-Sarsa-λ\" class=\"headerlink\" title=\"Forward View Sarsa(λ)\"></a>Forward View Sarsa(λ)</h3><p>假设一个片段为</p><script type=\"math/tex;mode=display\">S_t, A_t, R_{t+1}, S_{t+1},A_{t+1},R_{t+2},...,R_{T-1},S_{T-1},A_{T-1},R_{T},S_T</script><p>在估计 $S_t, A_t$ 的价值时 Sarsa 采用的是</p><script type=\"math/tex;mode=display\">R_{t+1} + \\gamma Q(S_{t+1},A_{t+1})</script><p>n-step Sarsa采用的是</p><script type=\"math/tex;mode=display\">q_t^{(n)} = R_{t+1} + \\gamma R_{t+2} + ... + \\gamma^{n-1}R_{t+n} + \\gamma^n Q(S_{t+n}, A_{t+n})</script><p>对该片段展开得</p><script type=\"math/tex;mode=display\">\\begin{aligned}\nq_t^{(1)} & = R_{t+1} + \\gamma Q(S_{t+1}, A_{t+1}) \\\\\nq_t^{(2)} & = R_{t+1} + \\gamma R_{t+2} + \\gamma^2 Q(S_{t+2}, A_{t+2}) \\\\\n...\\\\\nq_t^{(T-t -1)}&=R_{t+1} + \\gamma R_{t+2} + \\gamma^2 R_{t+3} + ... + \\gamma^{T-t-2}R_{T-1} +\\gamma^{T-t-1}Q(S_{T-1},A_{T-1}) \\\\\nq_t^{T-t} &=R_{t+1} + \\gamma R_{t+2} + \\gamma^2 R_{t+3}  + ... + \\gamma^{T-t-2}R_{T-1} + \\gamma^{T-t-1}R_T\n\\end{aligned}</script><p>Sarsa(λ) 对 所有的 $q_t^{n}$ 进行加权</p><script type=\"math/tex;mode=display\">q_t^\\lambda = (1-\\lambda)q_t^{(1)} + (1-\\lambda)\\lambda q_t^{(2)} + (1-\\lambda)\\lambda^2 q_t^{(3)} + ... + (1-\\lambda)\\lambda^{T-t-2}q_t^{T-t-1} + \\lambda^{T-t-1}q_t^{T-t}</script><p>对该片段，并合并同类项得</p><script type=\"math/tex;mode=display\">\\begin{aligned}\nq_t^\\lambda = &[(1-\\lambda)(1 + \\lambda+\\lambda^2+...+\\lambda^{T-t-2} )+\\lambda^{T-t-1}] R_{t+1} + \\\\\n&[(1-\\lambda)(\\lambda + \\lambda^2 + ...+ \\lambda^{T-t-2}) + \\lambda^{T-t-1}]\\gamma R_{t+2} + \\\\\n& ...\\\\\n&[(1-\\lambda)(\\lambda^{T-t-2}) + \\lambda^{T-t-1}]\\gamma^{T-t-2}R_{T-1}  + \\\\\n&\\lambda^{T-t-1}\\gamma^{T-t-1}R_{T} +\\\\\n&(1-\\lambda)\\gamma Q(S_{t+1},A_{t+1}) + \\\\\n&(1-\\lambda)\\lambda\\gamma^2Q(S_{t+2}, A_{t+2}) + \\\\\n&... \\\\\n&(1-\\lambda)\\lambda^{T-t-2}\\gamma^{T-t-1}Q(S_{T-1}, A_{T-1})\n\n\\end{aligned}</script><p>利用等比数列公式化简可得</p><script type=\"math/tex;mode=display\">\\begin{aligned}\nq_t^\\lambda = &R_{t+1} + \\gamma Q(S_{t+1}, A_{t+1}) +\\\\\n&\\lambda\\gamma (R_{t+2} + \\gamma Q(S_{t+2}, A_{t+2} - Q(S_{t+1}, A_{t+1})) +\\\\\n&...\\\\\n& \\lambda^{T-t-2}\\gamma^{T-t-2}(R_{T-1}+\\gamma Q(S_{T-1}, A_{T-1}) -Q(S_{T-2}, A_{T-2}) +\\\\\n&\\lambda^{T-t-1}\\gamma^{T-t-1}R_{T}\n\\end{aligned}</script><p>对于$S_t, A_t$ 的TD更新误差为</p><script type=\"math/tex;mode=display\">\\delta_t = R_{t+1} + \\gamma Q(S_{t+1}, A_{t+1}) - Q(S_t, A_t)</script><p>则对于$S_t, A_t$ 的 Sarsa(λ)的更新误差为</p><script type=\"math/tex;mode=display\">\\begin{aligned}\n\\Delta_t &= q_t^\\lambda  - Q(S_t, A_t) \\\\\n&= \\delta_t + \\gamma\\lambda \\delta_{t+1} + ... + \\lambda^{T-t-2}\\gamma^{T-t-2}\\delta_{T-2} + \\gamma^{T-t-1}\\gamma^{T-t-1}\\delta_{T-1}\n\\end{aligned}</script><h3 id=\"Backward-View-Sarsa-λ\"><a href=\"#Backward-View-Sarsa-λ\" class=\"headerlink\" title=\"Backward View Sarsa(λ)\"></a>Backward View Sarsa(λ)</h3><p>从上述误差计算公式可以看出Forward View Sarsa(λ)不需要在计算完整个片段之后再计算，可以和TD一样，每计算完一次误差，对前面所有经过的状态的误差进行更新。</p><p>对于每一个误差的权重，初始值为1，每经过一次，衰减$\\gamma\\lambda$，即Eligibility_trace的作用。</p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g5scilvdj6j30i60aatbw.jpg\" alt=\"image\"></p><h3 id=\"Backward-View-和-Forward-View-比较\"><a href=\"#Backward-View-和-Forward-View-比较\" class=\"headerlink\" title=\"Backward View 和 Forward View 比较\"></a>Backward View 和 Forward View 比较</h3><p>在off-line中，即优化的策略和选取下一个动作的策略是不同时，Backward View 和 Forward View是相同的。</p><p>而在on-line中，两者有轻微的区别。因为对于前面到达的状态的估计值是不完全的，当且仅当整个片段完成后，对一个状态的更新才完成。若在片段中可能会使用不完全的估计值来选取下一个动作。</p><p>当 λ = 0 时，则 Sarsa(λ) 和 TD 完全相同，Backward View 和 Forward View也完全相同。</p><p>当 λ = 1时， 则 Forward View Sarsa(λ) 和 MC 相同。</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sun Jan 19 2020 18:07:22 GMT+0800 (GMT+08:00) --><p>在阅读David Silver中提到了 Forward View Sarsa(λ) 和 Backward View Sarsa(λ)， 下面对这两种方法之间的转化进行推导，并比较两者之间的关系。</p><h3 id=\"Forward-View-Sarsa-λ\"><a href=\"#Forward-View-Sarsa-λ\" class=\"headerlink\" title=\"Forward View Sarsa(λ)\"></a>Forward View Sarsa(λ)</h3><p>假设一个片段为</p><script type=\"math/tex;mode=display\">S_t, A_t, R_{t+1}, S_{t+1},A_{t+1},R_{t+2},...,R_{T-1},S_{T-1},A_{T-1},R_{T},S_T</script><p>在估计 $S_t, A_t$ 的价值时 Sarsa 采用的是</p><script type=\"math/tex;mode=display\">R_{t+1} + \\gamma Q(S_{t+1},A_{t+1})</script><p>n-step Sarsa采用的是</p><script type=\"math/tex;mode=display\">q_t^{(n)} = R_{t+1} + \\gamma R_{t+2} + ... + \\gamma^{n-1}R_{t+n} + \\gamma^n Q(S_{t+n}, A_{t+n})</script><p>对该片段展开得</p><script type=\"math/tex;mode=display\">\\begin{aligned}\nq_t^{(1)} & = R_{t+1} + \\gamma Q(S_{t+1}, A_{t+1}) \\\\\nq_t^{(2)} & = R_{t+1} + \\gamma R_{t+2} + \\gamma^2 Q(S_{t+2}, A_{t+2}) \\\\\n...\\\\\nq_t^{(T-t -1)}&=R_{t+1} + \\gamma R_{t+2} + \\gamma^2 R_{t+3} + ... + \\gamma^{T-t-2}R_{T-1} +\\gamma^{T-t-1}Q(S_{T-1},A_{T-1}) \\\\\nq_t^{T-t} &=R_{t+1} + \\gamma R_{t+2} + \\gamma^2 R_{t+3}  + ... + \\gamma^{T-t-2}R_{T-1} + \\gamma^{T-t-1}R_T\n\\end{aligned}</script><p>Sarsa(λ) 对 所有的 $q_t^{n}$ 进行加权</p><script type=\"math/tex;mode=display\">q_t^\\lambda = (1-\\lambda)q_t^{(1)} + (1-\\lambda)\\lambda q_t^{(2)} + (1-\\lambda)\\lambda^2 q_t^{(3)} + ... + (1-\\lambda)\\lambda^{T-t-2}q_t^{T-t-1} + \\lambda^{T-t-1}q_t^{T-t}</script><p>对该片段，并合并同类项得</p><script type=\"math/tex;mode=display\">\\begin{aligned}\nq_t^\\lambda = &[(1-\\lambda)(1 + \\lambda+\\lambda^2+...+\\lambda^{T-t-2} )+\\lambda^{T-t-1}] R_{t+1} + \\\\\n&[(1-\\lambda)(\\lambda + \\lambda^2 + ...+ \\lambda^{T-t-2}) + \\lambda^{T-t-1}]\\gamma R_{t+2} + \\\\\n& ...\\\\\n&[(1-\\lambda)(\\lambda^{T-t-2}) + \\lambda^{T-t-1}]\\gamma^{T-t-2}R_{T-1}  + \\\\\n&\\lambda^{T-t-1}\\gamma^{T-t-1}R_{T} +\\\\\n&(1-\\lambda)\\gamma Q(S_{t+1},A_{t+1}) + \\\\\n&(1-\\lambda)\\lambda\\gamma^2Q(S_{t+2}, A_{t+2}) + \\\\\n&... \\\\\n&(1-\\lambda)\\lambda^{T-t-2}\\gamma^{T-t-1}Q(S_{T-1}, A_{T-1})\n\n\\end{aligned}</script><p>利用等比数列公式化简可得</p><script type=\"math/tex;mode=display\">\\begin{aligned}\nq_t^\\lambda = &R_{t+1} + \\gamma Q(S_{t+1}, A_{t+1}) +\\\\\n&\\lambda\\gamma (R_{t+2} + \\gamma Q(S_{t+2}, A_{t+2} - Q(S_{t+1}, A_{t+1})) +\\\\\n&...\\\\\n& \\lambda^{T-t-2}\\gamma^{T-t-2}(R_{T-1}+\\gamma Q(S_{T-1}, A_{T-1}) -Q(S_{T-2}, A_{T-2}) +\\\\\n&\\lambda^{T-t-1}\\gamma^{T-t-1}R_{T}\n\\end{aligned}</script><p>对于$S_t, A_t$ 的TD更新误差为</p><script type=\"math/tex;mode=display\">\\delta_t = R_{t+1} + \\gamma Q(S_{t+1}, A_{t+1}) - Q(S_t, A_t)</script><p>则对于$S_t, A_t$ 的 Sarsa(λ)的更新误差为</p><script type=\"math/tex;mode=display\">\\begin{aligned}\n\\Delta_t &= q_t^\\lambda  - Q(S_t, A_t) \\\\\n&= \\delta_t + \\gamma\\lambda \\delta_{t+1} + ... + \\lambda^{T-t-2}\\gamma^{T-t-2}\\delta_{T-2} + \\gamma^{T-t-1}\\gamma^{T-t-1}\\delta_{T-1}\n\\end{aligned}</script><h3 id=\"Backward-View-Sarsa-λ\"><a href=\"#Backward-View-Sarsa-λ\" class=\"headerlink\" title=\"Backward View Sarsa(λ)\"></a>Backward View Sarsa(λ)</h3><p>从上述误差计算公式可以看出Forward View Sarsa(λ)不需要在计算完整个片段之后再计算，可以和TD一样，每计算完一次误差，对前面所有经过的状态的误差进行更新。</p><p>对于每一个误差的权重，初始值为1，每经过一次，衰减$\\gamma\\lambda$，即Eligibility_trace的作用。</p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g5scilvdj6j30i60aatbw.jpg\" alt=\"image\"></p><h3 id=\"Backward-View-和-Forward-View-比较\"><a href=\"#Backward-View-和-Forward-View-比较\" class=\"headerlink\" title=\"Backward View 和 Forward View 比较\"></a>Backward View 和 Forward View 比较</h3><p>在off-line中，即优化的策略和选取下一个动作的策略是不同时，Backward View 和 Forward View是相同的。</p><p>而在on-line中，两者有轻微的区别。因为对于前面到达的状态的估计值是不完全的，当且仅当整个片段完成后，对一个状态的更新才完成。若在片段中可能会使用不完全的估计值来选取下一个动作。</p><p>当 λ = 0 时，则 Sarsa(λ) 和 TD 完全相同，Backward View 和 Forward View也完全相同。</p><p>当 λ = 1时， 则 Forward View Sarsa(λ) 和 MC 相同。</p><!-- rebuild by neat -->"},{"title":"服务器搭建jupyter notebook","mathjax":true,"date":"2020-01-18T09:00:05.000Z","_content":"\n### anaconda 创建环境并激活\n\n```bash\nconda create -n envName python=3.7\nconda activate envName\n```\n\n### 生成密码\n\n```bash\njupyter notebook password\n```\n\n输入两次密码后，加密值保存在 .jupyter/jupyter_notebook_config.json\n\n### 修改配置文件\n\n```bash\nvim ~/.jupyter/jupyter_notebook_config.json\n```\n\n修改为\n\n```bash\n{\n  \"NotebookApp\": {\n    \"password\": \"sha1: ***\",\n    \"ip\": \" Server IP\",\n    \"open_browser\": false,\n    \"port\": 9000\n  }\n}\n```\n\n### 后台运行jupyter\n\n在终端中输入\n\n```\nnohup jupyter notebook >/tmp/tmp.file 2>&1 &\n```\n\n- nohup 表示将任务挂起\n- 最后的& 表示在后台运行，只加该符号而不加nohup，任务会在终端关闭后停止\n- 2>&1 表示将错误输出流写入到标准输出流。\n- \\>/tmp/tmp.file 表示将标准输出流写入到文件\n\n可以在浏览器通过服务器IP+端口号进行访问。\n\n### 添加anaconda内核\n\n```bash\nconda install ipykernel \npython -m ipykernel install --user --name envName --display-name \"envName\"\n```\n\n### Reference\n\n<https://jupyter-notebook.readthedocs.io/en/latest/public_server.html#notebook-server-security>\n\n<https://www.cnblogs.com/yinzm/p/7881328.html>\n\n","source":"_posts/服务器搭建jupyter-notebook.md","raw":"---\ntitle: 服务器搭建jupyter notebook\nmathjax: true\ndate: 2020-01-18 17:00:05\ncategories: \n\t- server\ntags:\n---\n\n### anaconda 创建环境并激活\n\n```bash\nconda create -n envName python=3.7\nconda activate envName\n```\n\n### 生成密码\n\n```bash\njupyter notebook password\n```\n\n输入两次密码后，加密值保存在 .jupyter/jupyter_notebook_config.json\n\n### 修改配置文件\n\n```bash\nvim ~/.jupyter/jupyter_notebook_config.json\n```\n\n修改为\n\n```bash\n{\n  \"NotebookApp\": {\n    \"password\": \"sha1: ***\",\n    \"ip\": \" Server IP\",\n    \"open_browser\": false,\n    \"port\": 9000\n  }\n}\n```\n\n### 后台运行jupyter\n\n在终端中输入\n\n```\nnohup jupyter notebook >/tmp/tmp.file 2>&1 &\n```\n\n- nohup 表示将任务挂起\n- 最后的& 表示在后台运行，只加该符号而不加nohup，任务会在终端关闭后停止\n- 2>&1 表示将错误输出流写入到标准输出流。\n- \\>/tmp/tmp.file 表示将标准输出流写入到文件\n\n可以在浏览器通过服务器IP+端口号进行访问。\n\n### 添加anaconda内核\n\n```bash\nconda install ipykernel \npython -m ipykernel install --user --name envName --display-name \"envName\"\n```\n\n### Reference\n\n<https://jupyter-notebook.readthedocs.io/en/latest/public_server.html#notebook-server-security>\n\n<https://www.cnblogs.com/yinzm/p/7881328.html>\n\n","slug":"服务器搭建jupyter-notebook","published":1,"updated":"2020-01-18T09:01:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5kuwy1t0012gz4d8yyyvmsy","content":"<!-- build time:Sun Jan 19 2020 18:07:22 GMT+0800 (GMT+08:00) --><h3 id=\"anaconda-创建环境并激活\"><a href=\"#anaconda-创建环境并激活\" class=\"headerlink\" title=\"anaconda 创建环境并激活\"></a>anaconda 创建环境并激活</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n envName python=3.7</span><br><span class=\"line\">conda activate envName</span><br></pre></td></tr></table></figure><h3 id=\"生成密码\"><a href=\"#生成密码\" class=\"headerlink\" title=\"生成密码\"></a>生成密码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jupyter notebook password</span><br></pre></td></tr></table></figure><p>输入两次密码后，加密值保存在 .jupyter/jupyter_notebook_config.json</p><h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.jupyter/jupyter_notebook_config.json</span><br></pre></td></tr></table></figure><p>修改为</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"NotebookApp\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"password\"</span>: <span class=\"string\">\"sha1: ***\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"ip\"</span>: <span class=\"string\">\" Server IP\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"open_browser\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">\"port\"</span>: 9000</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"后台运行jupyter\"><a href=\"#后台运行jupyter\" class=\"headerlink\" title=\"后台运行jupyter\"></a>后台运行jupyter</h3><p>在终端中输入</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup jupyter notebook &gt;/tmp/tmp.file 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><ul><li>nohup 表示将任务挂起</li><li>最后的&amp; 表示在后台运行，只加该符号而不加nohup，任务会在终端关闭后停止</li><li>2&gt;&amp;1 表示将错误输出流写入到标准输出流。</li><li>>/tmp/tmp.file 表示将标准输出流写入到文件</li></ul><p>可以在浏览器通过服务器IP+端口号进行访问。</p><h3 id=\"添加anaconda内核\"><a href=\"#添加anaconda内核\" class=\"headerlink\" title=\"添加anaconda内核\"></a>添加anaconda内核</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install ipykernel </span><br><span class=\"line\">python -m ipykernel install --user --name envName --display-name <span class=\"string\">\"envName\"</span></span><br></pre></td></tr></table></figure><h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><p><a href=\"https://jupyter-notebook.readthedocs.io/en/latest/public_server.html#notebook-server-security\" target=\"_blank\" rel=\"noopener\">https://jupyter-notebook.readthedocs.io/en/latest/public_server.html#notebook-server-security</a></p><p><a href=\"https://www.cnblogs.com/yinzm/p/7881328.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/yinzm/p/7881328.html</a></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sun Jan 19 2020 18:07:22 GMT+0800 (GMT+08:00) --><h3 id=\"anaconda-创建环境并激活\"><a href=\"#anaconda-创建环境并激活\" class=\"headerlink\" title=\"anaconda 创建环境并激活\"></a>anaconda 创建环境并激活</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n envName python=3.7</span><br><span class=\"line\">conda activate envName</span><br></pre></td></tr></table></figure><h3 id=\"生成密码\"><a href=\"#生成密码\" class=\"headerlink\" title=\"生成密码\"></a>生成密码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jupyter notebook password</span><br></pre></td></tr></table></figure><p>输入两次密码后，加密值保存在 .jupyter/jupyter_notebook_config.json</p><h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.jupyter/jupyter_notebook_config.json</span><br></pre></td></tr></table></figure><p>修改为</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"NotebookApp\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"password\"</span>: <span class=\"string\">\"sha1: ***\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"ip\"</span>: <span class=\"string\">\" Server IP\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"open_browser\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">\"port\"</span>: 9000</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"后台运行jupyter\"><a href=\"#后台运行jupyter\" class=\"headerlink\" title=\"后台运行jupyter\"></a>后台运行jupyter</h3><p>在终端中输入</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup jupyter notebook &gt;/tmp/tmp.file 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><ul><li>nohup 表示将任务挂起</li><li>最后的&amp; 表示在后台运行，只加该符号而不加nohup，任务会在终端关闭后停止</li><li>2&gt;&amp;1 表示将错误输出流写入到标准输出流。</li><li>>/tmp/tmp.file 表示将标准输出流写入到文件</li></ul><p>可以在浏览器通过服务器IP+端口号进行访问。</p><h3 id=\"添加anaconda内核\"><a href=\"#添加anaconda内核\" class=\"headerlink\" title=\"添加anaconda内核\"></a>添加anaconda内核</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install ipykernel </span><br><span class=\"line\">python -m ipykernel install --user --name envName --display-name <span class=\"string\">\"envName\"</span></span><br></pre></td></tr></table></figure><h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><p><a href=\"https://jupyter-notebook.readthedocs.io/en/latest/public_server.html#notebook-server-security\" target=\"_blank\" rel=\"noopener\">https://jupyter-notebook.readthedocs.io/en/latest/public_server.html#notebook-server-security</a></p><p><a href=\"https://www.cnblogs.com/yinzm/p/7881328.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/yinzm/p/7881328.html</a></p><!-- rebuild by neat -->"},{"title":"服务器搭建zerotier以通过外网访问，并在VPS搭建moon节点加速连接","mathjax":true,"date":"2020-01-18T09:13:01.000Z","_content":"\n## Zerotier\n\nZerotier利用服务器创建了一个虚拟局域网，所有连接到虚拟局域网的服务器被分配到了一个IP，利用这个IP即可进行点对点的访问。利用Zerotier，即可在没用公网IP的情况下，在外网访问服务器。\n\n### 注册Zerotier并创建虚拟局域网\n\n[Zerotier官网地址](https://xuhang.ink/2019/12/05/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BAzerotier%E4%BB%A5%E9%80%9A%E8%BF%87%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE%EF%BC%8C%E5%B9%B6%E5%9C%A8VPS%E6%90%AD%E5%BB%BAmoon%E8%8A%82%E7%82%B9%E5%8A%A0%E9%80%9F%E8%BF%9E%E6%8E%A5/my.zerotier.com)，利用邮箱注册用户并登录。\n\n在Networks选项页中单击 “Create a Network”，即可在下方看到创建成功的网络，并会产生1个16位唯一代表这个网络，之后在加入网络时需要用到这个ID。\n\n在网络的设置中有一项Access Control，为了安全起见，设置为PRIVATE，任何加入网络的节点，需要允许才可以访问。\n\n### Ubuntu 配置 Zerotier\n\n#### 安装 Zerotier\n\n> curl -s <https://install.zerotier.com/> | sudo bash\n\n#### 加入虚拟局域网\n\n> sudo zerotier-cli join (network id)\n\n在加入虚拟网后，可以在Zerotier的网络设置页面的Member项中看到连接信息，在左侧打钩以允许访问，其中Managed IPs即为分配到的虚拟局域网中的内网IP。\n\n#### 查看虚拟局域网情况\n\n> sudo zerotier-cli listpeers\n\n其中Leaf是每一个连接节点，Planet是官方设置的转发根服务器，Moon为用户设置的转发服务器。\n\n### VPS 搭建 Moon服务器加速连接\n\n官方设置的转发根服务器速度较慢且不稳定，可以搭建自己的Moon转发服务器来加速访问。\n\n首先需要注册一个VPS，阿里云的服务器或者其他都可以。\n\n#### 安装Zerotier并加入虚拟局域网\n\n与之前相同，输入命令在VPS上安装Zerotier并加入虚拟局域网，然后在配置页面中通过。\n\n#### 生成moon模板\n\n> cd /var/lib/zerotier-one\n> zerotier-idtool initmoon identity.public > moon.json\n\n#### **修改moon.json**\n\n编辑 moon.json，将 stableEndpoints 改为 “服务器IP/9993”\n\n> “stableEndpoints”: [ “x.x.x.x/9993” ]\n\n#### 生成签名文件\n\n> zerotier-idtool genmoon moon.json\n\n之后可以看到生成了 000000xxxx.moon 文件。\n\n#### 创建moon网络\n\n在当前目录下创建 moons.d文件，并将 .moon文件拷贝进去\n\n> mkdir moons.d\n>\n> cp *.moon moons.d\n\n#### 重启服务器\n\n### 本机加入moon节点\n\n在 Zerotier 配置页面中可以看到VPS对应的 10位 Address ID。\n\n在终端中输入\n\n> sudo zerotier-cli orbit (VPSid) (VPSid)\n\n在等待一段时间后，再次查看局域网情况，即可看到增加一条，ID为VPS的ID，最后为 Moon\n\n### 连接远程服务器\n\n远程服务器的配置和本机相同，配置完后利用生成的IP即可进行连接。\n\n> curl -s <https://install.zerotier.com/> | sudo bash\n>\n> sudo zerotier-cli join (network id)\n>\n> sudo zerotier-cli orbit (VPSid) (VPSid)\n\n## Reference\n\n[在vps上搭建Zerotier的Moon节点](https://www.lingbaoboy.com/2019/03/vpszerotiermoon.html)\n\n[无公网IP通过ZeroTier方便实现内网穿透](https://blog.whsir.com/post-3685.html)","source":"_posts/服务器搭建zerotier以通过外网访问，并在VPS搭建moon节点加速连接.md","raw":"---\ntitle: 服务器搭建zerotier以通过外网访问，并在VPS搭建moon节点加速连接\nmathjax: true\ndate: 2020-01-18 17:13:01\ncategories:\n\t- Server\ntags:\n\t- Server\n---\n\n## Zerotier\n\nZerotier利用服务器创建了一个虚拟局域网，所有连接到虚拟局域网的服务器被分配到了一个IP，利用这个IP即可进行点对点的访问。利用Zerotier，即可在没用公网IP的情况下，在外网访问服务器。\n\n### 注册Zerotier并创建虚拟局域网\n\n[Zerotier官网地址](https://xuhang.ink/2019/12/05/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BAzerotier%E4%BB%A5%E9%80%9A%E8%BF%87%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE%EF%BC%8C%E5%B9%B6%E5%9C%A8VPS%E6%90%AD%E5%BB%BAmoon%E8%8A%82%E7%82%B9%E5%8A%A0%E9%80%9F%E8%BF%9E%E6%8E%A5/my.zerotier.com)，利用邮箱注册用户并登录。\n\n在Networks选项页中单击 “Create a Network”，即可在下方看到创建成功的网络，并会产生1个16位唯一代表这个网络，之后在加入网络时需要用到这个ID。\n\n在网络的设置中有一项Access Control，为了安全起见，设置为PRIVATE，任何加入网络的节点，需要允许才可以访问。\n\n### Ubuntu 配置 Zerotier\n\n#### 安装 Zerotier\n\n> curl -s <https://install.zerotier.com/> | sudo bash\n\n#### 加入虚拟局域网\n\n> sudo zerotier-cli join (network id)\n\n在加入虚拟网后，可以在Zerotier的网络设置页面的Member项中看到连接信息，在左侧打钩以允许访问，其中Managed IPs即为分配到的虚拟局域网中的内网IP。\n\n#### 查看虚拟局域网情况\n\n> sudo zerotier-cli listpeers\n\n其中Leaf是每一个连接节点，Planet是官方设置的转发根服务器，Moon为用户设置的转发服务器。\n\n### VPS 搭建 Moon服务器加速连接\n\n官方设置的转发根服务器速度较慢且不稳定，可以搭建自己的Moon转发服务器来加速访问。\n\n首先需要注册一个VPS，阿里云的服务器或者其他都可以。\n\n#### 安装Zerotier并加入虚拟局域网\n\n与之前相同，输入命令在VPS上安装Zerotier并加入虚拟局域网，然后在配置页面中通过。\n\n#### 生成moon模板\n\n> cd /var/lib/zerotier-one\n> zerotier-idtool initmoon identity.public > moon.json\n\n#### **修改moon.json**\n\n编辑 moon.json，将 stableEndpoints 改为 “服务器IP/9993”\n\n> “stableEndpoints”: [ “x.x.x.x/9993” ]\n\n#### 生成签名文件\n\n> zerotier-idtool genmoon moon.json\n\n之后可以看到生成了 000000xxxx.moon 文件。\n\n#### 创建moon网络\n\n在当前目录下创建 moons.d文件，并将 .moon文件拷贝进去\n\n> mkdir moons.d\n>\n> cp *.moon moons.d\n\n#### 重启服务器\n\n### 本机加入moon节点\n\n在 Zerotier 配置页面中可以看到VPS对应的 10位 Address ID。\n\n在终端中输入\n\n> sudo zerotier-cli orbit (VPSid) (VPSid)\n\n在等待一段时间后，再次查看局域网情况，即可看到增加一条，ID为VPS的ID，最后为 Moon\n\n### 连接远程服务器\n\n远程服务器的配置和本机相同，配置完后利用生成的IP即可进行连接。\n\n> curl -s <https://install.zerotier.com/> | sudo bash\n>\n> sudo zerotier-cli join (network id)\n>\n> sudo zerotier-cli orbit (VPSid) (VPSid)\n\n## Reference\n\n[在vps上搭建Zerotier的Moon节点](https://www.lingbaoboy.com/2019/03/vpszerotiermoon.html)\n\n[无公网IP通过ZeroTier方便实现内网穿透](https://blog.whsir.com/post-3685.html)","slug":"服务器搭建zerotier以通过外网访问，并在VPS搭建moon节点加速连接","published":1,"updated":"2020-01-18T09:13:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5kuwy1u0015gz4ddu9eebiu","content":"<!-- build time:Sun Jan 19 2020 18:07:22 GMT+0800 (GMT+08:00) --><h2 id=\"Zerotier\"><a href=\"#Zerotier\" class=\"headerlink\" title=\"Zerotier\"></a>Zerotier</h2><p>Zerotier利用服务器创建了一个虚拟局域网，所有连接到虚拟局域网的服务器被分配到了一个IP，利用这个IP即可进行点对点的访问。利用Zerotier，即可在没用公网IP的情况下，在外网访问服务器。</p><h3 id=\"注册Zerotier并创建虚拟局域网\"><a href=\"#注册Zerotier并创建虚拟局域网\" class=\"headerlink\" title=\"注册Zerotier并创建虚拟局域网\"></a>注册Zerotier并创建虚拟局域网</h3><p><a href=\"https://xuhang.ink/2019/12/05/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BAzerotier%E4%BB%A5%E9%80%9A%E8%BF%87%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE%EF%BC%8C%E5%B9%B6%E5%9C%A8VPS%E6%90%AD%E5%BB%BAmoon%E8%8A%82%E7%82%B9%E5%8A%A0%E9%80%9F%E8%BF%9E%E6%8E%A5/my.zerotier.com\" target=\"_blank\" rel=\"noopener\">Zerotier官网地址</a>，利用邮箱注册用户并登录。</p><p>在Networks选项页中单击 “Create a Network”，即可在下方看到创建成功的网络，并会产生1个16位唯一代表这个网络，之后在加入网络时需要用到这个ID。</p><p>在网络的设置中有一项Access Control，为了安全起见，设置为PRIVATE，任何加入网络的节点，需要允许才可以访问。</p><h3 id=\"Ubuntu-配置-Zerotier\"><a href=\"#Ubuntu-配置-Zerotier\" class=\"headerlink\" title=\"Ubuntu 配置 Zerotier\"></a>Ubuntu 配置 Zerotier</h3><h4 id=\"安装-Zerotier\"><a href=\"#安装-Zerotier\" class=\"headerlink\" title=\"安装 Zerotier\"></a>安装 Zerotier</h4><blockquote><p>curl -s <a href=\"https://install.zerotier.com/\" target=\"_blank\" rel=\"noopener\">https://install.zerotier.com/</a> | sudo bash</p></blockquote><h4 id=\"加入虚拟局域网\"><a href=\"#加入虚拟局域网\" class=\"headerlink\" title=\"加入虚拟局域网\"></a>加入虚拟局域网</h4><blockquote><p>sudo zerotier-cli join (network id)</p></blockquote><p>在加入虚拟网后，可以在Zerotier的网络设置页面的Member项中看到连接信息，在左侧打钩以允许访问，其中Managed IPs即为分配到的虚拟局域网中的内网IP。</p><h4 id=\"查看虚拟局域网情况\"><a href=\"#查看虚拟局域网情况\" class=\"headerlink\" title=\"查看虚拟局域网情况\"></a>查看虚拟局域网情况</h4><blockquote><p>sudo zerotier-cli listpeers</p></blockquote><p>其中Leaf是每一个连接节点，Planet是官方设置的转发根服务器，Moon为用户设置的转发服务器。</p><h3 id=\"VPS-搭建-Moon服务器加速连接\"><a href=\"#VPS-搭建-Moon服务器加速连接\" class=\"headerlink\" title=\"VPS 搭建 Moon服务器加速连接\"></a>VPS 搭建 Moon服务器加速连接</h3><p>官方设置的转发根服务器速度较慢且不稳定，可以搭建自己的Moon转发服务器来加速访问。</p><p>首先需要注册一个VPS，阿里云的服务器或者其他都可以。</p><h4 id=\"安装Zerotier并加入虚拟局域网\"><a href=\"#安装Zerotier并加入虚拟局域网\" class=\"headerlink\" title=\"安装Zerotier并加入虚拟局域网\"></a>安装Zerotier并加入虚拟局域网</h4><p>与之前相同，输入命令在VPS上安装Zerotier并加入虚拟局域网，然后在配置页面中通过。</p><h4 id=\"生成moon模板\"><a href=\"#生成moon模板\" class=\"headerlink\" title=\"生成moon模板\"></a>生成moon模板</h4><blockquote><p>cd /var/lib/zerotier-one<br>zerotier-idtool initmoon identity.public &gt; moon.json</p></blockquote><h4 id=\"修改moon-json\"><a href=\"#修改moon-json\" class=\"headerlink\" title=\"修改moon.json\"></a><strong>修改moon.json</strong></h4><p>编辑 moon.json，将 stableEndpoints 改为 “服务器IP/9993”</p><blockquote><p>“stableEndpoints”: [ “x.x.x.x/9993” ]</p></blockquote><h4 id=\"生成签名文件\"><a href=\"#生成签名文件\" class=\"headerlink\" title=\"生成签名文件\"></a>生成签名文件</h4><blockquote><p>zerotier-idtool genmoon moon.json</p></blockquote><p>之后可以看到生成了 000000xxxx.moon 文件。</p><h4 id=\"创建moon网络\"><a href=\"#创建moon网络\" class=\"headerlink\" title=\"创建moon网络\"></a>创建moon网络</h4><p>在当前目录下创建 moons.d文件，并将 .moon文件拷贝进去</p><blockquote><p>mkdir moons.d</p><p>cp *.moon moons.d</p></blockquote><h4 id=\"重启服务器\"><a href=\"#重启服务器\" class=\"headerlink\" title=\"重启服务器\"></a>重启服务器</h4><h3 id=\"本机加入moon节点\"><a href=\"#本机加入moon节点\" class=\"headerlink\" title=\"本机加入moon节点\"></a>本机加入moon节点</h3><p>在 Zerotier 配置页面中可以看到VPS对应的 10位 Address ID。</p><p>在终端中输入</p><blockquote><p>sudo zerotier-cli orbit (VPSid) (VPSid)</p></blockquote><p>在等待一段时间后，再次查看局域网情况，即可看到增加一条，ID为VPS的ID，最后为 Moon</p><h3 id=\"连接远程服务器\"><a href=\"#连接远程服务器\" class=\"headerlink\" title=\"连接远程服务器\"></a>连接远程服务器</h3><p>远程服务器的配置和本机相同，配置完后利用生成的IP即可进行连接。</p><blockquote><p>curl -s <a href=\"https://install.zerotier.com/\" target=\"_blank\" rel=\"noopener\">https://install.zerotier.com/</a> | sudo bash</p><p>sudo zerotier-cli join (network id)</p><p>sudo zerotier-cli orbit (VPSid) (VPSid)</p></blockquote><h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://www.lingbaoboy.com/2019/03/vpszerotiermoon.html\" target=\"_blank\" rel=\"noopener\">在vps上搭建Zerotier的Moon节点</a></p><p><a href=\"https://blog.whsir.com/post-3685.html\" target=\"_blank\" rel=\"noopener\">无公网IP通过ZeroTier方便实现内网穿透</a></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sun Jan 19 2020 18:07:22 GMT+0800 (GMT+08:00) --><h2 id=\"Zerotier\"><a href=\"#Zerotier\" class=\"headerlink\" title=\"Zerotier\"></a>Zerotier</h2><p>Zerotier利用服务器创建了一个虚拟局域网，所有连接到虚拟局域网的服务器被分配到了一个IP，利用这个IP即可进行点对点的访问。利用Zerotier，即可在没用公网IP的情况下，在外网访问服务器。</p><h3 id=\"注册Zerotier并创建虚拟局域网\"><a href=\"#注册Zerotier并创建虚拟局域网\" class=\"headerlink\" title=\"注册Zerotier并创建虚拟局域网\"></a>注册Zerotier并创建虚拟局域网</h3><p><a href=\"https://xuhang.ink/2019/12/05/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BAzerotier%E4%BB%A5%E9%80%9A%E8%BF%87%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE%EF%BC%8C%E5%B9%B6%E5%9C%A8VPS%E6%90%AD%E5%BB%BAmoon%E8%8A%82%E7%82%B9%E5%8A%A0%E9%80%9F%E8%BF%9E%E6%8E%A5/my.zerotier.com\" target=\"_blank\" rel=\"noopener\">Zerotier官网地址</a>，利用邮箱注册用户并登录。</p><p>在Networks选项页中单击 “Create a Network”，即可在下方看到创建成功的网络，并会产生1个16位唯一代表这个网络，之后在加入网络时需要用到这个ID。</p><p>在网络的设置中有一项Access Control，为了安全起见，设置为PRIVATE，任何加入网络的节点，需要允许才可以访问。</p><h3 id=\"Ubuntu-配置-Zerotier\"><a href=\"#Ubuntu-配置-Zerotier\" class=\"headerlink\" title=\"Ubuntu 配置 Zerotier\"></a>Ubuntu 配置 Zerotier</h3><h4 id=\"安装-Zerotier\"><a href=\"#安装-Zerotier\" class=\"headerlink\" title=\"安装 Zerotier\"></a>安装 Zerotier</h4><blockquote><p>curl -s <a href=\"https://install.zerotier.com/\" target=\"_blank\" rel=\"noopener\">https://install.zerotier.com/</a> | sudo bash</p></blockquote><h4 id=\"加入虚拟局域网\"><a href=\"#加入虚拟局域网\" class=\"headerlink\" title=\"加入虚拟局域网\"></a>加入虚拟局域网</h4><blockquote><p>sudo zerotier-cli join (network id)</p></blockquote><p>在加入虚拟网后，可以在Zerotier的网络设置页面的Member项中看到连接信息，在左侧打钩以允许访问，其中Managed IPs即为分配到的虚拟局域网中的内网IP。</p><h4 id=\"查看虚拟局域网情况\"><a href=\"#查看虚拟局域网情况\" class=\"headerlink\" title=\"查看虚拟局域网情况\"></a>查看虚拟局域网情况</h4><blockquote><p>sudo zerotier-cli listpeers</p></blockquote><p>其中Leaf是每一个连接节点，Planet是官方设置的转发根服务器，Moon为用户设置的转发服务器。</p><h3 id=\"VPS-搭建-Moon服务器加速连接\"><a href=\"#VPS-搭建-Moon服务器加速连接\" class=\"headerlink\" title=\"VPS 搭建 Moon服务器加速连接\"></a>VPS 搭建 Moon服务器加速连接</h3><p>官方设置的转发根服务器速度较慢且不稳定，可以搭建自己的Moon转发服务器来加速访问。</p><p>首先需要注册一个VPS，阿里云的服务器或者其他都可以。</p><h4 id=\"安装Zerotier并加入虚拟局域网\"><a href=\"#安装Zerotier并加入虚拟局域网\" class=\"headerlink\" title=\"安装Zerotier并加入虚拟局域网\"></a>安装Zerotier并加入虚拟局域网</h4><p>与之前相同，输入命令在VPS上安装Zerotier并加入虚拟局域网，然后在配置页面中通过。</p><h4 id=\"生成moon模板\"><a href=\"#生成moon模板\" class=\"headerlink\" title=\"生成moon模板\"></a>生成moon模板</h4><blockquote><p>cd /var/lib/zerotier-one<br>zerotier-idtool initmoon identity.public &gt; moon.json</p></blockquote><h4 id=\"修改moon-json\"><a href=\"#修改moon-json\" class=\"headerlink\" title=\"修改moon.json\"></a><strong>修改moon.json</strong></h4><p>编辑 moon.json，将 stableEndpoints 改为 “服务器IP/9993”</p><blockquote><p>“stableEndpoints”: [ “x.x.x.x/9993” ]</p></blockquote><h4 id=\"生成签名文件\"><a href=\"#生成签名文件\" class=\"headerlink\" title=\"生成签名文件\"></a>生成签名文件</h4><blockquote><p>zerotier-idtool genmoon moon.json</p></blockquote><p>之后可以看到生成了 000000xxxx.moon 文件。</p><h4 id=\"创建moon网络\"><a href=\"#创建moon网络\" class=\"headerlink\" title=\"创建moon网络\"></a>创建moon网络</h4><p>在当前目录下创建 moons.d文件，并将 .moon文件拷贝进去</p><blockquote><p>mkdir moons.d</p><p>cp *.moon moons.d</p></blockquote><h4 id=\"重启服务器\"><a href=\"#重启服务器\" class=\"headerlink\" title=\"重启服务器\"></a>重启服务器</h4><h3 id=\"本机加入moon节点\"><a href=\"#本机加入moon节点\" class=\"headerlink\" title=\"本机加入moon节点\"></a>本机加入moon节点</h3><p>在 Zerotier 配置页面中可以看到VPS对应的 10位 Address ID。</p><p>在终端中输入</p><blockquote><p>sudo zerotier-cli orbit (VPSid) (VPSid)</p></blockquote><p>在等待一段时间后，再次查看局域网情况，即可看到增加一条，ID为VPS的ID，最后为 Moon</p><h3 id=\"连接远程服务器\"><a href=\"#连接远程服务器\" class=\"headerlink\" title=\"连接远程服务器\"></a>连接远程服务器</h3><p>远程服务器的配置和本机相同，配置完后利用生成的IP即可进行连接。</p><blockquote><p>curl -s <a href=\"https://install.zerotier.com/\" target=\"_blank\" rel=\"noopener\">https://install.zerotier.com/</a> | sudo bash</p><p>sudo zerotier-cli join (network id)</p><p>sudo zerotier-cli orbit (VPSid) (VPSid)</p></blockquote><h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://www.lingbaoboy.com/2019/03/vpszerotiermoon.html\" target=\"_blank\" rel=\"noopener\">在vps上搭建Zerotier的Moon节点</a></p><p><a href=\"https://blog.whsir.com/post-3685.html\" target=\"_blank\" rel=\"noopener\">无公网IP通过ZeroTier方便实现内网穿透</a></p><!-- rebuild by neat -->"},{"title":"[论文阅读]Monte Carlo Sampling for Regret Minimization in Extensive Games","mathjax":true,"date":"2019-10-19T11:37:56.000Z","_content":"\n| 标题 | Monte Carlo Sampling for Regret Minimization in Extensive Games |\n| ---- | ------------------------------------------------------------ |\n| 团队 | Alberta、CMU、Yahoo                                          |\n| 时间 | 2009                                                         |\n| 出处 | nips                                                         |\n\n## Introduction\n\nCFR算法通过最小化反事实后悔值来最小化总后悔值，使得平均策略收敛于纳什均衡。当时的CFR算法具有以下缺点:\n\n* 多数实现针对卡牌游戏进行优化，对发牌进行抽样，这是一种不通用的方法。\n* CFR在迭代时需要已知对手的策略，使得该方法不适用于在线学习。\n\n该论文提出了基于采样的CFR算法，使用给出了通用形式，又详细介绍了两种方法: 结果采样(采样每一个对局)和外采样(采样对手和机会节点的动作)。基于采样的CFR算法在期望上与原CFR相同，但是方差较大，通过最小化后悔值的界限体现出来。结果采样中对手的策略被抵消掉，所以可以用于在线学习，结果采样的总迭代时间减少了。\n\n## 蒙特卡洛CFR\n\n### 通用方法\n\n基于采样的CFR的基本思路是将所有叶子节点划分若干块，每次以某种概率采样某一块，计算该块内的所有叶子节点对其到根路径上的节点的贡献，对于计算的贡献值为原有的方法除以选取该块的概率，从而保证在期望上是相同的。\n\n将所有叶子节点划分为若干个集合 $Q = \\{ Q_1, ..., Q_r\\} $, 选取某个集合的概率为$q_j$, 保证 $\\sum_{j=1}^{r} q_j = 1$， 所有集合的并覆盖叶子节点。\n\n定义一个叶子节点在每一次迭代中被选取的概率$q(z) = \\sum_{j:z\\in Q_j}$, 使用求和符号的意思时一个叶子节点可能被划分在多个集合中，一般来说都不会重复划分叶子节点。\n\n在提出了CFR的论文中，CFR的定义为\n$$\nv(\\sigma, I) = \\sum_{h\\in I, z\\in Z}\\pi^\\sigma_{-i}(h)\\pi^\\sigma(h, z)u_i(z)\n$$\n\n将该定义转化为直接枚举每个叶子节点，则可以确定其对应的$h$节点, 定义为 $z[I]$，则CFR的定义可以表示为\n$$\nv(\\sigma, I) = \\sum_{z\\in Z_I}\\pi^\\sigma_{-i}(z[I])\\pi^\\sigma(z[I], z)u_i(z)\n$$\n在一次采样中，每个节点的采样反事实价值为\n\n$$\n\\tilde{v} _i (\\sigma, I | j) = \\sum_{z\\in Q_j \\cap Z_I} \\frac{1}{q(z)}u_i(z)\\pi^\\sigma_{-i}(z[I])\\pi^\\sigma(z[I], z)\n$$\n\n在多次采样下， 采样反事实后悔值的期望值与反事实后悔值相同。\n\n同样地，可以定义每个节点采取某个动作的立即反事实后悔值。\n$$\n\\tilde{r}(I, a) = \\tilde{v} _i (\\sigma^t_{(I\\rightarrow a)}, I) - \\tilde{v}_i(\\sigma^t, I)\n$$\n\n### 结果采样CFR\n\n结果采样CFR中对于每一条到叶子节点的路径，对应于一个子集合，即每个子集合包含的节点数量为1，选取子集合的概率为这条路径上所有策略的乘积。即对于一个策略组合$\\sigma^\\prime$ , $q(z) = \\pi^{\\sigma^\\prime}(z)$。\n\n则对于该叶子节点，计算其对路径上每一个节点的所有动作的立即反事实后悔值的贡献。\n\n$$\nr(I, a) =\\left\\{\n\\begin{aligned}\nw_I *(1 - \\sigma(a | z[I])) && if (z[I]a) \\in z \\\\\n-w_I *\\sigma(a|z[I])&&otherwise\n\\end{aligned}\n\\;\\;\\;where \\;w_I = \\frac{u_i(z)\\pi^\\sigma_{-i}(z)\\pi_i^\\sigma(z[i]a, z)}{\\pi^{\\sigma^\\prime}(z)}\n\\right.\n$$\n\n如果叶子节点的采样概率与对手的策略相同，则可以把$\\pi_{-i}^\\sigma(z)$抵消掉，此时式子的计算不再依赖于对手的概率，所以该算法可以推广为在线学习算法。\n\n### 外采样CFR\n\n外采样CFR对于对手策略和机会策略进行采样，即对于一个策略组合$\\sigma ^ \\prime$, $q(z) = \\pi^{\\sigma^\\prime(z)}_{-i}$。实际每次计算中，对于博弈树进行遍历，遇到对手策略或机会策略节点，根据实际策略采样一个动作，选择这个动作的边向下遍历，遇到自己策略的节点时，则选择所有动作的边向下遍历。则实际遍历到的是整颗博弈树的一颗子树，该棵子树中包含多个block，一个block中的所有叶子节点的 $\\pi_{-i}$ 值相同。\n\n则对于每个叶子节点，同样计算对所有自己决策节点的每一个动作的贡献。\n\n$$\n\\sum_{z\\in Q \\cap Z_I} u_i(z) (\\pi_i^\\sigma(z[I]a, z) - \\pi_i^\\sigma(z[I], z))\n$$\n\n其中 $q(z)$ 与 $\\pi_{-i}(z[I])$ 和 $\\pi_{-i}(z[I], z)$ 进行抵消。 \n\n## 实验结果\n\n在四个游戏中进行实验。\n\n* Goofspiel. 玩家每人拥有 1-K 十三张牌，公共牌也为1-K十三张牌，每次亮出一张公共牌，每个玩家出一张自己的牌进行竞标，牌最大者获胜，拥有公共牌对应的分数，然后每个玩家弃掉竞标的牌，13轮后拥有最多分数玩家获胜。实际实验中使用变形，每个玩家不知道竞标的牌的大小。\n* One-Card Poker，每人从牌堆中抽一张牌，加价或不加价一轮，比牌大小。实际实验中牌堆大小为500.\n* Princess and Monster， 在一个黑暗空间中怪兽和公主进行移动，当两者的距离小于一定范围时公主被抓住。实际实验中在3*3地图中随机初始位置，逃离者的收益为没有被抓住的步数。\n* Latent Tic-Tac-Toe，井字棋变形，每一步双方选择下一步棋的位置，棋子的显示延迟一回合，即当对方下完下一步棋后，才能看到我方当前回合下的棋，如果下棋发生冲突则算输。\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEly1g86pqegxi1j30ux08fdhh.jpg)\n\n采用四种算法进行评估。\n\n* 朴素CFR。\n* 带剪枝的CFR。当某个节点按照策略选取的概率为0时，不再搜索该棵子树。\n* 结果CFR。增加随机选取节点。以 $\\epsilon$ 概率随机采样， $1 - \\epsilon$ 概率按照策略采样，结果发现 $\\epsilon = 0.6$ 时较优。\n* 外部采样。\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEgy1g86pxxk6uvj30w80nwgqh.jpg)\n\n横坐标为搜索时遍历节点数，不采用迭代次数的原因时不同算法的每次迭代时间不一样，纵坐标为计算策略的可利用性。\n\n实验结果分析: \n\n* MCCFR变体的性能显著由于朴素CFR。\n* 剪枝对于CFR性能的体现较明显，在后期每次迭代遍历到的节点数大大减小。\n* 外部采样在三个游戏中优于结果采样，算法的性能可能和游戏的特性有关。\n\n## 结论\n\n定义了基于采样的CFR算法，并提出了两种采样模式，外采样(每次迭代采样一条路径)，外部采样(每次采样对手的chance的一个固定策略)。对与朴素CFR提出了更紧密的边界，也对两种采样方法提出了边界。\n\n未来工作:\n\n* 检验游戏特性对算法的影响。\n* 外采样在在线学习中的应用。\n* 采用不完全回忆来抽象动作。\n\n","source":"_posts/论文阅读-Monte-Carlo-Sampling-for-Regret-Minimization-in-Extensive-Games.md","raw":"---\ntitle: '[论文阅读]Monte Carlo Sampling for Regret Minimization in Extensive Games'\nmathjax: true\ndate: 2019-10-19 19:37:56\ncategories: Paper\ntags: \n    - RL\n    - Paper\n    - CFR\n---\n\n| 标题 | Monte Carlo Sampling for Regret Minimization in Extensive Games |\n| ---- | ------------------------------------------------------------ |\n| 团队 | Alberta、CMU、Yahoo                                          |\n| 时间 | 2009                                                         |\n| 出处 | nips                                                         |\n\n## Introduction\n\nCFR算法通过最小化反事实后悔值来最小化总后悔值，使得平均策略收敛于纳什均衡。当时的CFR算法具有以下缺点:\n\n* 多数实现针对卡牌游戏进行优化，对发牌进行抽样，这是一种不通用的方法。\n* CFR在迭代时需要已知对手的策略，使得该方法不适用于在线学习。\n\n该论文提出了基于采样的CFR算法，使用给出了通用形式，又详细介绍了两种方法: 结果采样(采样每一个对局)和外采样(采样对手和机会节点的动作)。基于采样的CFR算法在期望上与原CFR相同，但是方差较大，通过最小化后悔值的界限体现出来。结果采样中对手的策略被抵消掉，所以可以用于在线学习，结果采样的总迭代时间减少了。\n\n## 蒙特卡洛CFR\n\n### 通用方法\n\n基于采样的CFR的基本思路是将所有叶子节点划分若干块，每次以某种概率采样某一块，计算该块内的所有叶子节点对其到根路径上的节点的贡献，对于计算的贡献值为原有的方法除以选取该块的概率，从而保证在期望上是相同的。\n\n将所有叶子节点划分为若干个集合 $Q = \\{ Q_1, ..., Q_r\\} $, 选取某个集合的概率为$q_j$, 保证 $\\sum_{j=1}^{r} q_j = 1$， 所有集合的并覆盖叶子节点。\n\n定义一个叶子节点在每一次迭代中被选取的概率$q(z) = \\sum_{j:z\\in Q_j}$, 使用求和符号的意思时一个叶子节点可能被划分在多个集合中，一般来说都不会重复划分叶子节点。\n\n在提出了CFR的论文中，CFR的定义为\n$$\nv(\\sigma, I) = \\sum_{h\\in I, z\\in Z}\\pi^\\sigma_{-i}(h)\\pi^\\sigma(h, z)u_i(z)\n$$\n\n将该定义转化为直接枚举每个叶子节点，则可以确定其对应的$h$节点, 定义为 $z[I]$，则CFR的定义可以表示为\n$$\nv(\\sigma, I) = \\sum_{z\\in Z_I}\\pi^\\sigma_{-i}(z[I])\\pi^\\sigma(z[I], z)u_i(z)\n$$\n在一次采样中，每个节点的采样反事实价值为\n\n$$\n\\tilde{v} _i (\\sigma, I | j) = \\sum_{z\\in Q_j \\cap Z_I} \\frac{1}{q(z)}u_i(z)\\pi^\\sigma_{-i}(z[I])\\pi^\\sigma(z[I], z)\n$$\n\n在多次采样下， 采样反事实后悔值的期望值与反事实后悔值相同。\n\n同样地，可以定义每个节点采取某个动作的立即反事实后悔值。\n$$\n\\tilde{r}(I, a) = \\tilde{v} _i (\\sigma^t_{(I\\rightarrow a)}, I) - \\tilde{v}_i(\\sigma^t, I)\n$$\n\n### 结果采样CFR\n\n结果采样CFR中对于每一条到叶子节点的路径，对应于一个子集合，即每个子集合包含的节点数量为1，选取子集合的概率为这条路径上所有策略的乘积。即对于一个策略组合$\\sigma^\\prime$ , $q(z) = \\pi^{\\sigma^\\prime}(z)$。\n\n则对于该叶子节点，计算其对路径上每一个节点的所有动作的立即反事实后悔值的贡献。\n\n$$\nr(I, a) =\\left\\{\n\\begin{aligned}\nw_I *(1 - \\sigma(a | z[I])) && if (z[I]a) \\in z \\\\\n-w_I *\\sigma(a|z[I])&&otherwise\n\\end{aligned}\n\\;\\;\\;where \\;w_I = \\frac{u_i(z)\\pi^\\sigma_{-i}(z)\\pi_i^\\sigma(z[i]a, z)}{\\pi^{\\sigma^\\prime}(z)}\n\\right.\n$$\n\n如果叶子节点的采样概率与对手的策略相同，则可以把$\\pi_{-i}^\\sigma(z)$抵消掉，此时式子的计算不再依赖于对手的概率，所以该算法可以推广为在线学习算法。\n\n### 外采样CFR\n\n外采样CFR对于对手策略和机会策略进行采样，即对于一个策略组合$\\sigma ^ \\prime$, $q(z) = \\pi^{\\sigma^\\prime(z)}_{-i}$。实际每次计算中，对于博弈树进行遍历，遇到对手策略或机会策略节点，根据实际策略采样一个动作，选择这个动作的边向下遍历，遇到自己策略的节点时，则选择所有动作的边向下遍历。则实际遍历到的是整颗博弈树的一颗子树，该棵子树中包含多个block，一个block中的所有叶子节点的 $\\pi_{-i}$ 值相同。\n\n则对于每个叶子节点，同样计算对所有自己决策节点的每一个动作的贡献。\n\n$$\n\\sum_{z\\in Q \\cap Z_I} u_i(z) (\\pi_i^\\sigma(z[I]a, z) - \\pi_i^\\sigma(z[I], z))\n$$\n\n其中 $q(z)$ 与 $\\pi_{-i}(z[I])$ 和 $\\pi_{-i}(z[I], z)$ 进行抵消。 \n\n## 实验结果\n\n在四个游戏中进行实验。\n\n* Goofspiel. 玩家每人拥有 1-K 十三张牌，公共牌也为1-K十三张牌，每次亮出一张公共牌，每个玩家出一张自己的牌进行竞标，牌最大者获胜，拥有公共牌对应的分数，然后每个玩家弃掉竞标的牌，13轮后拥有最多分数玩家获胜。实际实验中使用变形，每个玩家不知道竞标的牌的大小。\n* One-Card Poker，每人从牌堆中抽一张牌，加价或不加价一轮，比牌大小。实际实验中牌堆大小为500.\n* Princess and Monster， 在一个黑暗空间中怪兽和公主进行移动，当两者的距离小于一定范围时公主被抓住。实际实验中在3*3地图中随机初始位置，逃离者的收益为没有被抓住的步数。\n* Latent Tic-Tac-Toe，井字棋变形，每一步双方选择下一步棋的位置，棋子的显示延迟一回合，即当对方下完下一步棋后，才能看到我方当前回合下的棋，如果下棋发生冲突则算输。\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEly1g86pqegxi1j30ux08fdhh.jpg)\n\n采用四种算法进行评估。\n\n* 朴素CFR。\n* 带剪枝的CFR。当某个节点按照策略选取的概率为0时，不再搜索该棵子树。\n* 结果CFR。增加随机选取节点。以 $\\epsilon$ 概率随机采样， $1 - \\epsilon$ 概率按照策略采样，结果发现 $\\epsilon = 0.6$ 时较优。\n* 外部采样。\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEgy1g86pxxk6uvj30w80nwgqh.jpg)\n\n横坐标为搜索时遍历节点数，不采用迭代次数的原因时不同算法的每次迭代时间不一样，纵坐标为计算策略的可利用性。\n\n实验结果分析: \n\n* MCCFR变体的性能显著由于朴素CFR。\n* 剪枝对于CFR性能的体现较明显，在后期每次迭代遍历到的节点数大大减小。\n* 外部采样在三个游戏中优于结果采样，算法的性能可能和游戏的特性有关。\n\n## 结论\n\n定义了基于采样的CFR算法，并提出了两种采样模式，外采样(每次迭代采样一条路径)，外部采样(每次采样对手的chance的一个固定策略)。对与朴素CFR提出了更紧密的边界，也对两种采样方法提出了边界。\n\n未来工作:\n\n* 检验游戏特性对算法的影响。\n* 外采样在在线学习中的应用。\n* 采用不完全回忆来抽象动作。\n\n","slug":"论文阅读-Monte-Carlo-Sampling-for-Regret-Minimization-in-Extensive-Games","published":1,"updated":"2020-01-16T02:48:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5kuwy1v0019gz4dl6jgihss","content":"<!-- build time:Sun Jan 19 2020 18:07:22 GMT+0800 (GMT+08:00) --><div class=\"table-container\"><table><thead><tr><th>标题</th><th>Monte Carlo Sampling for Regret Minimization in Extensive Games</th></tr></thead><tbody><tr><td>团队</td><td>Alberta、CMU、Yahoo</td></tr><tr><td>时间</td><td>2009</td></tr><tr><td>出处</td><td>nips</td></tr></tbody></table></div><h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>CFR算法通过最小化反事实后悔值来最小化总后悔值，使得平均策略收敛于纳什均衡。当时的CFR算法具有以下缺点:</p><ul><li>多数实现针对卡牌游戏进行优化，对发牌进行抽样，这是一种不通用的方法。</li><li>CFR在迭代时需要已知对手的策略，使得该方法不适用于在线学习。</li></ul><p>该论文提出了基于采样的CFR算法，使用给出了通用形式，又详细介绍了两种方法: 结果采样(采样每一个对局)和外采样(采样对手和机会节点的动作)。基于采样的CFR算法在期望上与原CFR相同，但是方差较大，通过最小化后悔值的界限体现出来。结果采样中对手的策略被抵消掉，所以可以用于在线学习，结果采样的总迭代时间减少了。</p><h2 id=\"蒙特卡洛CFR\"><a href=\"#蒙特卡洛CFR\" class=\"headerlink\" title=\"蒙特卡洛CFR\"></a>蒙特卡洛CFR</h2><h3 id=\"通用方法\"><a href=\"#通用方法\" class=\"headerlink\" title=\"通用方法\"></a>通用方法</h3><p>基于采样的CFR的基本思路是将所有叶子节点划分若干块，每次以某种概率采样某一块，计算该块内的所有叶子节点对其到根路径上的节点的贡献，对于计算的贡献值为原有的方法除以选取该块的概率，从而保证在期望上是相同的。</p><p>将所有叶子节点划分为若干个集合 $Q = \\{ Q_1, …, Q_r\\} $, 选取某个集合的概率为$q_j$, 保证 $\\sum_{j=1}^{r} q_j = 1$， 所有集合的并覆盖叶子节点。</p><p>定义一个叶子节点在每一次迭代中被选取的概率$q(z) = \\sum_{j:z\\in Q_j}$, 使用求和符号的意思时一个叶子节点可能被划分在多个集合中，一般来说都不会重复划分叶子节点。</p><p>在提出了CFR的论文中，CFR的定义为</p><script type=\"math/tex;mode=display\">v(\\sigma, I) = \\sum_{h\\in I, z\\in Z}\\pi^\\sigma_{-i}(h)\\pi^\\sigma(h, z)u_i(z)</script><p>将该定义转化为直接枚举每个叶子节点，则可以确定其对应的$h$节点, 定义为 $z[I]$，则CFR的定义可以表示为</p><script type=\"math/tex;mode=display\">v(\\sigma, I) = \\sum_{z\\in Z_I}\\pi^\\sigma_{-i}(z[I])\\pi^\\sigma(z[I], z)u_i(z)</script><p>在一次采样中，每个节点的采样反事实价值为</p><script type=\"math/tex;mode=display\">\\tilde{v} _i (\\sigma, I | j) = \\sum_{z\\in Q_j \\cap Z_I} \\frac{1}{q(z)}u_i(z)\\pi^\\sigma_{-i}(z[I])\\pi^\\sigma(z[I], z)</script><p>在多次采样下， 采样反事实后悔值的期望值与反事实后悔值相同。</p><p>同样地，可以定义每个节点采取某个动作的立即反事实后悔值。</p><script type=\"math/tex;mode=display\">\\tilde{r}(I, a) = \\tilde{v} _i (\\sigma^t_{(I\\rightarrow a)}, I) - \\tilde{v}_i(\\sigma^t, I)</script><h3 id=\"结果采样CFR\"><a href=\"#结果采样CFR\" class=\"headerlink\" title=\"结果采样CFR\"></a>结果采样CFR</h3><p>结果采样CFR中对于每一条到叶子节点的路径，对应于一个子集合，即每个子集合包含的节点数量为1，选取子集合的概率为这条路径上所有策略的乘积。即对于一个策略组合$\\sigma^\\prime$ , $q(z) = \\pi^{\\sigma^\\prime}(z)$。</p><p>则对于该叶子节点，计算其对路径上每一个节点的所有动作的立即反事实后悔值的贡献。</p><script type=\"math/tex;mode=display\">r(I, a) =\\left\\{\n\\begin{aligned}\nw_I *(1 - \\sigma(a | z[I])) && if (z[I]a) \\in z \\\\\n-w_I *\\sigma(a|z[I])&&otherwise\n\\end{aligned}\n\\;\\;\\;where \\;w_I = \\frac{u_i(z)\\pi^\\sigma_{-i}(z)\\pi_i^\\sigma(z[i]a, z)}{\\pi^{\\sigma^\\prime}(z)}\n\\right.</script><p>如果叶子节点的采样概率与对手的策略相同，则可以把$\\pi_{-i}^\\sigma(z)$抵消掉，此时式子的计算不再依赖于对手的概率，所以该算法可以推广为在线学习算法。</p><h3 id=\"外采样CFR\"><a href=\"#外采样CFR\" class=\"headerlink\" title=\"外采样CFR\"></a>外采样CFR</h3><p>外采样CFR对于对手策略和机会策略进行采样，即对于一个策略组合$\\sigma ^ \\prime$, $q(z) = \\pi^{\\sigma^\\prime(z)}_{-i}$。实际每次计算中，对于博弈树进行遍历，遇到对手策略或机会策略节点，根据实际策略采样一个动作，选择这个动作的边向下遍历，遇到自己策略的节点时，则选择所有动作的边向下遍历。则实际遍历到的是整颗博弈树的一颗子树，该棵子树中包含多个block，一个block中的所有叶子节点的 $\\pi_{-i}$ 值相同。</p><p>则对于每个叶子节点，同样计算对所有自己决策节点的每一个动作的贡献。</p><script type=\"math/tex;mode=display\">\\sum_{z\\in Q \\cap Z_I} u_i(z) (\\pi_i^\\sigma(z[I]a, z) - \\pi_i^\\sigma(z[I], z))</script><p>其中 $q(z)$ 与 $\\pi_{-i}(z[I])$ 和 $\\pi_{-i}(z[I], z)$ 进行抵消。</p><h2 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h2><p>在四个游戏中进行实验。</p><ul><li>Goofspiel. 玩家每人拥有 1-K 十三张牌，公共牌也为1-K十三张牌，每次亮出一张公共牌，每个玩家出一张自己的牌进行竞标，牌最大者获胜，拥有公共牌对应的分数，然后每个玩家弃掉竞标的牌，13轮后拥有最多分数玩家获胜。实际实验中使用变形，每个玩家不知道竞标的牌的大小。</li><li>One-Card Poker，每人从牌堆中抽一张牌，加价或不加价一轮，比牌大小。实际实验中牌堆大小为500.</li><li>Princess and Monster， 在一个黑暗空间中怪兽和公主进行移动，当两者的距离小于一定范围时公主被抓住。实际实验中在3*3地图中随机初始位置，逃离者的收益为没有被抓住的步数。</li><li>Latent Tic-Tac-Toe，井字棋变形，每一步双方选择下一步棋的位置，棋子的显示延迟一回合，即当对方下完下一步棋后，才能看到我方当前回合下的棋，如果下棋发生冲突则算输。</li></ul><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g86pqegxi1j30ux08fdhh.jpg\" alt=\"image.png\"></p><p>采用四种算法进行评估。</p><ul><li>朴素CFR。</li><li>带剪枝的CFR。当某个节点按照策略选取的概率为0时，不再搜索该棵子树。</li><li>结果CFR。增加随机选取节点。以 $\\epsilon$ 概率随机采样， $1 - \\epsilon$ 概率按照策略采样，结果发现 $\\epsilon = 0.6$ 时较优。</li><li>外部采样。</li></ul><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1g86pxxk6uvj30w80nwgqh.jpg\" alt=\"image.png\"></p><p>横坐标为搜索时遍历节点数，不采用迭代次数的原因时不同算法的每次迭代时间不一样，纵坐标为计算策略的可利用性。</p><p>实验结果分析:</p><ul><li>MCCFR变体的性能显著由于朴素CFR。</li><li>剪枝对于CFR性能的体现较明显，在后期每次迭代遍历到的节点数大大减小。</li><li>外部采样在三个游戏中优于结果采样，算法的性能可能和游戏的特性有关。</li></ul><h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>定义了基于采样的CFR算法，并提出了两种采样模式，外采样(每次迭代采样一条路径)，外部采样(每次采样对手的chance的一个固定策略)。对与朴素CFR提出了更紧密的边界，也对两种采样方法提出了边界。</p><p>未来工作:</p><ul><li>检验游戏特性对算法的影响。</li><li>外采样在在线学习中的应用。</li><li>采用不完全回忆来抽象动作。</li></ul><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sun Jan 19 2020 18:07:22 GMT+0800 (GMT+08:00) --><div class=\"table-container\"><table><thead><tr><th>标题</th><th>Monte Carlo Sampling for Regret Minimization in Extensive Games</th></tr></thead><tbody><tr><td>团队</td><td>Alberta、CMU、Yahoo</td></tr><tr><td>时间</td><td>2009</td></tr><tr><td>出处</td><td>nips</td></tr></tbody></table></div><h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>CFR算法通过最小化反事实后悔值来最小化总后悔值，使得平均策略收敛于纳什均衡。当时的CFR算法具有以下缺点:</p><ul><li>多数实现针对卡牌游戏进行优化，对发牌进行抽样，这是一种不通用的方法。</li><li>CFR在迭代时需要已知对手的策略，使得该方法不适用于在线学习。</li></ul><p>该论文提出了基于采样的CFR算法，使用给出了通用形式，又详细介绍了两种方法: 结果采样(采样每一个对局)和外采样(采样对手和机会节点的动作)。基于采样的CFR算法在期望上与原CFR相同，但是方差较大，通过最小化后悔值的界限体现出来。结果采样中对手的策略被抵消掉，所以可以用于在线学习，结果采样的总迭代时间减少了。</p><h2 id=\"蒙特卡洛CFR\"><a href=\"#蒙特卡洛CFR\" class=\"headerlink\" title=\"蒙特卡洛CFR\"></a>蒙特卡洛CFR</h2><h3 id=\"通用方法\"><a href=\"#通用方法\" class=\"headerlink\" title=\"通用方法\"></a>通用方法</h3><p>基于采样的CFR的基本思路是将所有叶子节点划分若干块，每次以某种概率采样某一块，计算该块内的所有叶子节点对其到根路径上的节点的贡献，对于计算的贡献值为原有的方法除以选取该块的概率，从而保证在期望上是相同的。</p><p>将所有叶子节点划分为若干个集合 $Q = \\{ Q_1, …, Q_r\\} $, 选取某个集合的概率为$q_j$, 保证 $\\sum_{j=1}^{r} q_j = 1$， 所有集合的并覆盖叶子节点。</p><p>定义一个叶子节点在每一次迭代中被选取的概率$q(z) = \\sum_{j:z\\in Q_j}$, 使用求和符号的意思时一个叶子节点可能被划分在多个集合中，一般来说都不会重复划分叶子节点。</p><p>在提出了CFR的论文中，CFR的定义为</p><script type=\"math/tex;mode=display\">v(\\sigma, I) = \\sum_{h\\in I, z\\in Z}\\pi^\\sigma_{-i}(h)\\pi^\\sigma(h, z)u_i(z)</script><p>将该定义转化为直接枚举每个叶子节点，则可以确定其对应的$h$节点, 定义为 $z[I]$，则CFR的定义可以表示为</p><script type=\"math/tex;mode=display\">v(\\sigma, I) = \\sum_{z\\in Z_I}\\pi^\\sigma_{-i}(z[I])\\pi^\\sigma(z[I], z)u_i(z)</script><p>在一次采样中，每个节点的采样反事实价值为</p><script type=\"math/tex;mode=display\">\\tilde{v} _i (\\sigma, I | j) = \\sum_{z\\in Q_j \\cap Z_I} \\frac{1}{q(z)}u_i(z)\\pi^\\sigma_{-i}(z[I])\\pi^\\sigma(z[I], z)</script><p>在多次采样下， 采样反事实后悔值的期望值与反事实后悔值相同。</p><p>同样地，可以定义每个节点采取某个动作的立即反事实后悔值。</p><script type=\"math/tex;mode=display\">\\tilde{r}(I, a) = \\tilde{v} _i (\\sigma^t_{(I\\rightarrow a)}, I) - \\tilde{v}_i(\\sigma^t, I)</script><h3 id=\"结果采样CFR\"><a href=\"#结果采样CFR\" class=\"headerlink\" title=\"结果采样CFR\"></a>结果采样CFR</h3><p>结果采样CFR中对于每一条到叶子节点的路径，对应于一个子集合，即每个子集合包含的节点数量为1，选取子集合的概率为这条路径上所有策略的乘积。即对于一个策略组合$\\sigma^\\prime$ , $q(z) = \\pi^{\\sigma^\\prime}(z)$。</p><p>则对于该叶子节点，计算其对路径上每一个节点的所有动作的立即反事实后悔值的贡献。</p><script type=\"math/tex;mode=display\">r(I, a) =\\left\\{\n\\begin{aligned}\nw_I *(1 - \\sigma(a | z[I])) && if (z[I]a) \\in z \\\\\n-w_I *\\sigma(a|z[I])&&otherwise\n\\end{aligned}\n\\;\\;\\;where \\;w_I = \\frac{u_i(z)\\pi^\\sigma_{-i}(z)\\pi_i^\\sigma(z[i]a, z)}{\\pi^{\\sigma^\\prime}(z)}\n\\right.</script><p>如果叶子节点的采样概率与对手的策略相同，则可以把$\\pi_{-i}^\\sigma(z)$抵消掉，此时式子的计算不再依赖于对手的概率，所以该算法可以推广为在线学习算法。</p><h3 id=\"外采样CFR\"><a href=\"#外采样CFR\" class=\"headerlink\" title=\"外采样CFR\"></a>外采样CFR</h3><p>外采样CFR对于对手策略和机会策略进行采样，即对于一个策略组合$\\sigma ^ \\prime$, $q(z) = \\pi^{\\sigma^\\prime(z)}_{-i}$。实际每次计算中，对于博弈树进行遍历，遇到对手策略或机会策略节点，根据实际策略采样一个动作，选择这个动作的边向下遍历，遇到自己策略的节点时，则选择所有动作的边向下遍历。则实际遍历到的是整颗博弈树的一颗子树，该棵子树中包含多个block，一个block中的所有叶子节点的 $\\pi_{-i}$ 值相同。</p><p>则对于每个叶子节点，同样计算对所有自己决策节点的每一个动作的贡献。</p><script type=\"math/tex;mode=display\">\\sum_{z\\in Q \\cap Z_I} u_i(z) (\\pi_i^\\sigma(z[I]a, z) - \\pi_i^\\sigma(z[I], z))</script><p>其中 $q(z)$ 与 $\\pi_{-i}(z[I])$ 和 $\\pi_{-i}(z[I], z)$ 进行抵消。</p><h2 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h2><p>在四个游戏中进行实验。</p><ul><li>Goofspiel. 玩家每人拥有 1-K 十三张牌，公共牌也为1-K十三张牌，每次亮出一张公共牌，每个玩家出一张自己的牌进行竞标，牌最大者获胜，拥有公共牌对应的分数，然后每个玩家弃掉竞标的牌，13轮后拥有最多分数玩家获胜。实际实验中使用变形，每个玩家不知道竞标的牌的大小。</li><li>One-Card Poker，每人从牌堆中抽一张牌，加价或不加价一轮，比牌大小。实际实验中牌堆大小为500.</li><li>Princess and Monster， 在一个黑暗空间中怪兽和公主进行移动，当两者的距离小于一定范围时公主被抓住。实际实验中在3*3地图中随机初始位置，逃离者的收益为没有被抓住的步数。</li><li>Latent Tic-Tac-Toe，井字棋变形，每一步双方选择下一步棋的位置，棋子的显示延迟一回合，即当对方下完下一步棋后，才能看到我方当前回合下的棋，如果下棋发生冲突则算输。</li></ul><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g86pqegxi1j30ux08fdhh.jpg\" alt=\"image.png\"></p><p>采用四种算法进行评估。</p><ul><li>朴素CFR。</li><li>带剪枝的CFR。当某个节点按照策略选取的概率为0时，不再搜索该棵子树。</li><li>结果CFR。增加随机选取节点。以 $\\epsilon$ 概率随机采样， $1 - \\epsilon$ 概率按照策略采样，结果发现 $\\epsilon = 0.6$ 时较优。</li><li>外部采样。</li></ul><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1g86pxxk6uvj30w80nwgqh.jpg\" alt=\"image.png\"></p><p>横坐标为搜索时遍历节点数，不采用迭代次数的原因时不同算法的每次迭代时间不一样，纵坐标为计算策略的可利用性。</p><p>实验结果分析:</p><ul><li>MCCFR变体的性能显著由于朴素CFR。</li><li>剪枝对于CFR性能的体现较明显，在后期每次迭代遍历到的节点数大大减小。</li><li>外部采样在三个游戏中优于结果采样，算法的性能可能和游戏的特性有关。</li></ul><h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>定义了基于采样的CFR算法，并提出了两种采样模式，外采样(每次迭代采样一条路径)，外部采样(每次采样对手的chance的一个固定策略)。对与朴素CFR提出了更紧密的边界，也对两种采样方法提出了边界。</p><p>未来工作:</p><ul><li>检验游戏特性对算法的影响。</li><li>外采样在在线学习中的应用。</li><li>采用不完全回忆来抽象动作。</li></ul><!-- rebuild by neat -->"},{"title":"[论文阅读]Deep Counterfactual Regret Minimization","mathjax":true,"date":"2020-01-18T09:02:10.000Z","_content":"\n| 标题 | Deep Counterfactual Regret Minimization |\n| ---- | --------------------------------------- |\n| 团队 | CMU、Facebook                           |\n| 时间 | 2019                                    |\n| 出处 | ICML                                    |\n\n### Abstract\n\n朴素的CFR算法需要遍历整颗博弈树，而在大型游戏中，往往需要在使用CFR之前进行对游戏进行抽象，抽象的方法与具体领域有关，且会损失一些重要信息，一个好的抽象方法又与游戏的均衡策略有关。该论文避免对游戏进行抽象，使用深度神经网来拟合CFR在游戏中的表现。\n\n具体而言，该论文使用一个价值神经网络来拟合每个信息集的动作反事实后悔值，一个策略神经网络来拟合最后的平均策略。在每次迭代中，首先使用k次外部采样，使用前一次的神经网络来采样对手的策略，获得自己的反事实后悔值存放在经验回放池中，采样完后训练一个新的神经网络来拟合所有的动作反事实后悔值。在每次采样对手的策略时，又将策略保存在另一个经验回放池中，用来训练最后的策略神经网络。\n\n### Introduction\n\n不完全信息博弈中，期望找到近似的均衡解，任何人不能单方面改变策略来获取更高的收益，即任何人的策略是对于他人的最佳应对策略。\n\nCFR算法通过迭代在双人零和游戏中收敛到纳什均衡解。大型游戏中首先对游戏进行抽样，抽样方法依赖于具体的领域知识，之后再用表格式的CFR算法进行求解，由于抽样的存在，最后的解是对均衡解的粗糙逼近。\n\n在强化学习中引入深度神经网络取得了较好效果，不需要具体领域知识就可以学习到较好的策略，但在不完全信息中很难收敛到均衡解。\n\nNFSP(Neural Fiction Self Play, 2016)在之前在不完全游戏中的前沿方法。\n\nDeepCFR使用深度神经网络拟合函数来逼近表格式方法，证明了能收敛到 ϵϵ 纳什均衡，在扑克变体包括双人有限注德州扑克进行实验。\n\n### Notation And Background\n\n限定游戏在双人零和博弈下, $P=\\{1,2\\}$, $u1=−u2P=\\{1,2\\}$, $u1=−u2$\n\n限定游戏为完全回忆，即如何两个节点不在同一个信息集下，这两个节点的后驱节点也互相不再同一个信息集下。\n\n在Regret Matching中，在正后悔值求和大于0时按比例分配概率，等于0时均匀分配概率。在该论文中在等于0时固定选择反悔值最高的动作，实验发现这能更好的处理逼近误差。\n\n实验发现交替累积玩家后悔值并计算策略，要比同时累积玩家后悔值并计算策略，能更快地收敛。\n\n### Related Work\n\n- First-order methods(2010, 2018)，另一种收敛到纳什均衡的方法，界限优于CFR，但实际使用中CFR变体更快，更稳定，可能更容易和函数逼近方法结合。\n- Neural Fictious Self Play(2016)，将Fictitious Play和深度学习函数结合，收敛速度慢于CFR。\n- Model-free policy gradient(2019)，调整参数来最小化后悔值，达到和NFSP类似性能。\n- DeepStack等(2017, 2018)，在深度限制的子游戏中使用深度学习来评估价值，但在子游戏中使用表格式方法计算价值。\n- 大规模函数逼近CFR在单一智能体设定下使用。该论文提出的是多智能体设定，且方法具有很大不同。\n- Regression CFR(2015)，建立回归树函数逼近CFR，手工设定大量特征，再利用线性回归逼近后悔值，手工设定特征和抽象一样依赖于领域知识。\n- Double Neural CFR(2018)，理论上有缺陷，只考虑小游戏。\n\n### Description\n\nDeepCFR的目标时逼近CFR的行为，不在每个信息集上计算和累积后悔值，而是使用深度神经网络来函数逼近，由相似的信息集进行推广。\n\nDeepCFR在每次迭代 tt 中，根据外部采样进行 KK 次博弈树的部分遍历。在遇到每个信息集时，使用 $\\theta^{t-1}$定义的价值神经网络来输出每个动作的总反事实后悔值，进而得到选择每个动作的概率，即策略 $\\sigma^t$。神经网络的输出 $V(I,a\\vert \\theta^{t-1})$ 近似为总反事实后悔值 $R^{t−1}(I,a)$。\n\n当遍历到叶子节点时，返回其收益。反向传播到对手和机会节点时，原样返回。反向传播到自己节点时，将所有动作的收益按照计算出来的策略 $\\sigma^t$进行加权求和，同时也可以求出此次采样下每个动作的立即后悔值，将这些后悔值放入经验回放池 $M_{v,p}$中作为之后神经网络的训练样本，如果满了则使用鱼塘采样，保证每个样本被选取的概率随机。\n\n当 $K$ 次采样完成后，使用经验回放池 $M_{v,p}$ 作为训练数据，重新训练一个新的 θtθt 定义的价值神经网络，最小化输出和立即反事实动作后悔值之间的差距。由于所有立即反事实动作后悔值的平均值与总反事实动作后悔值成比例，所以经验回放池中的数据除了鱼塘采样外不会被丢弃。\n\n可以使用其他满足 Bregman Divergence 的损失函数。\n\n除了价值网络外，使用一个单独的策略网络来拟合最后的平均策略，因为平均策略才收敛到纳什均衡。再维护一个经验回放池 $M_\\Pi$，每次迭代中将计算得到的策略加入经验回放池，并使用迭代轮数 $t$ 进行加权。\n\n如果迭代次数和神经网络的大小很小，则可以把每一次的价值网络保存下来。在实际每次需要进行决策时，随机挑选一个价值网络输出策略。\n\n### Experimental Setup\n\n在有限注两轮德州扑克中进行实验，具有 $10^{12}$个节点，$10^9$个信息集。有限注德州扑克具有 $10^{17}个节点，$ $10^{14}$ 个信息集。\n\n在两个游戏中，与 NFSP 和使用抽象的方法进行比较。\n\n#### 网络结构\n\n两个网络采用同样的结构，7层 98948个参数组成。网络的输入为信息集，由卡牌集合和投注历史组成。卡牌有3个embedding层之和进行表示：rank(1-13)，suit(1-4)，card(1-52)。投注历史用一个二进制向量表示是否投注，一个浮点数向量表示投注大小，向量的长度为 6*轮数。\n\n每一层为全连接层，包括Relu激活函数和跳跃连接，即$x_{i+1}=Relu(Ax+x)$，网络的最后一层特征进行了归一化。\n\n对于价值网络，输出为每个动作的后悔值。对于平均策略网络，输出为归一化的每个动作选择的概率。\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEgy1g89epluhdej30if07wwg6.jpg)\n\n#### 模型训练\n\n对于每个网络的经验回放池分配了 $4∗10^7$信息集的大小。价值网络在每次迭代中随机初始化，重新开始训练，实验证明这比接着训练具有更快的收敛速度。对于两轮版有限注德州扑克，进行了4000次小批量随机梯度下降迭代，batch-size为10000，使用学习率为0.0010.001 的Adam学习器进行优化。对于有限注德州扑克，进行了32000次迭代，batch-size为20000。\n\n#### Linear CFR\n\nLInear CFR是在计算时使用迭代次数 $t$ 进行加权，虽然不会收敛到更好的结果，但可以更快地收敛。\n\n具体而言，在经验回放池中额外保存迭代次数 $t$ ,在每 $T$ 次训练网络时按照 $2/T$进行缩放，我的理解时权重为 $2t/T$。\n\n#### DeepCFR 算法\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEly1g89ld4tvnmj31160cj41c.jpg)\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEly1g89mscfraaj31190l7q87.jpg)\n\n### Experimental Results\n\n在两轮有限注德州扑克环境下实验结果，横坐标是遍历到的节点，纵坐标时可利用性，图中的收敛速度忽视了神经网络训练所花费的时间。\n\n比较对象:\n\n- Abstraction, 将 $10^9$个节点使用人为设计的特征，利用 K-means 进行聚类，然后再使用外采样线性CFR进行迭代求解。\n- Lossless Abstraction。仅将策略无关的节点聚类在一起，比如在顺子牌型中花色无关，该种抽样不会影响最后结果。\n- NFSP。深度学习拟合Fictitious Play。\n\n图像显示结果：\n\n- DeepCFR和最少抽样的方法达到了相同可利用性，但是具有更快的收敛速度。\n- 由于神经网络的训练，DeepCFR的实际运行时间可能会更长，但是具有不依赖于具体特征的优点。\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEly1g89mku3e81j30iu0cq404.jpg)\n\n横坐标为每次迭代中采样的数量，纵坐标为可利用率。采样的数量越少，收敛速度越慢，需要收集更多的数据来减少方差。最后每一种采样方法都能收敛到近似相同的可利用率。\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEgy1g8ao4vi18kj30ck087t9m.jpg)\n\n横坐标为每次训练网络时进行小批量随机梯度下降的次数。该数值不影响收敛速度，但会影响最后收敛到的可利用率。可能原因时训练次数减少使得网络的拟合能力下降。\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEgy1g8ao8kpgnsj30cl08dq3r.jpg)\n\n网络模型参数的影响。\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEgy1g8aobmhw3bj30cr087t8z.jpg)\n\n显示了使用线性加权，从头训练网络，在所有后悔值小于0时随机选择动作的影响。不从头训练网络时最后收敛到的可利用率变大，可能是由于网络陷入了局部最优值。\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEgy1g8aoey5eesj30el096aaw.jpg)\n\n鱼塘采样和滑动窗口对实验的影响。滑动窗口方法在内存占满后不再继续收敛。\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEgy1g8aohxsfyuj30em094mxl.jpg)\n\n### Conclusion\n\n将CFR算法与深度神经网络函数拟合相结合，试图在大规模不完全信息游戏中寻找纳什均衡。该方法在理论上可行，与大规模扑克游戏中达到了与使用具体领域知识方法的相似性能。\n\n将DeepCFR扩展到更大的游戏中，可能需要结合其他方法，如可扩展的采样策略，减少采样的方差。","source":"_posts/论文阅读-Deep-Counterfactual-Regret-Minimization.md","raw":"---\ntitle: '[论文阅读]Deep Counterfactual Regret Minimization'\nmathjax: true\ndate: 2020-01-18 17:02:10\ncategories:\n\t- Paper\ntags:\n\t- RL\n\t- Paper\n\t- CFR\n---\n\n| 标题 | Deep Counterfactual Regret Minimization |\n| ---- | --------------------------------------- |\n| 团队 | CMU、Facebook                           |\n| 时间 | 2019                                    |\n| 出处 | ICML                                    |\n\n### Abstract\n\n朴素的CFR算法需要遍历整颗博弈树，而在大型游戏中，往往需要在使用CFR之前进行对游戏进行抽象，抽象的方法与具体领域有关，且会损失一些重要信息，一个好的抽象方法又与游戏的均衡策略有关。该论文避免对游戏进行抽象，使用深度神经网来拟合CFR在游戏中的表现。\n\n具体而言，该论文使用一个价值神经网络来拟合每个信息集的动作反事实后悔值，一个策略神经网络来拟合最后的平均策略。在每次迭代中，首先使用k次外部采样，使用前一次的神经网络来采样对手的策略，获得自己的反事实后悔值存放在经验回放池中，采样完后训练一个新的神经网络来拟合所有的动作反事实后悔值。在每次采样对手的策略时，又将策略保存在另一个经验回放池中，用来训练最后的策略神经网络。\n\n### Introduction\n\n不完全信息博弈中，期望找到近似的均衡解，任何人不能单方面改变策略来获取更高的收益，即任何人的策略是对于他人的最佳应对策略。\n\nCFR算法通过迭代在双人零和游戏中收敛到纳什均衡解。大型游戏中首先对游戏进行抽样，抽样方法依赖于具体的领域知识，之后再用表格式的CFR算法进行求解，由于抽样的存在，最后的解是对均衡解的粗糙逼近。\n\n在强化学习中引入深度神经网络取得了较好效果，不需要具体领域知识就可以学习到较好的策略，但在不完全信息中很难收敛到均衡解。\n\nNFSP(Neural Fiction Self Play, 2016)在之前在不完全游戏中的前沿方法。\n\nDeepCFR使用深度神经网络拟合函数来逼近表格式方法，证明了能收敛到 ϵϵ 纳什均衡，在扑克变体包括双人有限注德州扑克进行实验。\n\n### Notation And Background\n\n限定游戏在双人零和博弈下, $P=\\{1,2\\}$, $u1=−u2P=\\{1,2\\}$, $u1=−u2$\n\n限定游戏为完全回忆，即如何两个节点不在同一个信息集下，这两个节点的后驱节点也互相不再同一个信息集下。\n\n在Regret Matching中，在正后悔值求和大于0时按比例分配概率，等于0时均匀分配概率。在该论文中在等于0时固定选择反悔值最高的动作，实验发现这能更好的处理逼近误差。\n\n实验发现交替累积玩家后悔值并计算策略，要比同时累积玩家后悔值并计算策略，能更快地收敛。\n\n### Related Work\n\n- First-order methods(2010, 2018)，另一种收敛到纳什均衡的方法，界限优于CFR，但实际使用中CFR变体更快，更稳定，可能更容易和函数逼近方法结合。\n- Neural Fictious Self Play(2016)，将Fictitious Play和深度学习函数结合，收敛速度慢于CFR。\n- Model-free policy gradient(2019)，调整参数来最小化后悔值，达到和NFSP类似性能。\n- DeepStack等(2017, 2018)，在深度限制的子游戏中使用深度学习来评估价值，但在子游戏中使用表格式方法计算价值。\n- 大规模函数逼近CFR在单一智能体设定下使用。该论文提出的是多智能体设定，且方法具有很大不同。\n- Regression CFR(2015)，建立回归树函数逼近CFR，手工设定大量特征，再利用线性回归逼近后悔值，手工设定特征和抽象一样依赖于领域知识。\n- Double Neural CFR(2018)，理论上有缺陷，只考虑小游戏。\n\n### Description\n\nDeepCFR的目标时逼近CFR的行为，不在每个信息集上计算和累积后悔值，而是使用深度神经网络来函数逼近，由相似的信息集进行推广。\n\nDeepCFR在每次迭代 tt 中，根据外部采样进行 KK 次博弈树的部分遍历。在遇到每个信息集时，使用 $\\theta^{t-1}$定义的价值神经网络来输出每个动作的总反事实后悔值，进而得到选择每个动作的概率，即策略 $\\sigma^t$。神经网络的输出 $V(I,a\\vert \\theta^{t-1})$ 近似为总反事实后悔值 $R^{t−1}(I,a)$。\n\n当遍历到叶子节点时，返回其收益。反向传播到对手和机会节点时，原样返回。反向传播到自己节点时，将所有动作的收益按照计算出来的策略 $\\sigma^t$进行加权求和，同时也可以求出此次采样下每个动作的立即后悔值，将这些后悔值放入经验回放池 $M_{v,p}$中作为之后神经网络的训练样本，如果满了则使用鱼塘采样，保证每个样本被选取的概率随机。\n\n当 $K$ 次采样完成后，使用经验回放池 $M_{v,p}$ 作为训练数据，重新训练一个新的 θtθt 定义的价值神经网络，最小化输出和立即反事实动作后悔值之间的差距。由于所有立即反事实动作后悔值的平均值与总反事实动作后悔值成比例，所以经验回放池中的数据除了鱼塘采样外不会被丢弃。\n\n可以使用其他满足 Bregman Divergence 的损失函数。\n\n除了价值网络外，使用一个单独的策略网络来拟合最后的平均策略，因为平均策略才收敛到纳什均衡。再维护一个经验回放池 $M_\\Pi$，每次迭代中将计算得到的策略加入经验回放池，并使用迭代轮数 $t$ 进行加权。\n\n如果迭代次数和神经网络的大小很小，则可以把每一次的价值网络保存下来。在实际每次需要进行决策时，随机挑选一个价值网络输出策略。\n\n### Experimental Setup\n\n在有限注两轮德州扑克中进行实验，具有 $10^{12}$个节点，$10^9$个信息集。有限注德州扑克具有 $10^{17}个节点，$ $10^{14}$ 个信息集。\n\n在两个游戏中，与 NFSP 和使用抽象的方法进行比较。\n\n#### 网络结构\n\n两个网络采用同样的结构，7层 98948个参数组成。网络的输入为信息集，由卡牌集合和投注历史组成。卡牌有3个embedding层之和进行表示：rank(1-13)，suit(1-4)，card(1-52)。投注历史用一个二进制向量表示是否投注，一个浮点数向量表示投注大小，向量的长度为 6*轮数。\n\n每一层为全连接层，包括Relu激活函数和跳跃连接，即$x_{i+1}=Relu(Ax+x)$，网络的最后一层特征进行了归一化。\n\n对于价值网络，输出为每个动作的后悔值。对于平均策略网络，输出为归一化的每个动作选择的概率。\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEgy1g89epluhdej30if07wwg6.jpg)\n\n#### 模型训练\n\n对于每个网络的经验回放池分配了 $4∗10^7$信息集的大小。价值网络在每次迭代中随机初始化，重新开始训练，实验证明这比接着训练具有更快的收敛速度。对于两轮版有限注德州扑克，进行了4000次小批量随机梯度下降迭代，batch-size为10000，使用学习率为0.0010.001 的Adam学习器进行优化。对于有限注德州扑克，进行了32000次迭代，batch-size为20000。\n\n#### Linear CFR\n\nLInear CFR是在计算时使用迭代次数 $t$ 进行加权，虽然不会收敛到更好的结果，但可以更快地收敛。\n\n具体而言，在经验回放池中额外保存迭代次数 $t$ ,在每 $T$ 次训练网络时按照 $2/T$进行缩放，我的理解时权重为 $2t/T$。\n\n#### DeepCFR 算法\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEly1g89ld4tvnmj31160cj41c.jpg)\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEly1g89mscfraaj31190l7q87.jpg)\n\n### Experimental Results\n\n在两轮有限注德州扑克环境下实验结果，横坐标是遍历到的节点，纵坐标时可利用性，图中的收敛速度忽视了神经网络训练所花费的时间。\n\n比较对象:\n\n- Abstraction, 将 $10^9$个节点使用人为设计的特征，利用 K-means 进行聚类，然后再使用外采样线性CFR进行迭代求解。\n- Lossless Abstraction。仅将策略无关的节点聚类在一起，比如在顺子牌型中花色无关，该种抽样不会影响最后结果。\n- NFSP。深度学习拟合Fictitious Play。\n\n图像显示结果：\n\n- DeepCFR和最少抽样的方法达到了相同可利用性，但是具有更快的收敛速度。\n- 由于神经网络的训练，DeepCFR的实际运行时间可能会更长，但是具有不依赖于具体特征的优点。\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEly1g89mku3e81j30iu0cq404.jpg)\n\n横坐标为每次迭代中采样的数量，纵坐标为可利用率。采样的数量越少，收敛速度越慢，需要收集更多的数据来减少方差。最后每一种采样方法都能收敛到近似相同的可利用率。\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEgy1g8ao4vi18kj30ck087t9m.jpg)\n\n横坐标为每次训练网络时进行小批量随机梯度下降的次数。该数值不影响收敛速度，但会影响最后收敛到的可利用率。可能原因时训练次数减少使得网络的拟合能力下降。\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEgy1g8ao8kpgnsj30cl08dq3r.jpg)\n\n网络模型参数的影响。\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEgy1g8aobmhw3bj30cr087t8z.jpg)\n\n显示了使用线性加权，从头训练网络，在所有后悔值小于0时随机选择动作的影响。不从头训练网络时最后收敛到的可利用率变大，可能是由于网络陷入了局部最优值。\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEgy1g8aoey5eesj30el096aaw.jpg)\n\n鱼塘采样和滑动窗口对实验的影响。滑动窗口方法在内存占满后不再继续收敛。\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEgy1g8aohxsfyuj30em094mxl.jpg)\n\n### Conclusion\n\n将CFR算法与深度神经网络函数拟合相结合，试图在大规模不完全信息游戏中寻找纳什均衡。该方法在理论上可行，与大规模扑克游戏中达到了与使用具体领域知识方法的相似性能。\n\n将DeepCFR扩展到更大的游戏中，可能需要结合其他方法，如可扩展的采样策略，减少采样的方差。","slug":"论文阅读-Deep-Counterfactual-Regret-Minimization","published":1,"updated":"2020-01-18T09:08:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5kuwy2i001ugz4d5lej2ph8","content":"<!-- build time:Sun Jan 19 2020 18:07:22 GMT+0800 (GMT+08:00) --><div class=\"table-container\"><table><thead><tr><th>标题</th><th>Deep Counterfactual Regret Minimization</th></tr></thead><tbody><tr><td>团队</td><td>CMU、Facebook</td></tr><tr><td>时间</td><td>2019</td></tr><tr><td>出处</td><td>ICML</td></tr></tbody></table></div><h3 id=\"Abstract\"><a href=\"#Abstract\" class=\"headerlink\" title=\"Abstract\"></a>Abstract</h3><p>朴素的CFR算法需要遍历整颗博弈树，而在大型游戏中，往往需要在使用CFR之前进行对游戏进行抽象，抽象的方法与具体领域有关，且会损失一些重要信息，一个好的抽象方法又与游戏的均衡策略有关。该论文避免对游戏进行抽象，使用深度神经网来拟合CFR在游戏中的表现。</p><p>具体而言，该论文使用一个价值神经网络来拟合每个信息集的动作反事实后悔值，一个策略神经网络来拟合最后的平均策略。在每次迭代中，首先使用k次外部采样，使用前一次的神经网络来采样对手的策略，获得自己的反事实后悔值存放在经验回放池中，采样完后训练一个新的神经网络来拟合所有的动作反事实后悔值。在每次采样对手的策略时，又将策略保存在另一个经验回放池中，用来训练最后的策略神经网络。</p><h3 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h3><p>不完全信息博弈中，期望找到近似的均衡解，任何人不能单方面改变策略来获取更高的收益，即任何人的策略是对于他人的最佳应对策略。</p><p>CFR算法通过迭代在双人零和游戏中收敛到纳什均衡解。大型游戏中首先对游戏进行抽样，抽样方法依赖于具体的领域知识，之后再用表格式的CFR算法进行求解，由于抽样的存在，最后的解是对均衡解的粗糙逼近。</p><p>在强化学习中引入深度神经网络取得了较好效果，不需要具体领域知识就可以学习到较好的策略，但在不完全信息中很难收敛到均衡解。</p><p>NFSP(Neural Fiction Self Play, 2016)在之前在不完全游戏中的前沿方法。</p><p>DeepCFR使用深度神经网络拟合函数来逼近表格式方法，证明了能收敛到 ϵϵ 纳什均衡，在扑克变体包括双人有限注德州扑克进行实验。</p><h3 id=\"Notation-And-Background\"><a href=\"#Notation-And-Background\" class=\"headerlink\" title=\"Notation And Background\"></a>Notation And Background</h3><p>限定游戏在双人零和博弈下, $P=\\{1,2\\}$, $u1=−u2P=\\{1,2\\}$, $u1=−u2$</p><p>限定游戏为完全回忆，即如何两个节点不在同一个信息集下，这两个节点的后驱节点也互相不再同一个信息集下。</p><p>在Regret Matching中，在正后悔值求和大于0时按比例分配概率，等于0时均匀分配概率。在该论文中在等于0时固定选择反悔值最高的动作，实验发现这能更好的处理逼近误差。</p><p>实验发现交替累积玩家后悔值并计算策略，要比同时累积玩家后悔值并计算策略，能更快地收敛。</p><h3 id=\"Related-Work\"><a href=\"#Related-Work\" class=\"headerlink\" title=\"Related Work\"></a>Related Work</h3><ul><li>First-order methods(2010, 2018)，另一种收敛到纳什均衡的方法，界限优于CFR，但实际使用中CFR变体更快，更稳定，可能更容易和函数逼近方法结合。</li><li>Neural Fictious Self Play(2016)，将Fictitious Play和深度学习函数结合，收敛速度慢于CFR。</li><li>Model-free policy gradient(2019)，调整参数来最小化后悔值，达到和NFSP类似性能。</li><li>DeepStack等(2017, 2018)，在深度限制的子游戏中使用深度学习来评估价值，但在子游戏中使用表格式方法计算价值。</li><li>大规模函数逼近CFR在单一智能体设定下使用。该论文提出的是多智能体设定，且方法具有很大不同。</li><li>Regression CFR(2015)，建立回归树函数逼近CFR，手工设定大量特征，再利用线性回归逼近后悔值，手工设定特征和抽象一样依赖于领域知识。</li><li>Double Neural CFR(2018)，理论上有缺陷，只考虑小游戏。</li></ul><h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><p>DeepCFR的目标时逼近CFR的行为，不在每个信息集上计算和累积后悔值，而是使用深度神经网络来函数逼近，由相似的信息集进行推广。</p><p>DeepCFR在每次迭代 tt 中，根据外部采样进行 KK 次博弈树的部分遍历。在遇到每个信息集时，使用 $\\theta^{t-1}$定义的价值神经网络来输出每个动作的总反事实后悔值，进而得到选择每个动作的概率，即策略 $\\sigma^t$。神经网络的输出 $V(I,a\\vert \\theta^{t-1})$ 近似为总反事实后悔值 $R^{t−1}(I,a)$。</p><p>当遍历到叶子节点时，返回其收益。反向传播到对手和机会节点时，原样返回。反向传播到自己节点时，将所有动作的收益按照计算出来的策略 $\\sigma^t$进行加权求和，同时也可以求出此次采样下每个动作的立即后悔值，将这些后悔值放入经验回放池 $M_{v,p}$中作为之后神经网络的训练样本，如果满了则使用鱼塘采样，保证每个样本被选取的概率随机。</p><p>当 $K$ 次采样完成后，使用经验回放池 $M_{v,p}$ 作为训练数据，重新训练一个新的 θtθt 定义的价值神经网络，最小化输出和立即反事实动作后悔值之间的差距。由于所有立即反事实动作后悔值的平均值与总反事实动作后悔值成比例，所以经验回放池中的数据除了鱼塘采样外不会被丢弃。</p><p>可以使用其他满足 Bregman Divergence 的损失函数。</p><p>除了价值网络外，使用一个单独的策略网络来拟合最后的平均策略，因为平均策略才收敛到纳什均衡。再维护一个经验回放池 $M_\\Pi$，每次迭代中将计算得到的策略加入经验回放池，并使用迭代轮数 $t$ 进行加权。</p><p>如果迭代次数和神经网络的大小很小，则可以把每一次的价值网络保存下来。在实际每次需要进行决策时，随机挑选一个价值网络输出策略。</p><h3 id=\"Experimental-Setup\"><a href=\"#Experimental-Setup\" class=\"headerlink\" title=\"Experimental Setup\"></a>Experimental Setup</h3><p>在有限注两轮德州扑克中进行实验，具有 $10^{12}$个节点，$10^9$个信息集。有限注德州扑克具有 $10^{17}个节点，$ $10^{14}$ 个信息集。</p><p>在两个游戏中，与 NFSP 和使用抽象的方法进行比较。</p><h4 id=\"网络结构\"><a href=\"#网络结构\" class=\"headerlink\" title=\"网络结构\"></a>网络结构</h4><p>两个网络采用同样的结构，7层 98948个参数组成。网络的输入为信息集，由卡牌集合和投注历史组成。卡牌有3个embedding层之和进行表示：rank(1-13)，suit(1-4)，card(1-52)。投注历史用一个二进制向量表示是否投注，一个浮点数向量表示投注大小，向量的长度为 6*轮数。</p><p>每一层为全连接层，包括Relu激活函数和跳跃连接，即$x_{i+1}=Relu(Ax+x)$，网络的最后一层特征进行了归一化。</p><p>对于价值网络，输出为每个动作的后悔值。对于平均策略网络，输出为归一化的每个动作选择的概率。</p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1g89epluhdej30if07wwg6.jpg\" alt=\"image.png\"></p><h4 id=\"模型训练\"><a href=\"#模型训练\" class=\"headerlink\" title=\"模型训练\"></a>模型训练</h4><p>对于每个网络的经验回放池分配了 $4∗10^7$信息集的大小。价值网络在每次迭代中随机初始化，重新开始训练，实验证明这比接着训练具有更快的收敛速度。对于两轮版有限注德州扑克，进行了4000次小批量随机梯度下降迭代，batch-size为10000，使用学习率为0.0010.001 的Adam学习器进行优化。对于有限注德州扑克，进行了32000次迭代，batch-size为20000。</p><h4 id=\"Linear-CFR\"><a href=\"#Linear-CFR\" class=\"headerlink\" title=\"Linear CFR\"></a>Linear CFR</h4><p>LInear CFR是在计算时使用迭代次数 $t$ 进行加权，虽然不会收敛到更好的结果，但可以更快地收敛。</p><p>具体而言，在经验回放池中额外保存迭代次数 $t$ ,在每 $T$ 次训练网络时按照 $2/T$进行缩放，我的理解时权重为 $2t/T$。</p><h4 id=\"DeepCFR-算法\"><a href=\"#DeepCFR-算法\" class=\"headerlink\" title=\"DeepCFR 算法\"></a>DeepCFR 算法</h4><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g89ld4tvnmj31160cj41c.jpg\" alt=\"image.png\"></p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g89mscfraaj31190l7q87.jpg\" alt=\"image.png\"></p><h3 id=\"Experimental-Results\"><a href=\"#Experimental-Results\" class=\"headerlink\" title=\"Experimental Results\"></a>Experimental Results</h3><p>在两轮有限注德州扑克环境下实验结果，横坐标是遍历到的节点，纵坐标时可利用性，图中的收敛速度忽视了神经网络训练所花费的时间。</p><p>比较对象:</p><ul><li>Abstraction, 将 $10^9$个节点使用人为设计的特征，利用 K-means 进行聚类，然后再使用外采样线性CFR进行迭代求解。</li><li>Lossless Abstraction。仅将策略无关的节点聚类在一起，比如在顺子牌型中花色无关，该种抽样不会影响最后结果。</li><li>NFSP。深度学习拟合Fictitious Play。</li></ul><p>图像显示结果：</p><ul><li>DeepCFR和最少抽样的方法达到了相同可利用性，但是具有更快的收敛速度。</li><li>由于神经网络的训练，DeepCFR的实际运行时间可能会更长，但是具有不依赖于具体特征的优点。</li></ul><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g89mku3e81j30iu0cq404.jpg\" alt=\"image.png\"></p><p>横坐标为每次迭代中采样的数量，纵坐标为可利用率。采样的数量越少，收敛速度越慢，需要收集更多的数据来减少方差。最后每一种采样方法都能收敛到近似相同的可利用率。</p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1g8ao4vi18kj30ck087t9m.jpg\" alt=\"image.png\"></p><p>横坐标为每次训练网络时进行小批量随机梯度下降的次数。该数值不影响收敛速度，但会影响最后收敛到的可利用率。可能原因时训练次数减少使得网络的拟合能力下降。</p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1g8ao8kpgnsj30cl08dq3r.jpg\" alt=\"image.png\"></p><p>网络模型参数的影响。</p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1g8aobmhw3bj30cr087t8z.jpg\" alt=\"image.png\"></p><p>显示了使用线性加权，从头训练网络，在所有后悔值小于0时随机选择动作的影响。不从头训练网络时最后收敛到的可利用率变大，可能是由于网络陷入了局部最优值。</p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1g8aoey5eesj30el096aaw.jpg\" alt=\"image.png\"></p><p>鱼塘采样和滑动窗口对实验的影响。滑动窗口方法在内存占满后不再继续收敛。</p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1g8aohxsfyuj30em094mxl.jpg\" alt=\"image.png\"></p><h3 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h3><p>将CFR算法与深度神经网络函数拟合相结合，试图在大规模不完全信息游戏中寻找纳什均衡。该方法在理论上可行，与大规模扑克游戏中达到了与使用具体领域知识方法的相似性能。</p><p>将DeepCFR扩展到更大的游戏中，可能需要结合其他方法，如可扩展的采样策略，减少采样的方差。</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sun Jan 19 2020 18:07:22 GMT+0800 (GMT+08:00) --><div class=\"table-container\"><table><thead><tr><th>标题</th><th>Deep Counterfactual Regret Minimization</th></tr></thead><tbody><tr><td>团队</td><td>CMU、Facebook</td></tr><tr><td>时间</td><td>2019</td></tr><tr><td>出处</td><td>ICML</td></tr></tbody></table></div><h3 id=\"Abstract\"><a href=\"#Abstract\" class=\"headerlink\" title=\"Abstract\"></a>Abstract</h3><p>朴素的CFR算法需要遍历整颗博弈树，而在大型游戏中，往往需要在使用CFR之前进行对游戏进行抽象，抽象的方法与具体领域有关，且会损失一些重要信息，一个好的抽象方法又与游戏的均衡策略有关。该论文避免对游戏进行抽象，使用深度神经网来拟合CFR在游戏中的表现。</p><p>具体而言，该论文使用一个价值神经网络来拟合每个信息集的动作反事实后悔值，一个策略神经网络来拟合最后的平均策略。在每次迭代中，首先使用k次外部采样，使用前一次的神经网络来采样对手的策略，获得自己的反事实后悔值存放在经验回放池中，采样完后训练一个新的神经网络来拟合所有的动作反事实后悔值。在每次采样对手的策略时，又将策略保存在另一个经验回放池中，用来训练最后的策略神经网络。</p><h3 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h3><p>不完全信息博弈中，期望找到近似的均衡解，任何人不能单方面改变策略来获取更高的收益，即任何人的策略是对于他人的最佳应对策略。</p><p>CFR算法通过迭代在双人零和游戏中收敛到纳什均衡解。大型游戏中首先对游戏进行抽样，抽样方法依赖于具体的领域知识，之后再用表格式的CFR算法进行求解，由于抽样的存在，最后的解是对均衡解的粗糙逼近。</p><p>在强化学习中引入深度神经网络取得了较好效果，不需要具体领域知识就可以学习到较好的策略，但在不完全信息中很难收敛到均衡解。</p><p>NFSP(Neural Fiction Self Play, 2016)在之前在不完全游戏中的前沿方法。</p><p>DeepCFR使用深度神经网络拟合函数来逼近表格式方法，证明了能收敛到 ϵϵ 纳什均衡，在扑克变体包括双人有限注德州扑克进行实验。</p><h3 id=\"Notation-And-Background\"><a href=\"#Notation-And-Background\" class=\"headerlink\" title=\"Notation And Background\"></a>Notation And Background</h3><p>限定游戏在双人零和博弈下, $P=\\{1,2\\}$, $u1=−u2P=\\{1,2\\}$, $u1=−u2$</p><p>限定游戏为完全回忆，即如何两个节点不在同一个信息集下，这两个节点的后驱节点也互相不再同一个信息集下。</p><p>在Regret Matching中，在正后悔值求和大于0时按比例分配概率，等于0时均匀分配概率。在该论文中在等于0时固定选择反悔值最高的动作，实验发现这能更好的处理逼近误差。</p><p>实验发现交替累积玩家后悔值并计算策略，要比同时累积玩家后悔值并计算策略，能更快地收敛。</p><h3 id=\"Related-Work\"><a href=\"#Related-Work\" class=\"headerlink\" title=\"Related Work\"></a>Related Work</h3><ul><li>First-order methods(2010, 2018)，另一种收敛到纳什均衡的方法，界限优于CFR，但实际使用中CFR变体更快，更稳定，可能更容易和函数逼近方法结合。</li><li>Neural Fictious Self Play(2016)，将Fictitious Play和深度学习函数结合，收敛速度慢于CFR。</li><li>Model-free policy gradient(2019)，调整参数来最小化后悔值，达到和NFSP类似性能。</li><li>DeepStack等(2017, 2018)，在深度限制的子游戏中使用深度学习来评估价值，但在子游戏中使用表格式方法计算价值。</li><li>大规模函数逼近CFR在单一智能体设定下使用。该论文提出的是多智能体设定，且方法具有很大不同。</li><li>Regression CFR(2015)，建立回归树函数逼近CFR，手工设定大量特征，再利用线性回归逼近后悔值，手工设定特征和抽象一样依赖于领域知识。</li><li>Double Neural CFR(2018)，理论上有缺陷，只考虑小游戏。</li></ul><h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><p>DeepCFR的目标时逼近CFR的行为，不在每个信息集上计算和累积后悔值，而是使用深度神经网络来函数逼近，由相似的信息集进行推广。</p><p>DeepCFR在每次迭代 tt 中，根据外部采样进行 KK 次博弈树的部分遍历。在遇到每个信息集时，使用 $\\theta^{t-1}$定义的价值神经网络来输出每个动作的总反事实后悔值，进而得到选择每个动作的概率，即策略 $\\sigma^t$。神经网络的输出 $V(I,a\\vert \\theta^{t-1})$ 近似为总反事实后悔值 $R^{t−1}(I,a)$。</p><p>当遍历到叶子节点时，返回其收益。反向传播到对手和机会节点时，原样返回。反向传播到自己节点时，将所有动作的收益按照计算出来的策略 $\\sigma^t$进行加权求和，同时也可以求出此次采样下每个动作的立即后悔值，将这些后悔值放入经验回放池 $M_{v,p}$中作为之后神经网络的训练样本，如果满了则使用鱼塘采样，保证每个样本被选取的概率随机。</p><p>当 $K$ 次采样完成后，使用经验回放池 $M_{v,p}$ 作为训练数据，重新训练一个新的 θtθt 定义的价值神经网络，最小化输出和立即反事实动作后悔值之间的差距。由于所有立即反事实动作后悔值的平均值与总反事实动作后悔值成比例，所以经验回放池中的数据除了鱼塘采样外不会被丢弃。</p><p>可以使用其他满足 Bregman Divergence 的损失函数。</p><p>除了价值网络外，使用一个单独的策略网络来拟合最后的平均策略，因为平均策略才收敛到纳什均衡。再维护一个经验回放池 $M_\\Pi$，每次迭代中将计算得到的策略加入经验回放池，并使用迭代轮数 $t$ 进行加权。</p><p>如果迭代次数和神经网络的大小很小，则可以把每一次的价值网络保存下来。在实际每次需要进行决策时，随机挑选一个价值网络输出策略。</p><h3 id=\"Experimental-Setup\"><a href=\"#Experimental-Setup\" class=\"headerlink\" title=\"Experimental Setup\"></a>Experimental Setup</h3><p>在有限注两轮德州扑克中进行实验，具有 $10^{12}$个节点，$10^9$个信息集。有限注德州扑克具有 $10^{17}个节点，$ $10^{14}$ 个信息集。</p><p>在两个游戏中，与 NFSP 和使用抽象的方法进行比较。</p><h4 id=\"网络结构\"><a href=\"#网络结构\" class=\"headerlink\" title=\"网络结构\"></a>网络结构</h4><p>两个网络采用同样的结构，7层 98948个参数组成。网络的输入为信息集，由卡牌集合和投注历史组成。卡牌有3个embedding层之和进行表示：rank(1-13)，suit(1-4)，card(1-52)。投注历史用一个二进制向量表示是否投注，一个浮点数向量表示投注大小，向量的长度为 6*轮数。</p><p>每一层为全连接层，包括Relu激活函数和跳跃连接，即$x_{i+1}=Relu(Ax+x)$，网络的最后一层特征进行了归一化。</p><p>对于价值网络，输出为每个动作的后悔值。对于平均策略网络，输出为归一化的每个动作选择的概率。</p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1g89epluhdej30if07wwg6.jpg\" alt=\"image.png\"></p><h4 id=\"模型训练\"><a href=\"#模型训练\" class=\"headerlink\" title=\"模型训练\"></a>模型训练</h4><p>对于每个网络的经验回放池分配了 $4∗10^7$信息集的大小。价值网络在每次迭代中随机初始化，重新开始训练，实验证明这比接着训练具有更快的收敛速度。对于两轮版有限注德州扑克，进行了4000次小批量随机梯度下降迭代，batch-size为10000，使用学习率为0.0010.001 的Adam学习器进行优化。对于有限注德州扑克，进行了32000次迭代，batch-size为20000。</p><h4 id=\"Linear-CFR\"><a href=\"#Linear-CFR\" class=\"headerlink\" title=\"Linear CFR\"></a>Linear CFR</h4><p>LInear CFR是在计算时使用迭代次数 $t$ 进行加权，虽然不会收敛到更好的结果，但可以更快地收敛。</p><p>具体而言，在经验回放池中额外保存迭代次数 $t$ ,在每 $T$ 次训练网络时按照 $2/T$进行缩放，我的理解时权重为 $2t/T$。</p><h4 id=\"DeepCFR-算法\"><a href=\"#DeepCFR-算法\" class=\"headerlink\" title=\"DeepCFR 算法\"></a>DeepCFR 算法</h4><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g89ld4tvnmj31160cj41c.jpg\" alt=\"image.png\"></p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g89mscfraaj31190l7q87.jpg\" alt=\"image.png\"></p><h3 id=\"Experimental-Results\"><a href=\"#Experimental-Results\" class=\"headerlink\" title=\"Experimental Results\"></a>Experimental Results</h3><p>在两轮有限注德州扑克环境下实验结果，横坐标是遍历到的节点，纵坐标时可利用性，图中的收敛速度忽视了神经网络训练所花费的时间。</p><p>比较对象:</p><ul><li>Abstraction, 将 $10^9$个节点使用人为设计的特征，利用 K-means 进行聚类，然后再使用外采样线性CFR进行迭代求解。</li><li>Lossless Abstraction。仅将策略无关的节点聚类在一起，比如在顺子牌型中花色无关，该种抽样不会影响最后结果。</li><li>NFSP。深度学习拟合Fictitious Play。</li></ul><p>图像显示结果：</p><ul><li>DeepCFR和最少抽样的方法达到了相同可利用性，但是具有更快的收敛速度。</li><li>由于神经网络的训练，DeepCFR的实际运行时间可能会更长，但是具有不依赖于具体特征的优点。</li></ul><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g89mku3e81j30iu0cq404.jpg\" alt=\"image.png\"></p><p>横坐标为每次迭代中采样的数量，纵坐标为可利用率。采样的数量越少，收敛速度越慢，需要收集更多的数据来减少方差。最后每一种采样方法都能收敛到近似相同的可利用率。</p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1g8ao4vi18kj30ck087t9m.jpg\" alt=\"image.png\"></p><p>横坐标为每次训练网络时进行小批量随机梯度下降的次数。该数值不影响收敛速度，但会影响最后收敛到的可利用率。可能原因时训练次数减少使得网络的拟合能力下降。</p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1g8ao8kpgnsj30cl08dq3r.jpg\" alt=\"image.png\"></p><p>网络模型参数的影响。</p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1g8aobmhw3bj30cr087t8z.jpg\" alt=\"image.png\"></p><p>显示了使用线性加权，从头训练网络，在所有后悔值小于0时随机选择动作的影响。不从头训练网络时最后收敛到的可利用率变大，可能是由于网络陷入了局部最优值。</p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1g8aoey5eesj30el096aaw.jpg\" alt=\"image.png\"></p><p>鱼塘采样和滑动窗口对实验的影响。滑动窗口方法在内存占满后不再继续收敛。</p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1g8aohxsfyuj30em094mxl.jpg\" alt=\"image.png\"></p><h3 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h3><p>将CFR算法与深度神经网络函数拟合相结合，试图在大规模不完全信息游戏中寻找纳什均衡。该方法在理论上可行，与大规模扑克游戏中达到了与使用具体领域知识方法的相似性能。</p><p>将DeepCFR扩展到更大的游戏中，可能需要结合其他方法，如可扩展的采样策略，减少采样的方差。</p><!-- rebuild by neat -->"},{"title":"[论文阅读]DeepStack: Expert-Level Artificial Intelligence in Heads-Up No-Limit Poker","mathjax":true,"date":"2020-01-18T09:09:12.000Z","_content":"\n| 标题 | DeepStack: Expert-Level Artificial Intelligence in Heads-Up No-Limit Poker |\n| ---- | ------------------------------------------------------------ |\n| 团队 | Alberta                                                      |\n| 时间 | 2017                                                         |\n| 出处 | Science                                                      |\n\n## 论文梗概\n\nDeepstack论文于2017年发表在《science》杂志上，主要成果是训练出了达到专家水平的无限注双人德州扑克AI，在举办的比赛中打败了人类专家选手。Deepstack使用的方法是基于CFR算法进行递归思考，处理信息不对称，结合CFR-D算法使用分解来进行局部的计算，避免对完整的博弈树进行遍历，融合深度学习的方法，对一个阶段内的反事实后悔值进行拟合，称之为一种直觉。\n\n## Deep Conterfactual Value Network\n\nDeepstack将博弈树按照德州扑克的四个轮次，划分成了四个阶段，分别称为 pre-flop, flop, turn, river。在flop和turn阶段分别训练了一个神经网络，用了预测该阶段每颗子树的根节点CFV值，在之后每次迭代到根节点时直接使用神经网络进行预测，避免迭代全部博弈树，节省了时间。\n\n除了flop-network和turn-network外，还针对pre-flop的最后一个阶段训练了一个辅助网络。\n\n由于pre-flop的最后一个阶段是发牌阶段，需要发3张公共牌，可能的情况数很多，针对与具体的每一种情况，还需要调用flop-network来计算CFV值，计算量很大。辅助网络对这种情况进行优化计算，对于每一个发牌节点，直接输出加权之后的CFV值。\n\n### 网络输入\n\n神经网络的原始输入为三部分：\n\n- 双方玩家的总加注额与加注上限的比例\n- 双方玩家的隐藏手牌概率分布(range)，即持有每一种手牌的概率\n- 牌桌公共牌\n\n其中range和总加注额可以代表加注序列。\n\n给定了隐藏手牌和公共牌后，可以组合出最强的一手牌，从而可以得到目前最强手牌的概率分布。将所有最强手牌根据牌力特征使用 k 均值进行聚类，最后得到 1000种类别的概率分布。\n\n网络的实际输入为两部分\n\n- 双方玩家的总加注额与加注上限的比例\n- 聚类之后的每种类别的概率分布\n\n由于辅助网络只有169种策略上不同的手牌，对于辅助网络不进行聚类，直接使用最强手牌组合作为输入。\n\n### 网络输出\n\n神经网络的输出为每个玩家每一种可能手牌对应的CFV值。\n\n### 网络结构\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEly1g8qwhnjzg2j30nh0ebtbo.jpg)\n\n神经网络在输入层之后，添加了7个PReLU激活的全连接线性层，得到了聚类之后每一种手牌的价值。之后有添加了一个零和神经网络，使得到到达概率和手牌价值的加权乘积为0。最后输出得到的聚类之后的每一种手牌的CFV值，映射到聚类之前的每种手牌的CFV值。\n\n### 网络训练\n\n所有的神经网络使用Torch7编写，使用Adam随机梯度下降来最小化平均Huber损失。训练采用 1000 mini-batch和 0.001 学习率，在200次epoch后减少到0.001、网络训练了350次epoch，在一个GPU上训练了2天，最后挑选出最少的验证集loss对应的epoch。\n\n### 数据生成\n\n网络输入的总加注额在一个固定分布中进行采样，持有手牌概率使用特定的随机生成算法进行生成，目的是覆盖实际re-solving使用时的各种持有手牌概率。\n\n随机生成算法为一个迭代的过程。假设某一次处理的手牌集合为 SS , 总可能概率为 pp。若集合大小为1，则持有改手牌的概率为 $p$, 否则将集合分成两半$S1,S2$，在$0−p$ 之间生成一个随机数 p1p1, 令 $p_1=p−p_2$, 分别以$p_1,p_2$ 处理手牌集合 $S_1,S_2$。\n\n在得到总加注额和持有手牌概率后，限定动作为fold，call，固定额bet，all-in，进行1000次的CFR+迭代，得到网络的输出CFV值。\n\nTurn神经网络产生了一千万个训练数据，在6144个CPU核心下总计使用175核心年的计算时间进行solve。\n\nFlop神经网络产生了一百万个训练数据，对CFR迭代进行了深度限定，结合Turn神经网络进行预测，在20个GPU下使用了半个GPU年。\n\n辅助神经网络产生了一千万个训练数据，最后的输出值通过遍历22100种可能的发牌情况，结合Flop神经网络进行预测再计算平均值，作为网络的输出数据。\n\n### 网络训练精度\n\n|              | 训练集Huber loss | 验证集Huber loss |\n| ------------ | ---------------- | ---------------- |\n| Turn神经网络 | 0.016            | 0.026            |\n| Flop神经网络 | 0.008            | 0.034            |\n| 辅助神经网络 | 0.000053         | 0.000055         |\n\n### 隐藏层数量\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEly1g8t1sol48zj30fg0ahjrp.jpg)\n\n根据隐藏层数量和Huber loss进行了实验，最后在验证集误差，GPU内存，执行速度之间进行权衡，选择了7个隐藏层数量。可以预见，如果训练数据继续增大，可以选择更大的神经网络来增加网络的拟合能力。\n\n## Continual re-solving\n\nre-solving 是指对一棵子树进行迭代求出纳什均衡策略，不需要对整棵博弈树进行求解。进行re-solving的前提是需要知道到达该棵子树时，自己的range即各种手牌的概率和对方的反事实后悔值。\n\nContinual re-solving是指不断地进行re-solving，每当需要进行决策时，进行一次re-solving，迭代出最优的策略并相应地选择动作，执行完动作后将策略抛弃不再存储。\n\n### Our range and Opponent CFV\n\nrange 和 CFV 在存储时都是一个长度为1326的向量，表示所有私有手牌的情况下对应的值。\n\n在游戏开始时，range为均匀分布，CFV初始化为发到每一种私有手牌时对应的价值。\n\n根据进行决策的玩家不同，分为三种情况进行处理。\n\n- 自己。在求解出策略后，将range和相应动作的策略值相乘并归一化，CFV值保存为对应动作在CFR迭代时得到的CFV值。\n- 对手。不进行任何处理。\n- 发牌。根据不能有两张相同的手牌，将range中与公共牌相同的牌的概率变为0再归一化，CFV值为上一次求解策略时进行CFR迭代得到。\n\n### Opponent Ranges in Re-Solving\n\n不保存对手的Range，而是在Re-Solving时借助Opponent CFV的限制迭代出来。与CFR-D类似，每次进行re-solve前新建一个对手决策的节点，一个决策是到达T节点，收益为Opponent CFV，另一个决策时到达F节点，即该棵子游戏的根。\n\n对于对手Range的一个合理初始化，可以加快迭代的速度。一种方法是以权重b使用前一次计算出来的range，权重1-b使用均匀分布。另一种可能损失精度的方法时以权重b对前一次计算出来的range进行抽样，以该手牌不进行TF决策直接进行计算，以权重1-b使用均匀分布。\n\nDeepstack只对每一轮的第一个动作使用了评估的对手Range初始化。当对手是第一个做动作时，使用了保守的方法，当自己是第一个做动作时，使用了可能损失精度的方法。b定为0.9。\n\n### Sparse Lookahead Trees\n\n直接进行re-solving需要迭代到整棵子树的末尾，仍然需要消耗大量的时间。在每一轮结束时使用训练好的神经网络来拟合CFV值，限制了树的深度。对进行re-solving的动作进行限定，限制了树的宽度。进行re-solving的动作限制为fold， call，2-3个下注额和all-in。\n\n通过深度和宽度的限制，re-solving的子树缩减到了107107个决策点，可以在一块GTX1080显卡的计算下使用少于5秒的时间进行求解。\n\n对于子树的求解使用的是朴素CFR和CFR+的混合。使用了regret matching+，以及在计算平均策略和平均CFV时，忽略掉了CFR的前几次迭代。\n\n#### 具体参数配置\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEly1g8twk943gjj30s406ht9j.jpg)\n\n在pre-flop阶段中，在前几次忽略的CFR迭代中，使用辅助神经网络预测最后的CFV值，之后的CFR迭代中借助flop神经网络直接计算CFV值。此外对于re-solving结果进行保存，当同样的下注序列出现时，重新使用缓存结果而不是重新计算。\n\n在flop阶段中，借助turn神经网络预测最后的CFV值。\n\n在turn阶段中，不适用神经网络进行预测，直接求解整棵子树，对于river阶段的动作进行了聚类抽象。\n\n在river阶段中，直接求解整棵子树。\n\n#### Actions in sparse lookahead tree\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEly1g8twgnm311j30s809ljt0.jpg)\n\n对不同的动作限定对第一层的CFV的影响进行了实验，以限定9个动作和4000次迭代作为基准进行比较。最后比较发现F，C，P，A兼顾了博弈树大小和最后的评估精度。\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEly1g8twog2wk5j30el04yjrp.jpg)\n\n接着又使用LBR方法对于不同的抽象动作进行了比较，Default为Deepstack版本，结果显示Deepstack的策略很难被利用，且增加抽象动作对结果的影响较小。\n\n## Speed of Play\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEly1g8twqtan5gj30ff09vaay.jpg)\n\n## Evaluating\n\n整体求解的目标是逼近纳什均衡策略，即得到一个策略具有较低的可利用性。一般评价的方法有两种。\n\n- 对打。对打为可利用性的比较差的估计，对打成绩高并不能说明可利用性低，比如石头剪刀布中的最优策略和一直出石头策略对打，最后的结局时平局。\n- 直接求可利用性。利用最佳响应直接求可利用性，需要对整棵博弈树进行一次完整的遍历，在对在双人无限注德州扑克中很难做到。\n\n### 与人类玩家对打\n\n由于扑克牌的随机性和策略的随机性，评价策略的好坏具有很大的方差，往往需要大量的对打来得到一个稳定的结果。Deepstack使用了 AIVAT 的方法进行评价，该方法基于精心设计的结构化控制变量，可以证明在不完全信息游戏评价中进行无偏低方差的估计。AIVAT 需要在每个公共状态下获取一个拥有各种手牌的评估值，根据发牌节点和已知策略玩家选择动作的变化而导致估计值的变化，来计算控制变量。通过 AIVAT 方法获得了 85% 标准差的下降，可以在 3000局的游戏中得到统计学上的显著差异。\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEly1g8u3zp10sej30kf0eeq3o.jpg)\n\n### Local Best Response\n\n另一种新提出来的方法为局部最佳相应(LBR)，可以找到可利用性的一个下界。LBR在每一次决策中固定了可以选择的动作。该方法可以有效地利用以前提出的基于抽象的方法。\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEly1g8u3ex9821j30pc0bodht.jpg)\n\n可以看出与之前的方法相比，DeepStack很难被利用。\n\n## Continual re-solving 伪代码\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEgy1g8u423fiodj30sa042mxx.jpg)\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEgy1g8u42aqeg3j30rm0df770.jpg)\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEgy1g8u42se03bj30se0gs422.jpg)\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEgy1g8u438j0omj30s30a5763.jpg)\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEgy1g8u43huyuij30ry08qtag.jpg)","source":"_posts/论文阅读-DeepStack-Expert-Level-Artificial-Intelligence-in-Heads-Up-No-Limit-Poker.md","raw":"---\ntitle: >-\n  [论文阅读]DeepStack: Expert-Level Artificial Intelligence in Heads-Up No-Limit\n  Poker\nmathjax: true\ndate: 2020-01-18 17:09:12\ncategories:\n\t- Paper\ntags:\n\t- Paper\n\t- RL\n\t- CFR\n---\n\n| 标题 | DeepStack: Expert-Level Artificial Intelligence in Heads-Up No-Limit Poker |\n| ---- | ------------------------------------------------------------ |\n| 团队 | Alberta                                                      |\n| 时间 | 2017                                                         |\n| 出处 | Science                                                      |\n\n## 论文梗概\n\nDeepstack论文于2017年发表在《science》杂志上，主要成果是训练出了达到专家水平的无限注双人德州扑克AI，在举办的比赛中打败了人类专家选手。Deepstack使用的方法是基于CFR算法进行递归思考，处理信息不对称，结合CFR-D算法使用分解来进行局部的计算，避免对完整的博弈树进行遍历，融合深度学习的方法，对一个阶段内的反事实后悔值进行拟合，称之为一种直觉。\n\n## Deep Conterfactual Value Network\n\nDeepstack将博弈树按照德州扑克的四个轮次，划分成了四个阶段，分别称为 pre-flop, flop, turn, river。在flop和turn阶段分别训练了一个神经网络，用了预测该阶段每颗子树的根节点CFV值，在之后每次迭代到根节点时直接使用神经网络进行预测，避免迭代全部博弈树，节省了时间。\n\n除了flop-network和turn-network外，还针对pre-flop的最后一个阶段训练了一个辅助网络。\n\n由于pre-flop的最后一个阶段是发牌阶段，需要发3张公共牌，可能的情况数很多，针对与具体的每一种情况，还需要调用flop-network来计算CFV值，计算量很大。辅助网络对这种情况进行优化计算，对于每一个发牌节点，直接输出加权之后的CFV值。\n\n### 网络输入\n\n神经网络的原始输入为三部分：\n\n- 双方玩家的总加注额与加注上限的比例\n- 双方玩家的隐藏手牌概率分布(range)，即持有每一种手牌的概率\n- 牌桌公共牌\n\n其中range和总加注额可以代表加注序列。\n\n给定了隐藏手牌和公共牌后，可以组合出最强的一手牌，从而可以得到目前最强手牌的概率分布。将所有最强手牌根据牌力特征使用 k 均值进行聚类，最后得到 1000种类别的概率分布。\n\n网络的实际输入为两部分\n\n- 双方玩家的总加注额与加注上限的比例\n- 聚类之后的每种类别的概率分布\n\n由于辅助网络只有169种策略上不同的手牌，对于辅助网络不进行聚类，直接使用最强手牌组合作为输入。\n\n### 网络输出\n\n神经网络的输出为每个玩家每一种可能手牌对应的CFV值。\n\n### 网络结构\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEly1g8qwhnjzg2j30nh0ebtbo.jpg)\n\n神经网络在输入层之后，添加了7个PReLU激活的全连接线性层，得到了聚类之后每一种手牌的价值。之后有添加了一个零和神经网络，使得到到达概率和手牌价值的加权乘积为0。最后输出得到的聚类之后的每一种手牌的CFV值，映射到聚类之前的每种手牌的CFV值。\n\n### 网络训练\n\n所有的神经网络使用Torch7编写，使用Adam随机梯度下降来最小化平均Huber损失。训练采用 1000 mini-batch和 0.001 学习率，在200次epoch后减少到0.001、网络训练了350次epoch，在一个GPU上训练了2天，最后挑选出最少的验证集loss对应的epoch。\n\n### 数据生成\n\n网络输入的总加注额在一个固定分布中进行采样，持有手牌概率使用特定的随机生成算法进行生成，目的是覆盖实际re-solving使用时的各种持有手牌概率。\n\n随机生成算法为一个迭代的过程。假设某一次处理的手牌集合为 SS , 总可能概率为 pp。若集合大小为1，则持有改手牌的概率为 $p$, 否则将集合分成两半$S1,S2$，在$0−p$ 之间生成一个随机数 p1p1, 令 $p_1=p−p_2$, 分别以$p_1,p_2$ 处理手牌集合 $S_1,S_2$。\n\n在得到总加注额和持有手牌概率后，限定动作为fold，call，固定额bet，all-in，进行1000次的CFR+迭代，得到网络的输出CFV值。\n\nTurn神经网络产生了一千万个训练数据，在6144个CPU核心下总计使用175核心年的计算时间进行solve。\n\nFlop神经网络产生了一百万个训练数据，对CFR迭代进行了深度限定，结合Turn神经网络进行预测，在20个GPU下使用了半个GPU年。\n\n辅助神经网络产生了一千万个训练数据，最后的输出值通过遍历22100种可能的发牌情况，结合Flop神经网络进行预测再计算平均值，作为网络的输出数据。\n\n### 网络训练精度\n\n|              | 训练集Huber loss | 验证集Huber loss |\n| ------------ | ---------------- | ---------------- |\n| Turn神经网络 | 0.016            | 0.026            |\n| Flop神经网络 | 0.008            | 0.034            |\n| 辅助神经网络 | 0.000053         | 0.000055         |\n\n### 隐藏层数量\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEly1g8t1sol48zj30fg0ahjrp.jpg)\n\n根据隐藏层数量和Huber loss进行了实验，最后在验证集误差，GPU内存，执行速度之间进行权衡，选择了7个隐藏层数量。可以预见，如果训练数据继续增大，可以选择更大的神经网络来增加网络的拟合能力。\n\n## Continual re-solving\n\nre-solving 是指对一棵子树进行迭代求出纳什均衡策略，不需要对整棵博弈树进行求解。进行re-solving的前提是需要知道到达该棵子树时，自己的range即各种手牌的概率和对方的反事实后悔值。\n\nContinual re-solving是指不断地进行re-solving，每当需要进行决策时，进行一次re-solving，迭代出最优的策略并相应地选择动作，执行完动作后将策略抛弃不再存储。\n\n### Our range and Opponent CFV\n\nrange 和 CFV 在存储时都是一个长度为1326的向量，表示所有私有手牌的情况下对应的值。\n\n在游戏开始时，range为均匀分布，CFV初始化为发到每一种私有手牌时对应的价值。\n\n根据进行决策的玩家不同，分为三种情况进行处理。\n\n- 自己。在求解出策略后，将range和相应动作的策略值相乘并归一化，CFV值保存为对应动作在CFR迭代时得到的CFV值。\n- 对手。不进行任何处理。\n- 发牌。根据不能有两张相同的手牌，将range中与公共牌相同的牌的概率变为0再归一化，CFV值为上一次求解策略时进行CFR迭代得到。\n\n### Opponent Ranges in Re-Solving\n\n不保存对手的Range，而是在Re-Solving时借助Opponent CFV的限制迭代出来。与CFR-D类似，每次进行re-solve前新建一个对手决策的节点，一个决策是到达T节点，收益为Opponent CFV，另一个决策时到达F节点，即该棵子游戏的根。\n\n对于对手Range的一个合理初始化，可以加快迭代的速度。一种方法是以权重b使用前一次计算出来的range，权重1-b使用均匀分布。另一种可能损失精度的方法时以权重b对前一次计算出来的range进行抽样，以该手牌不进行TF决策直接进行计算，以权重1-b使用均匀分布。\n\nDeepstack只对每一轮的第一个动作使用了评估的对手Range初始化。当对手是第一个做动作时，使用了保守的方法，当自己是第一个做动作时，使用了可能损失精度的方法。b定为0.9。\n\n### Sparse Lookahead Trees\n\n直接进行re-solving需要迭代到整棵子树的末尾，仍然需要消耗大量的时间。在每一轮结束时使用训练好的神经网络来拟合CFV值，限制了树的深度。对进行re-solving的动作进行限定，限制了树的宽度。进行re-solving的动作限制为fold， call，2-3个下注额和all-in。\n\n通过深度和宽度的限制，re-solving的子树缩减到了107107个决策点，可以在一块GTX1080显卡的计算下使用少于5秒的时间进行求解。\n\n对于子树的求解使用的是朴素CFR和CFR+的混合。使用了regret matching+，以及在计算平均策略和平均CFV时，忽略掉了CFR的前几次迭代。\n\n#### 具体参数配置\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEly1g8twk943gjj30s406ht9j.jpg)\n\n在pre-flop阶段中，在前几次忽略的CFR迭代中，使用辅助神经网络预测最后的CFV值，之后的CFR迭代中借助flop神经网络直接计算CFV值。此外对于re-solving结果进行保存，当同样的下注序列出现时，重新使用缓存结果而不是重新计算。\n\n在flop阶段中，借助turn神经网络预测最后的CFV值。\n\n在turn阶段中，不适用神经网络进行预测，直接求解整棵子树，对于river阶段的动作进行了聚类抽象。\n\n在river阶段中，直接求解整棵子树。\n\n#### Actions in sparse lookahead tree\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEly1g8twgnm311j30s809ljt0.jpg)\n\n对不同的动作限定对第一层的CFV的影响进行了实验，以限定9个动作和4000次迭代作为基准进行比较。最后比较发现F，C，P，A兼顾了博弈树大小和最后的评估精度。\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEly1g8twog2wk5j30el04yjrp.jpg)\n\n接着又使用LBR方法对于不同的抽象动作进行了比较，Default为Deepstack版本，结果显示Deepstack的策略很难被利用，且增加抽象动作对结果的影响较小。\n\n## Speed of Play\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEly1g8twqtan5gj30ff09vaay.jpg)\n\n## Evaluating\n\n整体求解的目标是逼近纳什均衡策略，即得到一个策略具有较低的可利用性。一般评价的方法有两种。\n\n- 对打。对打为可利用性的比较差的估计，对打成绩高并不能说明可利用性低，比如石头剪刀布中的最优策略和一直出石头策略对打，最后的结局时平局。\n- 直接求可利用性。利用最佳响应直接求可利用性，需要对整棵博弈树进行一次完整的遍历，在对在双人无限注德州扑克中很难做到。\n\n### 与人类玩家对打\n\n由于扑克牌的随机性和策略的随机性，评价策略的好坏具有很大的方差，往往需要大量的对打来得到一个稳定的结果。Deepstack使用了 AIVAT 的方法进行评价，该方法基于精心设计的结构化控制变量，可以证明在不完全信息游戏评价中进行无偏低方差的估计。AIVAT 需要在每个公共状态下获取一个拥有各种手牌的评估值，根据发牌节点和已知策略玩家选择动作的变化而导致估计值的变化，来计算控制变量。通过 AIVAT 方法获得了 85% 标准差的下降，可以在 3000局的游戏中得到统计学上的显著差异。\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEly1g8u3zp10sej30kf0eeq3o.jpg)\n\n### Local Best Response\n\n另一种新提出来的方法为局部最佳相应(LBR)，可以找到可利用性的一个下界。LBR在每一次决策中固定了可以选择的动作。该方法可以有效地利用以前提出的基于抽象的方法。\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEly1g8u3ex9821j30pc0bodht.jpg)\n\n可以看出与之前的方法相比，DeepStack很难被利用。\n\n## Continual re-solving 伪代码\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEgy1g8u423fiodj30sa042mxx.jpg)\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEgy1g8u42aqeg3j30rm0df770.jpg)\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEgy1g8u42se03bj30se0gs422.jpg)\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEgy1g8u438j0omj30s30a5763.jpg)\n\n![image.png](https://ww1.sinaimg.cn/large/006A69aEgy1g8u43huyuij30ry08qtag.jpg)","slug":"论文阅读-DeepStack-Expert-Level-Artificial-Intelligence-in-Heads-Up-No-Limit-Poker","published":1,"updated":"2020-01-18T09:12:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5kuwy2j001wgz4deinuv517","content":"<!-- build time:Sun Jan 19 2020 18:07:22 GMT+0800 (GMT+08:00) --><div class=\"table-container\"><table><thead><tr><th>标题</th><th>DeepStack: Expert-Level Artificial Intelligence in Heads-Up No-Limit Poker</th></tr></thead><tbody><tr><td>团队</td><td>Alberta</td></tr><tr><td>时间</td><td>2017</td></tr><tr><td>出处</td><td>Science</td></tr></tbody></table></div><h2 id=\"论文梗概\"><a href=\"#论文梗概\" class=\"headerlink\" title=\"论文梗概\"></a>论文梗概</h2><p>Deepstack论文于2017年发表在《science》杂志上，主要成果是训练出了达到专家水平的无限注双人德州扑克AI，在举办的比赛中打败了人类专家选手。Deepstack使用的方法是基于CFR算法进行递归思考，处理信息不对称，结合CFR-D算法使用分解来进行局部的计算，避免对完整的博弈树进行遍历，融合深度学习的方法，对一个阶段内的反事实后悔值进行拟合，称之为一种直觉。</p><h2 id=\"Deep-Conterfactual-Value-Network\"><a href=\"#Deep-Conterfactual-Value-Network\" class=\"headerlink\" title=\"Deep Conterfactual Value Network\"></a>Deep Conterfactual Value Network</h2><p>Deepstack将博弈树按照德州扑克的四个轮次，划分成了四个阶段，分别称为 pre-flop, flop, turn, river。在flop和turn阶段分别训练了一个神经网络，用了预测该阶段每颗子树的根节点CFV值，在之后每次迭代到根节点时直接使用神经网络进行预测，避免迭代全部博弈树，节省了时间。</p><p>除了flop-network和turn-network外，还针对pre-flop的最后一个阶段训练了一个辅助网络。</p><p>由于pre-flop的最后一个阶段是发牌阶段，需要发3张公共牌，可能的情况数很多，针对与具体的每一种情况，还需要调用flop-network来计算CFV值，计算量很大。辅助网络对这种情况进行优化计算，对于每一个发牌节点，直接输出加权之后的CFV值。</p><h3 id=\"网络输入\"><a href=\"#网络输入\" class=\"headerlink\" title=\"网络输入\"></a>网络输入</h3><p>神经网络的原始输入为三部分：</p><ul><li>双方玩家的总加注额与加注上限的比例</li><li>双方玩家的隐藏手牌概率分布(range)，即持有每一种手牌的概率</li><li>牌桌公共牌</li></ul><p>其中range和总加注额可以代表加注序列。</p><p>给定了隐藏手牌和公共牌后，可以组合出最强的一手牌，从而可以得到目前最强手牌的概率分布。将所有最强手牌根据牌力特征使用 k 均值进行聚类，最后得到 1000种类别的概率分布。</p><p>网络的实际输入为两部分</p><ul><li>双方玩家的总加注额与加注上限的比例</li><li>聚类之后的每种类别的概率分布</li></ul><p>由于辅助网络只有169种策略上不同的手牌，对于辅助网络不进行聚类，直接使用最强手牌组合作为输入。</p><h3 id=\"网络输出\"><a href=\"#网络输出\" class=\"headerlink\" title=\"网络输出\"></a>网络输出</h3><p>神经网络的输出为每个玩家每一种可能手牌对应的CFV值。</p><h3 id=\"网络结构\"><a href=\"#网络结构\" class=\"headerlink\" title=\"网络结构\"></a>网络结构</h3><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g8qwhnjzg2j30nh0ebtbo.jpg\" alt=\"image.png\"></p><p>神经网络在输入层之后，添加了7个PReLU激活的全连接线性层，得到了聚类之后每一种手牌的价值。之后有添加了一个零和神经网络，使得到到达概率和手牌价值的加权乘积为0。最后输出得到的聚类之后的每一种手牌的CFV值，映射到聚类之前的每种手牌的CFV值。</p><h3 id=\"网络训练\"><a href=\"#网络训练\" class=\"headerlink\" title=\"网络训练\"></a>网络训练</h3><p>所有的神经网络使用Torch7编写，使用Adam随机梯度下降来最小化平均Huber损失。训练采用 1000 mini-batch和 0.001 学习率，在200次epoch后减少到0.001、网络训练了350次epoch，在一个GPU上训练了2天，最后挑选出最少的验证集loss对应的epoch。</p><h3 id=\"数据生成\"><a href=\"#数据生成\" class=\"headerlink\" title=\"数据生成\"></a>数据生成</h3><p>网络输入的总加注额在一个固定分布中进行采样，持有手牌概率使用特定的随机生成算法进行生成，目的是覆盖实际re-solving使用时的各种持有手牌概率。</p><p>随机生成算法为一个迭代的过程。假设某一次处理的手牌集合为 SS , 总可能概率为 pp。若集合大小为1，则持有改手牌的概率为 $p$, 否则将集合分成两半$S1,S2$，在$0−p$ 之间生成一个随机数 p1p1, 令 $p_1=p−p_2$, 分别以$p_1,p_2$ 处理手牌集合 $S_1,S_2$。</p><p>在得到总加注额和持有手牌概率后，限定动作为fold，call，固定额bet，all-in，进行1000次的CFR+迭代，得到网络的输出CFV值。</p><p>Turn神经网络产生了一千万个训练数据，在6144个CPU核心下总计使用175核心年的计算时间进行solve。</p><p>Flop神经网络产生了一百万个训练数据，对CFR迭代进行了深度限定，结合Turn神经网络进行预测，在20个GPU下使用了半个GPU年。</p><p>辅助神经网络产生了一千万个训练数据，最后的输出值通过遍历22100种可能的发牌情况，结合Flop神经网络进行预测再计算平均值，作为网络的输出数据。</p><h3 id=\"网络训练精度\"><a href=\"#网络训练精度\" class=\"headerlink\" title=\"网络训练精度\"></a>网络训练精度</h3><div class=\"table-container\"><table><thead><tr><th></th><th>训练集Huber loss</th><th>验证集Huber loss</th></tr></thead><tbody><tr><td>Turn神经网络</td><td>0.016</td><td>0.026</td></tr><tr><td>Flop神经网络</td><td>0.008</td><td>0.034</td></tr><tr><td>辅助神经网络</td><td>0.000053</td><td>0.000055</td></tr></tbody></table></div><h3 id=\"隐藏层数量\"><a href=\"#隐藏层数量\" class=\"headerlink\" title=\"隐藏层数量\"></a>隐藏层数量</h3><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g8t1sol48zj30fg0ahjrp.jpg\" alt=\"image.png\"></p><p>根据隐藏层数量和Huber loss进行了实验，最后在验证集误差，GPU内存，执行速度之间进行权衡，选择了7个隐藏层数量。可以预见，如果训练数据继续增大，可以选择更大的神经网络来增加网络的拟合能力。</p><h2 id=\"Continual-re-solving\"><a href=\"#Continual-re-solving\" class=\"headerlink\" title=\"Continual re-solving\"></a>Continual re-solving</h2><p>re-solving 是指对一棵子树进行迭代求出纳什均衡策略，不需要对整棵博弈树进行求解。进行re-solving的前提是需要知道到达该棵子树时，自己的range即各种手牌的概率和对方的反事实后悔值。</p><p>Continual re-solving是指不断地进行re-solving，每当需要进行决策时，进行一次re-solving，迭代出最优的策略并相应地选择动作，执行完动作后将策略抛弃不再存储。</p><h3 id=\"Our-range-and-Opponent-CFV\"><a href=\"#Our-range-and-Opponent-CFV\" class=\"headerlink\" title=\"Our range and Opponent CFV\"></a>Our range and Opponent CFV</h3><p>range 和 CFV 在存储时都是一个长度为1326的向量，表示所有私有手牌的情况下对应的值。</p><p>在游戏开始时，range为均匀分布，CFV初始化为发到每一种私有手牌时对应的价值。</p><p>根据进行决策的玩家不同，分为三种情况进行处理。</p><ul><li>自己。在求解出策略后，将range和相应动作的策略值相乘并归一化，CFV值保存为对应动作在CFR迭代时得到的CFV值。</li><li>对手。不进行任何处理。</li><li>发牌。根据不能有两张相同的手牌，将range中与公共牌相同的牌的概率变为0再归一化，CFV值为上一次求解策略时进行CFR迭代得到。</li></ul><h3 id=\"Opponent-Ranges-in-Re-Solving\"><a href=\"#Opponent-Ranges-in-Re-Solving\" class=\"headerlink\" title=\"Opponent Ranges in Re-Solving\"></a>Opponent Ranges in Re-Solving</h3><p>不保存对手的Range，而是在Re-Solving时借助Opponent CFV的限制迭代出来。与CFR-D类似，每次进行re-solve前新建一个对手决策的节点，一个决策是到达T节点，收益为Opponent CFV，另一个决策时到达F节点，即该棵子游戏的根。</p><p>对于对手Range的一个合理初始化，可以加快迭代的速度。一种方法是以权重b使用前一次计算出来的range，权重1-b使用均匀分布。另一种可能损失精度的方法时以权重b对前一次计算出来的range进行抽样，以该手牌不进行TF决策直接进行计算，以权重1-b使用均匀分布。</p><p>Deepstack只对每一轮的第一个动作使用了评估的对手Range初始化。当对手是第一个做动作时，使用了保守的方法，当自己是第一个做动作时，使用了可能损失精度的方法。b定为0.9。</p><h3 id=\"Sparse-Lookahead-Trees\"><a href=\"#Sparse-Lookahead-Trees\" class=\"headerlink\" title=\"Sparse Lookahead Trees\"></a>Sparse Lookahead Trees</h3><p>直接进行re-solving需要迭代到整棵子树的末尾，仍然需要消耗大量的时间。在每一轮结束时使用训练好的神经网络来拟合CFV值，限制了树的深度。对进行re-solving的动作进行限定，限制了树的宽度。进行re-solving的动作限制为fold， call，2-3个下注额和all-in。</p><p>通过深度和宽度的限制，re-solving的子树缩减到了107107个决策点，可以在一块GTX1080显卡的计算下使用少于5秒的时间进行求解。</p><p>对于子树的求解使用的是朴素CFR和CFR+的混合。使用了regret matching+，以及在计算平均策略和平均CFV时，忽略掉了CFR的前几次迭代。</p><h4 id=\"具体参数配置\"><a href=\"#具体参数配置\" class=\"headerlink\" title=\"具体参数配置\"></a>具体参数配置</h4><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g8twk943gjj30s406ht9j.jpg\" alt=\"image.png\"></p><p>在pre-flop阶段中，在前几次忽略的CFR迭代中，使用辅助神经网络预测最后的CFV值，之后的CFR迭代中借助flop神经网络直接计算CFV值。此外对于re-solving结果进行保存，当同样的下注序列出现时，重新使用缓存结果而不是重新计算。</p><p>在flop阶段中，借助turn神经网络预测最后的CFV值。</p><p>在turn阶段中，不适用神经网络进行预测，直接求解整棵子树，对于river阶段的动作进行了聚类抽象。</p><p>在river阶段中，直接求解整棵子树。</p><h4 id=\"Actions-in-sparse-lookahead-tree\"><a href=\"#Actions-in-sparse-lookahead-tree\" class=\"headerlink\" title=\"Actions in sparse lookahead tree\"></a>Actions in sparse lookahead tree</h4><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g8twgnm311j30s809ljt0.jpg\" alt=\"image.png\"></p><p>对不同的动作限定对第一层的CFV的影响进行了实验，以限定9个动作和4000次迭代作为基准进行比较。最后比较发现F，C，P，A兼顾了博弈树大小和最后的评估精度。</p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g8twog2wk5j30el04yjrp.jpg\" alt=\"image.png\"></p><p>接着又使用LBR方法对于不同的抽象动作进行了比较，Default为Deepstack版本，结果显示Deepstack的策略很难被利用，且增加抽象动作对结果的影响较小。</p><h2 id=\"Speed-of-Play\"><a href=\"#Speed-of-Play\" class=\"headerlink\" title=\"Speed of Play\"></a>Speed of Play</h2><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g8twqtan5gj30ff09vaay.jpg\" alt=\"image.png\"></p><h2 id=\"Evaluating\"><a href=\"#Evaluating\" class=\"headerlink\" title=\"Evaluating\"></a>Evaluating</h2><p>整体求解的目标是逼近纳什均衡策略，即得到一个策略具有较低的可利用性。一般评价的方法有两种。</p><ul><li>对打。对打为可利用性的比较差的估计，对打成绩高并不能说明可利用性低，比如石头剪刀布中的最优策略和一直出石头策略对打，最后的结局时平局。</li><li>直接求可利用性。利用最佳响应直接求可利用性，需要对整棵博弈树进行一次完整的遍历，在对在双人无限注德州扑克中很难做到。</li></ul><h3 id=\"与人类玩家对打\"><a href=\"#与人类玩家对打\" class=\"headerlink\" title=\"与人类玩家对打\"></a>与人类玩家对打</h3><p>由于扑克牌的随机性和策略的随机性，评价策略的好坏具有很大的方差，往往需要大量的对打来得到一个稳定的结果。Deepstack使用了 AIVAT 的方法进行评价，该方法基于精心设计的结构化控制变量，可以证明在不完全信息游戏评价中进行无偏低方差的估计。AIVAT 需要在每个公共状态下获取一个拥有各种手牌的评估值，根据发牌节点和已知策略玩家选择动作的变化而导致估计值的变化，来计算控制变量。通过 AIVAT 方法获得了 85% 标准差的下降，可以在 3000局的游戏中得到统计学上的显著差异。</p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g8u3zp10sej30kf0eeq3o.jpg\" alt=\"image.png\"></p><h3 id=\"Local-Best-Response\"><a href=\"#Local-Best-Response\" class=\"headerlink\" title=\"Local Best Response\"></a>Local Best Response</h3><p>另一种新提出来的方法为局部最佳相应(LBR)，可以找到可利用性的一个下界。LBR在每一次决策中固定了可以选择的动作。该方法可以有效地利用以前提出的基于抽象的方法。</p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g8u3ex9821j30pc0bodht.jpg\" alt=\"image.png\"></p><p>可以看出与之前的方法相比，DeepStack很难被利用。</p><h2 id=\"Continual-re-solving-伪代码\"><a href=\"#Continual-re-solving-伪代码\" class=\"headerlink\" title=\"Continual re-solving 伪代码\"></a>Continual re-solving 伪代码</h2><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1g8u423fiodj30sa042mxx.jpg\" alt=\"image.png\"></p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1g8u42aqeg3j30rm0df770.jpg\" alt=\"image.png\"></p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1g8u42se03bj30se0gs422.jpg\" alt=\"image.png\"></p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1g8u438j0omj30s30a5763.jpg\" alt=\"image.png\"></p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1g8u43huyuij30ry08qtag.jpg\" alt=\"image.png\"></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sun Jan 19 2020 18:07:22 GMT+0800 (GMT+08:00) --><div class=\"table-container\"><table><thead><tr><th>标题</th><th>DeepStack: Expert-Level Artificial Intelligence in Heads-Up No-Limit Poker</th></tr></thead><tbody><tr><td>团队</td><td>Alberta</td></tr><tr><td>时间</td><td>2017</td></tr><tr><td>出处</td><td>Science</td></tr></tbody></table></div><h2 id=\"论文梗概\"><a href=\"#论文梗概\" class=\"headerlink\" title=\"论文梗概\"></a>论文梗概</h2><p>Deepstack论文于2017年发表在《science》杂志上，主要成果是训练出了达到专家水平的无限注双人德州扑克AI，在举办的比赛中打败了人类专家选手。Deepstack使用的方法是基于CFR算法进行递归思考，处理信息不对称，结合CFR-D算法使用分解来进行局部的计算，避免对完整的博弈树进行遍历，融合深度学习的方法，对一个阶段内的反事实后悔值进行拟合，称之为一种直觉。</p><h2 id=\"Deep-Conterfactual-Value-Network\"><a href=\"#Deep-Conterfactual-Value-Network\" class=\"headerlink\" title=\"Deep Conterfactual Value Network\"></a>Deep Conterfactual Value Network</h2><p>Deepstack将博弈树按照德州扑克的四个轮次，划分成了四个阶段，分别称为 pre-flop, flop, turn, river。在flop和turn阶段分别训练了一个神经网络，用了预测该阶段每颗子树的根节点CFV值，在之后每次迭代到根节点时直接使用神经网络进行预测，避免迭代全部博弈树，节省了时间。</p><p>除了flop-network和turn-network外，还针对pre-flop的最后一个阶段训练了一个辅助网络。</p><p>由于pre-flop的最后一个阶段是发牌阶段，需要发3张公共牌，可能的情况数很多，针对与具体的每一种情况，还需要调用flop-network来计算CFV值，计算量很大。辅助网络对这种情况进行优化计算，对于每一个发牌节点，直接输出加权之后的CFV值。</p><h3 id=\"网络输入\"><a href=\"#网络输入\" class=\"headerlink\" title=\"网络输入\"></a>网络输入</h3><p>神经网络的原始输入为三部分：</p><ul><li>双方玩家的总加注额与加注上限的比例</li><li>双方玩家的隐藏手牌概率分布(range)，即持有每一种手牌的概率</li><li>牌桌公共牌</li></ul><p>其中range和总加注额可以代表加注序列。</p><p>给定了隐藏手牌和公共牌后，可以组合出最强的一手牌，从而可以得到目前最强手牌的概率分布。将所有最强手牌根据牌力特征使用 k 均值进行聚类，最后得到 1000种类别的概率分布。</p><p>网络的实际输入为两部分</p><ul><li>双方玩家的总加注额与加注上限的比例</li><li>聚类之后的每种类别的概率分布</li></ul><p>由于辅助网络只有169种策略上不同的手牌，对于辅助网络不进行聚类，直接使用最强手牌组合作为输入。</p><h3 id=\"网络输出\"><a href=\"#网络输出\" class=\"headerlink\" title=\"网络输出\"></a>网络输出</h3><p>神经网络的输出为每个玩家每一种可能手牌对应的CFV值。</p><h3 id=\"网络结构\"><a href=\"#网络结构\" class=\"headerlink\" title=\"网络结构\"></a>网络结构</h3><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g8qwhnjzg2j30nh0ebtbo.jpg\" alt=\"image.png\"></p><p>神经网络在输入层之后，添加了7个PReLU激活的全连接线性层，得到了聚类之后每一种手牌的价值。之后有添加了一个零和神经网络，使得到到达概率和手牌价值的加权乘积为0。最后输出得到的聚类之后的每一种手牌的CFV值，映射到聚类之前的每种手牌的CFV值。</p><h3 id=\"网络训练\"><a href=\"#网络训练\" class=\"headerlink\" title=\"网络训练\"></a>网络训练</h3><p>所有的神经网络使用Torch7编写，使用Adam随机梯度下降来最小化平均Huber损失。训练采用 1000 mini-batch和 0.001 学习率，在200次epoch后减少到0.001、网络训练了350次epoch，在一个GPU上训练了2天，最后挑选出最少的验证集loss对应的epoch。</p><h3 id=\"数据生成\"><a href=\"#数据生成\" class=\"headerlink\" title=\"数据生成\"></a>数据生成</h3><p>网络输入的总加注额在一个固定分布中进行采样，持有手牌概率使用特定的随机生成算法进行生成，目的是覆盖实际re-solving使用时的各种持有手牌概率。</p><p>随机生成算法为一个迭代的过程。假设某一次处理的手牌集合为 SS , 总可能概率为 pp。若集合大小为1，则持有改手牌的概率为 $p$, 否则将集合分成两半$S1,S2$，在$0−p$ 之间生成一个随机数 p1p1, 令 $p_1=p−p_2$, 分别以$p_1,p_2$ 处理手牌集合 $S_1,S_2$。</p><p>在得到总加注额和持有手牌概率后，限定动作为fold，call，固定额bet，all-in，进行1000次的CFR+迭代，得到网络的输出CFV值。</p><p>Turn神经网络产生了一千万个训练数据，在6144个CPU核心下总计使用175核心年的计算时间进行solve。</p><p>Flop神经网络产生了一百万个训练数据，对CFR迭代进行了深度限定，结合Turn神经网络进行预测，在20个GPU下使用了半个GPU年。</p><p>辅助神经网络产生了一千万个训练数据，最后的输出值通过遍历22100种可能的发牌情况，结合Flop神经网络进行预测再计算平均值，作为网络的输出数据。</p><h3 id=\"网络训练精度\"><a href=\"#网络训练精度\" class=\"headerlink\" title=\"网络训练精度\"></a>网络训练精度</h3><div class=\"table-container\"><table><thead><tr><th></th><th>训练集Huber loss</th><th>验证集Huber loss</th></tr></thead><tbody><tr><td>Turn神经网络</td><td>0.016</td><td>0.026</td></tr><tr><td>Flop神经网络</td><td>0.008</td><td>0.034</td></tr><tr><td>辅助神经网络</td><td>0.000053</td><td>0.000055</td></tr></tbody></table></div><h3 id=\"隐藏层数量\"><a href=\"#隐藏层数量\" class=\"headerlink\" title=\"隐藏层数量\"></a>隐藏层数量</h3><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g8t1sol48zj30fg0ahjrp.jpg\" alt=\"image.png\"></p><p>根据隐藏层数量和Huber loss进行了实验，最后在验证集误差，GPU内存，执行速度之间进行权衡，选择了7个隐藏层数量。可以预见，如果训练数据继续增大，可以选择更大的神经网络来增加网络的拟合能力。</p><h2 id=\"Continual-re-solving\"><a href=\"#Continual-re-solving\" class=\"headerlink\" title=\"Continual re-solving\"></a>Continual re-solving</h2><p>re-solving 是指对一棵子树进行迭代求出纳什均衡策略，不需要对整棵博弈树进行求解。进行re-solving的前提是需要知道到达该棵子树时，自己的range即各种手牌的概率和对方的反事实后悔值。</p><p>Continual re-solving是指不断地进行re-solving，每当需要进行决策时，进行一次re-solving，迭代出最优的策略并相应地选择动作，执行完动作后将策略抛弃不再存储。</p><h3 id=\"Our-range-and-Opponent-CFV\"><a href=\"#Our-range-and-Opponent-CFV\" class=\"headerlink\" title=\"Our range and Opponent CFV\"></a>Our range and Opponent CFV</h3><p>range 和 CFV 在存储时都是一个长度为1326的向量，表示所有私有手牌的情况下对应的值。</p><p>在游戏开始时，range为均匀分布，CFV初始化为发到每一种私有手牌时对应的价值。</p><p>根据进行决策的玩家不同，分为三种情况进行处理。</p><ul><li>自己。在求解出策略后，将range和相应动作的策略值相乘并归一化，CFV值保存为对应动作在CFR迭代时得到的CFV值。</li><li>对手。不进行任何处理。</li><li>发牌。根据不能有两张相同的手牌，将range中与公共牌相同的牌的概率变为0再归一化，CFV值为上一次求解策略时进行CFR迭代得到。</li></ul><h3 id=\"Opponent-Ranges-in-Re-Solving\"><a href=\"#Opponent-Ranges-in-Re-Solving\" class=\"headerlink\" title=\"Opponent Ranges in Re-Solving\"></a>Opponent Ranges in Re-Solving</h3><p>不保存对手的Range，而是在Re-Solving时借助Opponent CFV的限制迭代出来。与CFR-D类似，每次进行re-solve前新建一个对手决策的节点，一个决策是到达T节点，收益为Opponent CFV，另一个决策时到达F节点，即该棵子游戏的根。</p><p>对于对手Range的一个合理初始化，可以加快迭代的速度。一种方法是以权重b使用前一次计算出来的range，权重1-b使用均匀分布。另一种可能损失精度的方法时以权重b对前一次计算出来的range进行抽样，以该手牌不进行TF决策直接进行计算，以权重1-b使用均匀分布。</p><p>Deepstack只对每一轮的第一个动作使用了评估的对手Range初始化。当对手是第一个做动作时，使用了保守的方法，当自己是第一个做动作时，使用了可能损失精度的方法。b定为0.9。</p><h3 id=\"Sparse-Lookahead-Trees\"><a href=\"#Sparse-Lookahead-Trees\" class=\"headerlink\" title=\"Sparse Lookahead Trees\"></a>Sparse Lookahead Trees</h3><p>直接进行re-solving需要迭代到整棵子树的末尾，仍然需要消耗大量的时间。在每一轮结束时使用训练好的神经网络来拟合CFV值，限制了树的深度。对进行re-solving的动作进行限定，限制了树的宽度。进行re-solving的动作限制为fold， call，2-3个下注额和all-in。</p><p>通过深度和宽度的限制，re-solving的子树缩减到了107107个决策点，可以在一块GTX1080显卡的计算下使用少于5秒的时间进行求解。</p><p>对于子树的求解使用的是朴素CFR和CFR+的混合。使用了regret matching+，以及在计算平均策略和平均CFV时，忽略掉了CFR的前几次迭代。</p><h4 id=\"具体参数配置\"><a href=\"#具体参数配置\" class=\"headerlink\" title=\"具体参数配置\"></a>具体参数配置</h4><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g8twk943gjj30s406ht9j.jpg\" alt=\"image.png\"></p><p>在pre-flop阶段中，在前几次忽略的CFR迭代中，使用辅助神经网络预测最后的CFV值，之后的CFR迭代中借助flop神经网络直接计算CFV值。此外对于re-solving结果进行保存，当同样的下注序列出现时，重新使用缓存结果而不是重新计算。</p><p>在flop阶段中，借助turn神经网络预测最后的CFV值。</p><p>在turn阶段中，不适用神经网络进行预测，直接求解整棵子树，对于river阶段的动作进行了聚类抽象。</p><p>在river阶段中，直接求解整棵子树。</p><h4 id=\"Actions-in-sparse-lookahead-tree\"><a href=\"#Actions-in-sparse-lookahead-tree\" class=\"headerlink\" title=\"Actions in sparse lookahead tree\"></a>Actions in sparse lookahead tree</h4><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g8twgnm311j30s809ljt0.jpg\" alt=\"image.png\"></p><p>对不同的动作限定对第一层的CFV的影响进行了实验，以限定9个动作和4000次迭代作为基准进行比较。最后比较发现F，C，P，A兼顾了博弈树大小和最后的评估精度。</p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g8twog2wk5j30el04yjrp.jpg\" alt=\"image.png\"></p><p>接着又使用LBR方法对于不同的抽象动作进行了比较，Default为Deepstack版本，结果显示Deepstack的策略很难被利用，且增加抽象动作对结果的影响较小。</p><h2 id=\"Speed-of-Play\"><a href=\"#Speed-of-Play\" class=\"headerlink\" title=\"Speed of Play\"></a>Speed of Play</h2><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g8twqtan5gj30ff09vaay.jpg\" alt=\"image.png\"></p><h2 id=\"Evaluating\"><a href=\"#Evaluating\" class=\"headerlink\" title=\"Evaluating\"></a>Evaluating</h2><p>整体求解的目标是逼近纳什均衡策略，即得到一个策略具有较低的可利用性。一般评价的方法有两种。</p><ul><li>对打。对打为可利用性的比较差的估计，对打成绩高并不能说明可利用性低，比如石头剪刀布中的最优策略和一直出石头策略对打，最后的结局时平局。</li><li>直接求可利用性。利用最佳响应直接求可利用性，需要对整棵博弈树进行一次完整的遍历，在对在双人无限注德州扑克中很难做到。</li></ul><h3 id=\"与人类玩家对打\"><a href=\"#与人类玩家对打\" class=\"headerlink\" title=\"与人类玩家对打\"></a>与人类玩家对打</h3><p>由于扑克牌的随机性和策略的随机性，评价策略的好坏具有很大的方差，往往需要大量的对打来得到一个稳定的结果。Deepstack使用了 AIVAT 的方法进行评价，该方法基于精心设计的结构化控制变量，可以证明在不完全信息游戏评价中进行无偏低方差的估计。AIVAT 需要在每个公共状态下获取一个拥有各种手牌的评估值，根据发牌节点和已知策略玩家选择动作的变化而导致估计值的变化，来计算控制变量。通过 AIVAT 方法获得了 85% 标准差的下降，可以在 3000局的游戏中得到统计学上的显著差异。</p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g8u3zp10sej30kf0eeq3o.jpg\" alt=\"image.png\"></p><h3 id=\"Local-Best-Response\"><a href=\"#Local-Best-Response\" class=\"headerlink\" title=\"Local Best Response\"></a>Local Best Response</h3><p>另一种新提出来的方法为局部最佳相应(LBR)，可以找到可利用性的一个下界。LBR在每一次决策中固定了可以选择的动作。该方法可以有效地利用以前提出的基于抽象的方法。</p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g8u3ex9821j30pc0bodht.jpg\" alt=\"image.png\"></p><p>可以看出与之前的方法相比，DeepStack很难被利用。</p><h2 id=\"Continual-re-solving-伪代码\"><a href=\"#Continual-re-solving-伪代码\" class=\"headerlink\" title=\"Continual re-solving 伪代码\"></a>Continual re-solving 伪代码</h2><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1g8u423fiodj30sa042mxx.jpg\" alt=\"image.png\"></p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1g8u42aqeg3j30rm0df770.jpg\" alt=\"image.png\"></p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1g8u42se03bj30se0gs422.jpg\" alt=\"image.png\"></p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1g8u438j0omj30s30a5763.jpg\" alt=\"image.png\"></p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1g8u43huyuij30ry08qtag.jpg\" alt=\"image.png\"></p><!-- rebuild by neat -->"},{"title":"[论文阅读]Regret Minimization in Games with Incomplete Information","mathjax":true,"date":"2019-10-15T04:27:36.000Z","_content":"\n| 标题 | Regret Minimization in Games with Incomplete Information |\n| ---- | -------------------------------------------------------- |\n| 团队 | Alberta                                                  |\n| 时间 | 2008                                                     |\n| 出处 | nips                                                     |\n\n###  论文梗概\n\n该论文的作者为阿尔伯塔大学的团队，该团队在扑克博弈方面有着深厚的积累，之前发表的DeepStack论文也是出自该作者，之后也要抽时间读一下那篇论文。\n\n该论文主要提出了CFR算法，为双人博弈中寻找纳什均衡解提供了一种通过自我博弈迭代的方法，提供了理论上界证明，在双人有限注德州扑克对弈中进行了实验。CFR算法十分重要，之后的发展大多是在此基础上进行改进。\n\n### 背景知识\n\n对于扑克这一类游戏，可以归纳为不完全信息的扩展式博弈。扩展式博弈是指多个玩家轮流进行决策，而不是同时进行决策。不完全信息是指，与围棋、象棋不同，每个玩家对于场面上的信息不是完全掌握，具体在扑克中就是不知道对方的手牌。所以可以将信息分为私有信息和公共信息，私有信息就是玩家的手牌，公共信息就是公共牌和双方玩家的动作序列。\n\n针对于扩展式博弈轮流进行决策的特性，可以建立出一棵博弈树，博弈树的每条边对应于玩家的一种决策。对于非玩家进行决策的内容，将其抽象为一个玩家，称为chance，可以理解成运气成分。\n\n![2019-10-15 12-59-16 的屏幕截图.png](https://ww1.sinaimg.cn/large/006A69aEly1g7ysspbhu0j30hq0d575c.jpg)\n\n在博弈树中一个重要概念就是信息集，我的理解是对于每个人而言，将所有其具有同样信息的节点聚合起来，称为信息集。就扑克而言，同一个信息集的两个状态，具有相同的初始手牌和双方相同的动作序列，唯一的不同在于对手的手牌不同，但这一点对于本方玩家是不知道的，所以具有相同信息集。信息集的重要意义在于可以为这些状态制定一个统一的策略，这也符合人类制定策略的直觉。即当我们掌握相同的信息时，制定的策略一般都是相同的。\n\n策略就是对于玩家在某个信息集下，执行每一种动作的可能，也就是对于可行动作的概率分布。讲所有玩家的策略组合在一起，就是一个策略组合，当一个策略组合确定下来后，就可以求出博弈树下到达每一个节点的概率了。\n\n进行一场博弈肯定会有输赢，博弈树中的所有节点就是终止节点，可以根据游戏规则计算出输赢的金钱，也就是该节点的收益。当确定了概率组合之后，也就可以算出每个玩家的总体期望收益了。\n\n在制定博弈策略时，两个重要策略是最佳应对策略和纳什均衡策略。\n\n最佳应对策略是指假设对手的策略固定，那么找一个策略使得我能赢的期望收益最大，这个策略就是最佳应对策略。\n\n纳什均衡策略是指双方的策略达到了一种动态均衡，互相为对方的最佳应对策略，假如某一方改变策略，必定会损失金钱。\n\n评价一个策略的好坏的一个指标是可利用性。可利用性是指对方采用最佳应对策略与我的策略进行对打，对方的期望收益是多少。可利用性越低，说明我们在实际中输的可能性越小。当可利用性为0时，就说明我的策略是那是纳什均衡策略，无论对方的策略是什么，我都能保证我不会输钱。\n\n由于双人扑克博弈时零和博弈，所以在纳什均衡解下双方的金币为0。\n\n下面用一些数学符号来定义这些概念。\n\n| 符号                                                         | 意义                                                         |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| $N = {0, 1, ... n - 1}$                                      | 玩家集合                                                     |\n| $H $                                                         | 历史动作序列，也可以看成状态，博弈树上的每一个点             |\n| $Z,\\; Z \\subseteq H$                                         | 叶子节点集合                                                 |\n| $P(h) \\in N \\cup \\{c\\}$                                      | 定义了每一个状态的行动者，可能为玩家或者chance               |\n| $f_c(a \\vert h)$                                             | 在状态h下，行动玩家为 $P(h)=c$ , 执行动作 $a$ 的概率         |\n| $I_i \\subseteq \\{h\\in H:p(h)=i\\}$                            | 信息集，为所有决策玩家为i的决策点的一个划分，信息集之间互不相交。 |\n| $u_i(z)$                                                     | 为叶子节点 $z$ 对于玩家 $i$ 的收益                           |\n| $\\triangle_{u, i} = max_zu_i(z) - min_z u_i(z)$              | 玩家i的收益范围                                              |\n| $\\sigma_i(a\\vert I)$                                         | 玩家i的策略                                                  |\n| $\\pi^\\sigma(h)$                                              | 在策略组合$\\sigma$ 下到达状态h的概率                         |\n| $\\pi_i^\\sigma(h)$                                            | 在策略组合$\\sigma$下玩家i的策略对到达状态h的概率的贡献       |\n| $\\pi_{-i}^\\sigma(h)$                                         | 在策略组合$\\sigma$下其他玩家的策略对到达状态h的概率的贡献    |\n| $\\pi^\\sigma(I) = \\sum_{h\\in I}\\pi^\\sigma(h)$                 | 在策略组合$\\sigma$ 下到达信息集I的概率                       |\n| $u_i(\\sigma)=\\sum_{h\\in Z}u_i(h)\\pi^\\sigma(h)$               | 策略组合下玩家i的期望收益                                    |\n| $u_1(\\sigma^\\star) = \\max_{\\sigma_1'\\in\\Sigma_1}u_1(\\sigma_1', \\sigma_2)$ | 对于$\\sigma_2$的最佳应对策略                                 |\n\n### 后悔值最小化\n\n后悔值最小化是一个在线方法，用来求解纳什均衡的通用方法，在每一次迭代中，寻找一个最佳策略，使得用这个策略去和前几轮的的对手打，获得的平均收益最大。\n\n定义平均总后悔值为\n$$\nR_i^T = \\frac{1}{T}\\max_{\\sigma_i^*\\in\\Sigma_i}\\sum_{t=1}^T (u_i(\\sigma_i^*,\\sigma_{-i}^t) - u_i(\\sigma^t))\n$$\n再定义平均策略\n$$\n\\overline{\\sigma}_i^t(a|I) = \\frac{\\sum_{t=1}^T\\pi_i^{\\sigma^t}(I)\\sigma^t(a|I)}{\\sum_{t=1}^T\\pi_i^{\\sigma^t}(I)}\n$$\n\n> 定理: 当平均总后悔值小于 $\\epsilon$ ，平均策略为 $2\\epsilon$ 纳什均衡策略。\n\n所以，如果能最小化平均总后悔值，就等于找到求解纳什均衡的一种方法，\n\n### 反事实后悔值\n\n定义反事实收益为在达到信息集I的前提下，所有玩家使用策略组合$\\sigma$ ，玩家i使用固定到达信息机 $I$ 的策略下的 期望收益。\n$$\nu_i(\\sigma, I) = \\frac{\\sum_{h\\in I, z\\in Z}\\pi^\\sigma_{-i}(h)\\pi^\\sigma(h, z)u_i(z)}{\\pi_{-i}^\\sigma(I)}\n$$\n定义 $\\sigma\\vert_{I \\to a}$ 表示玩家$i$ 在信息机$I$ 下改变策略选择动作 $a$，其他玩家不变。则立刻反事实后悔值为\n$$\nR_{i, imm}^T(I) = \\frac{1}{T}\\max_{a\\in A(I)} \\sum_{t=1}^T \\pi_{-i}^{\\sigma^t}(I)(u_i(\\sigma^t\\vert_{I\\to a}, I) - u_i(\\sigma^t, I))\n$$\n\n$$\nR_{i, imm}^{T, +} = max(R_{i, imm}^T, 0)\n$$\n\n> 定理: $R_i^T \\le \\sum_{I \\in I_i} R_{i, imm}^{T, +}(I)$\n\n由该定理可知最小化立刻反事实后悔值之和，就可以最小化平均总后悔值，也就是在逼近纳什均衡策略。\n\n 立刻反事实后悔值的好处是，可以通过策略的迭代来最小化该后悔值。\n\n对于所有信息集的每一个动作，维护\n$$\nR_i^T(I, a) = \\frac{1}{T}  \\sum_{t=1}^T \\pi_{-i}^{\\sigma^t}(I)(u_i(\\sigma^t\\vert_{I\\to a}, a) - u_i(\\sigma^t, I))\n$$\n则策略迭代方式为根据该后悔值的大小按比例分配，若所有后悔值的大小都小于0，则随机挑选动作，具体而言\n$$\n\\sigma_i^{T+1}(a \\vert I) = \\left\\{\n\\begin{aligned}\n&\\frac{R_i^{T,+}(I, a)}{\\sum_{a\\in A(I)}R_i^{T, +}(I, a)}  & &if \\; \\Sigma_{a\\in A(i)} R_i^{T, +}(I, a) > 0\\\\\n&\\frac{1}{\\vert A(I) \\vert}  &  & otherwise \n\\end{aligned}\n\\right.\n$$\n\n> 定理: $R_{i, imm} ^T \\le \\triangle_{u, i}\\sqrt{\\vert A_i} \\vert / \\sqrt{T}$,   $R_i^T \\le \\triangle_{u, i}\\vert I_i \\vert\\sqrt{\\vert A_i} \\vert / \\sqrt{T}$\n\n### 双人德州扑克应用\n\n分为两个步骤进行，首先对游戏进行抽象，将游戏状态进行缩减，再使用CFR算法求解。\n\n在进行抽象时，不改变下注结构，而是对卡牌进行抽象。将卡牌按照牌力大小的平方分成10组，使用平方的原因时当牌力越大时，人们对于自己可能会赢越自信。\n\n### 实验结果\n\n#### 计算方法\n\n在德州扑克中，双方的博弈胜负结果用 mbb/h 表示，mbb 表示大盲下注的千分之一，h表示每一手，整体含义是平均每局能赢钱数与大盲下注量的比例。\n\n一般来说小盲下注量为50， 大盲下注量为100，则在双人中每把牌都fold的结果是 750 mbb/h。如果双方对战结果是 10mbb/h, 那么在统计上来说打一百万场才有 95%的胜率。\n\n可利用性可以认为是与纳什均衡之间的差距，但是在大博弈树下直接计算十分困难，一般采用和较高水准的对手进行多次博弈，计算mbb/h来衡量。虽然策略之间不存在传递性，但是可以大概衡量策略的好坏。\n\n在抽象游戏下，计算可利用性的复杂度降低，但是计算出来的可利用性并不等于原空间下的可利用性。\n\n该论文 通过 $2*10^9$ 次迭代，在抽象空间中达到了 2.2 mbb/h。\n\n#### 收敛速度\n\n![2019-10-15 15-09-24 的屏幕截图.png](https://ww1.sinaimg.cn/large/006A69aEgy1g7ywj2njd2j30ve0e0aby.jpg)\n\n对于抽象组数进行了比较，抽象组数可以表示状态空间/信息集的大小，认为收敛所需的迭代次数与状态空间成线性关系，为之前的定理提供依据。\n\n#### 对战比较\n\n![2019-10-15 15-12-29 的屏幕截图.png](https://ww1.sinaimg.cn/large/006A69aEgy1g7ywmhii7xj30pg08habl.jpg)\n\n将CFR和当时流行的方法进行对战。\n\n### 结论\n\n提出了一种在扩展式博弈中的新的后悔值——反事实后悔值。通过最小化反事实后悔值，可以最小化总后悔值，并且提出了一种通用的方法来有效的最小化反事实后悔值。在扑克中验证了这种方法，表明这种方法可以在$10^{12}$的状态空间下计算出近似纳什均衡。","source":"_posts/论文阅读-Regret-Minimization-in-Games-with-Incomplete-Information.md","raw":"---\ntitle: '[论文阅读]Regret Minimization in Games with Incomplete Information'\nmathjax: true\ndate: 2019-10-15 12:27:36\ncategories: Paper\ntags: \n    - RL\n    - Paper\n    - CFR\n---\n\n| 标题 | Regret Minimization in Games with Incomplete Information |\n| ---- | -------------------------------------------------------- |\n| 团队 | Alberta                                                  |\n| 时间 | 2008                                                     |\n| 出处 | nips                                                     |\n\n###  论文梗概\n\n该论文的作者为阿尔伯塔大学的团队，该团队在扑克博弈方面有着深厚的积累，之前发表的DeepStack论文也是出自该作者，之后也要抽时间读一下那篇论文。\n\n该论文主要提出了CFR算法，为双人博弈中寻找纳什均衡解提供了一种通过自我博弈迭代的方法，提供了理论上界证明，在双人有限注德州扑克对弈中进行了实验。CFR算法十分重要，之后的发展大多是在此基础上进行改进。\n\n### 背景知识\n\n对于扑克这一类游戏，可以归纳为不完全信息的扩展式博弈。扩展式博弈是指多个玩家轮流进行决策，而不是同时进行决策。不完全信息是指，与围棋、象棋不同，每个玩家对于场面上的信息不是完全掌握，具体在扑克中就是不知道对方的手牌。所以可以将信息分为私有信息和公共信息，私有信息就是玩家的手牌，公共信息就是公共牌和双方玩家的动作序列。\n\n针对于扩展式博弈轮流进行决策的特性，可以建立出一棵博弈树，博弈树的每条边对应于玩家的一种决策。对于非玩家进行决策的内容，将其抽象为一个玩家，称为chance，可以理解成运气成分。\n\n![2019-10-15 12-59-16 的屏幕截图.png](https://ww1.sinaimg.cn/large/006A69aEly1g7ysspbhu0j30hq0d575c.jpg)\n\n在博弈树中一个重要概念就是信息集，我的理解是对于每个人而言，将所有其具有同样信息的节点聚合起来，称为信息集。就扑克而言，同一个信息集的两个状态，具有相同的初始手牌和双方相同的动作序列，唯一的不同在于对手的手牌不同，但这一点对于本方玩家是不知道的，所以具有相同信息集。信息集的重要意义在于可以为这些状态制定一个统一的策略，这也符合人类制定策略的直觉。即当我们掌握相同的信息时，制定的策略一般都是相同的。\n\n策略就是对于玩家在某个信息集下，执行每一种动作的可能，也就是对于可行动作的概率分布。讲所有玩家的策略组合在一起，就是一个策略组合，当一个策略组合确定下来后，就可以求出博弈树下到达每一个节点的概率了。\n\n进行一场博弈肯定会有输赢，博弈树中的所有节点就是终止节点，可以根据游戏规则计算出输赢的金钱，也就是该节点的收益。当确定了概率组合之后，也就可以算出每个玩家的总体期望收益了。\n\n在制定博弈策略时，两个重要策略是最佳应对策略和纳什均衡策略。\n\n最佳应对策略是指假设对手的策略固定，那么找一个策略使得我能赢的期望收益最大，这个策略就是最佳应对策略。\n\n纳什均衡策略是指双方的策略达到了一种动态均衡，互相为对方的最佳应对策略，假如某一方改变策略，必定会损失金钱。\n\n评价一个策略的好坏的一个指标是可利用性。可利用性是指对方采用最佳应对策略与我的策略进行对打，对方的期望收益是多少。可利用性越低，说明我们在实际中输的可能性越小。当可利用性为0时，就说明我的策略是那是纳什均衡策略，无论对方的策略是什么，我都能保证我不会输钱。\n\n由于双人扑克博弈时零和博弈，所以在纳什均衡解下双方的金币为0。\n\n下面用一些数学符号来定义这些概念。\n\n| 符号                                                         | 意义                                                         |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| $N = {0, 1, ... n - 1}$                                      | 玩家集合                                                     |\n| $H $                                                         | 历史动作序列，也可以看成状态，博弈树上的每一个点             |\n| $Z,\\; Z \\subseteq H$                                         | 叶子节点集合                                                 |\n| $P(h) \\in N \\cup \\{c\\}$                                      | 定义了每一个状态的行动者，可能为玩家或者chance               |\n| $f_c(a \\vert h)$                                             | 在状态h下，行动玩家为 $P(h)=c$ , 执行动作 $a$ 的概率         |\n| $I_i \\subseteq \\{h\\in H:p(h)=i\\}$                            | 信息集，为所有决策玩家为i的决策点的一个划分，信息集之间互不相交。 |\n| $u_i(z)$                                                     | 为叶子节点 $z$ 对于玩家 $i$ 的收益                           |\n| $\\triangle_{u, i} = max_zu_i(z) - min_z u_i(z)$              | 玩家i的收益范围                                              |\n| $\\sigma_i(a\\vert I)$                                         | 玩家i的策略                                                  |\n| $\\pi^\\sigma(h)$                                              | 在策略组合$\\sigma$ 下到达状态h的概率                         |\n| $\\pi_i^\\sigma(h)$                                            | 在策略组合$\\sigma$下玩家i的策略对到达状态h的概率的贡献       |\n| $\\pi_{-i}^\\sigma(h)$                                         | 在策略组合$\\sigma$下其他玩家的策略对到达状态h的概率的贡献    |\n| $\\pi^\\sigma(I) = \\sum_{h\\in I}\\pi^\\sigma(h)$                 | 在策略组合$\\sigma$ 下到达信息集I的概率                       |\n| $u_i(\\sigma)=\\sum_{h\\in Z}u_i(h)\\pi^\\sigma(h)$               | 策略组合下玩家i的期望收益                                    |\n| $u_1(\\sigma^\\star) = \\max_{\\sigma_1'\\in\\Sigma_1}u_1(\\sigma_1', \\sigma_2)$ | 对于$\\sigma_2$的最佳应对策略                                 |\n\n### 后悔值最小化\n\n后悔值最小化是一个在线方法，用来求解纳什均衡的通用方法，在每一次迭代中，寻找一个最佳策略，使得用这个策略去和前几轮的的对手打，获得的平均收益最大。\n\n定义平均总后悔值为\n$$\nR_i^T = \\frac{1}{T}\\max_{\\sigma_i^*\\in\\Sigma_i}\\sum_{t=1}^T (u_i(\\sigma_i^*,\\sigma_{-i}^t) - u_i(\\sigma^t))\n$$\n再定义平均策略\n$$\n\\overline{\\sigma}_i^t(a|I) = \\frac{\\sum_{t=1}^T\\pi_i^{\\sigma^t}(I)\\sigma^t(a|I)}{\\sum_{t=1}^T\\pi_i^{\\sigma^t}(I)}\n$$\n\n> 定理: 当平均总后悔值小于 $\\epsilon$ ，平均策略为 $2\\epsilon$ 纳什均衡策略。\n\n所以，如果能最小化平均总后悔值，就等于找到求解纳什均衡的一种方法，\n\n### 反事实后悔值\n\n定义反事实收益为在达到信息集I的前提下，所有玩家使用策略组合$\\sigma$ ，玩家i使用固定到达信息机 $I$ 的策略下的 期望收益。\n$$\nu_i(\\sigma, I) = \\frac{\\sum_{h\\in I, z\\in Z}\\pi^\\sigma_{-i}(h)\\pi^\\sigma(h, z)u_i(z)}{\\pi_{-i}^\\sigma(I)}\n$$\n定义 $\\sigma\\vert_{I \\to a}$ 表示玩家$i$ 在信息机$I$ 下改变策略选择动作 $a$，其他玩家不变。则立刻反事实后悔值为\n$$\nR_{i, imm}^T(I) = \\frac{1}{T}\\max_{a\\in A(I)} \\sum_{t=1}^T \\pi_{-i}^{\\sigma^t}(I)(u_i(\\sigma^t\\vert_{I\\to a}, I) - u_i(\\sigma^t, I))\n$$\n\n$$\nR_{i, imm}^{T, +} = max(R_{i, imm}^T, 0)\n$$\n\n> 定理: $R_i^T \\le \\sum_{I \\in I_i} R_{i, imm}^{T, +}(I)$\n\n由该定理可知最小化立刻反事实后悔值之和，就可以最小化平均总后悔值，也就是在逼近纳什均衡策略。\n\n 立刻反事实后悔值的好处是，可以通过策略的迭代来最小化该后悔值。\n\n对于所有信息集的每一个动作，维护\n$$\nR_i^T(I, a) = \\frac{1}{T}  \\sum_{t=1}^T \\pi_{-i}^{\\sigma^t}(I)(u_i(\\sigma^t\\vert_{I\\to a}, a) - u_i(\\sigma^t, I))\n$$\n则策略迭代方式为根据该后悔值的大小按比例分配，若所有后悔值的大小都小于0，则随机挑选动作，具体而言\n$$\n\\sigma_i^{T+1}(a \\vert I) = \\left\\{\n\\begin{aligned}\n&\\frac{R_i^{T,+}(I, a)}{\\sum_{a\\in A(I)}R_i^{T, +}(I, a)}  & &if \\; \\Sigma_{a\\in A(i)} R_i^{T, +}(I, a) > 0\\\\\n&\\frac{1}{\\vert A(I) \\vert}  &  & otherwise \n\\end{aligned}\n\\right.\n$$\n\n> 定理: $R_{i, imm} ^T \\le \\triangle_{u, i}\\sqrt{\\vert A_i} \\vert / \\sqrt{T}$,   $R_i^T \\le \\triangle_{u, i}\\vert I_i \\vert\\sqrt{\\vert A_i} \\vert / \\sqrt{T}$\n\n### 双人德州扑克应用\n\n分为两个步骤进行，首先对游戏进行抽象，将游戏状态进行缩减，再使用CFR算法求解。\n\n在进行抽象时，不改变下注结构，而是对卡牌进行抽象。将卡牌按照牌力大小的平方分成10组，使用平方的原因时当牌力越大时，人们对于自己可能会赢越自信。\n\n### 实验结果\n\n#### 计算方法\n\n在德州扑克中，双方的博弈胜负结果用 mbb/h 表示，mbb 表示大盲下注的千分之一，h表示每一手，整体含义是平均每局能赢钱数与大盲下注量的比例。\n\n一般来说小盲下注量为50， 大盲下注量为100，则在双人中每把牌都fold的结果是 750 mbb/h。如果双方对战结果是 10mbb/h, 那么在统计上来说打一百万场才有 95%的胜率。\n\n可利用性可以认为是与纳什均衡之间的差距，但是在大博弈树下直接计算十分困难，一般采用和较高水准的对手进行多次博弈，计算mbb/h来衡量。虽然策略之间不存在传递性，但是可以大概衡量策略的好坏。\n\n在抽象游戏下，计算可利用性的复杂度降低，但是计算出来的可利用性并不等于原空间下的可利用性。\n\n该论文 通过 $2*10^9$ 次迭代，在抽象空间中达到了 2.2 mbb/h。\n\n#### 收敛速度\n\n![2019-10-15 15-09-24 的屏幕截图.png](https://ww1.sinaimg.cn/large/006A69aEgy1g7ywj2njd2j30ve0e0aby.jpg)\n\n对于抽象组数进行了比较，抽象组数可以表示状态空间/信息集的大小，认为收敛所需的迭代次数与状态空间成线性关系，为之前的定理提供依据。\n\n#### 对战比较\n\n![2019-10-15 15-12-29 的屏幕截图.png](https://ww1.sinaimg.cn/large/006A69aEgy1g7ywmhii7xj30pg08habl.jpg)\n\n将CFR和当时流行的方法进行对战。\n\n### 结论\n\n提出了一种在扩展式博弈中的新的后悔值——反事实后悔值。通过最小化反事实后悔值，可以最小化总后悔值，并且提出了一种通用的方法来有效的最小化反事实后悔值。在扑克中验证了这种方法，表明这种方法可以在$10^{12}$的状态空间下计算出近似纳什均衡。","slug":"论文阅读-Regret-Minimization-in-Games-with-Incomplete-Information","published":1,"updated":"2020-01-16T02:48:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5kuwy2n001zgz4d9x5w5hgt","content":"<!-- build time:Sun Jan 19 2020 18:07:22 GMT+0800 (GMT+08:00) --><div class=\"table-container\"><table><thead><tr><th>标题</th><th>Regret Minimization in Games with Incomplete Information</th></tr></thead><tbody><tr><td>团队</td><td>Alberta</td></tr><tr><td>时间</td><td>2008</td></tr><tr><td>出处</td><td>nips</td></tr></tbody></table></div><h3 id=\"论文梗概\"><a href=\"#论文梗概\" class=\"headerlink\" title=\"论文梗概\"></a>论文梗概</h3><p>该论文的作者为阿尔伯塔大学的团队，该团队在扑克博弈方面有着深厚的积累，之前发表的DeepStack论文也是出自该作者，之后也要抽时间读一下那篇论文。</p><p>该论文主要提出了CFR算法，为双人博弈中寻找纳什均衡解提供了一种通过自我博弈迭代的方法，提供了理论上界证明，在双人有限注德州扑克对弈中进行了实验。CFR算法十分重要，之后的发展大多是在此基础上进行改进。</p><h3 id=\"背景知识\"><a href=\"#背景知识\" class=\"headerlink\" title=\"背景知识\"></a>背景知识</h3><p>对于扑克这一类游戏，可以归纳为不完全信息的扩展式博弈。扩展式博弈是指多个玩家轮流进行决策，而不是同时进行决策。不完全信息是指，与围棋、象棋不同，每个玩家对于场面上的信息不是完全掌握，具体在扑克中就是不知道对方的手牌。所以可以将信息分为私有信息和公共信息，私有信息就是玩家的手牌，公共信息就是公共牌和双方玩家的动作序列。</p><p>针对于扩展式博弈轮流进行决策的特性，可以建立出一棵博弈树，博弈树的每条边对应于玩家的一种决策。对于非玩家进行决策的内容，将其抽象为一个玩家，称为chance，可以理解成运气成分。</p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g7ysspbhu0j30hq0d575c.jpg\" alt=\"2019-10-15 12-59-16 的屏幕截图.png\"></p><p>在博弈树中一个重要概念就是信息集，我的理解是对于每个人而言，将所有其具有同样信息的节点聚合起来，称为信息集。就扑克而言，同一个信息集的两个状态，具有相同的初始手牌和双方相同的动作序列，唯一的不同在于对手的手牌不同，但这一点对于本方玩家是不知道的，所以具有相同信息集。信息集的重要意义在于可以为这些状态制定一个统一的策略，这也符合人类制定策略的直觉。即当我们掌握相同的信息时，制定的策略一般都是相同的。</p><p>策略就是对于玩家在某个信息集下，执行每一种动作的可能，也就是对于可行动作的概率分布。讲所有玩家的策略组合在一起，就是一个策略组合，当一个策略组合确定下来后，就可以求出博弈树下到达每一个节点的概率了。</p><p>进行一场博弈肯定会有输赢，博弈树中的所有节点就是终止节点，可以根据游戏规则计算出输赢的金钱，也就是该节点的收益。当确定了概率组合之后，也就可以算出每个玩家的总体期望收益了。</p><p>在制定博弈策略时，两个重要策略是最佳应对策略和纳什均衡策略。</p><p>最佳应对策略是指假设对手的策略固定，那么找一个策略使得我能赢的期望收益最大，这个策略就是最佳应对策略。</p><p>纳什均衡策略是指双方的策略达到了一种动态均衡，互相为对方的最佳应对策略，假如某一方改变策略，必定会损失金钱。</p><p>评价一个策略的好坏的一个指标是可利用性。可利用性是指对方采用最佳应对策略与我的策略进行对打，对方的期望收益是多少。可利用性越低，说明我们在实际中输的可能性越小。当可利用性为0时，就说明我的策略是那是纳什均衡策略，无论对方的策略是什么，我都能保证我不会输钱。</p><p>由于双人扑克博弈时零和博弈，所以在纳什均衡解下双方的金币为0。</p><p>下面用一些数学符号来定义这些概念。</p><div class=\"table-container\"><table><thead><tr><th>符号</th><th>意义</th></tr></thead><tbody><tr><td>$N = {0, 1, … n - 1}$</td><td>玩家集合</td></tr><tr><td>$H $</td><td>历史动作序列，也可以看成状态，博弈树上的每一个点</td></tr><tr><td>$Z,\\; Z \\subseteq H$</td><td>叶子节点集合</td></tr><tr><td>$P(h) \\in N \\cup \\{c\\}$</td><td>定义了每一个状态的行动者，可能为玩家或者chance</td></tr><tr><td>$f_c(a \\vert h)$</td><td>在状态h下，行动玩家为 $P(h)=c$ , 执行动作 $a$ 的概率</td></tr><tr><td>$I_i \\subseteq \\{h\\in H:p(h)=i\\}$</td><td>信息集，为所有决策玩家为i的决策点的一个划分，信息集之间互不相交。</td></tr><tr><td>$u_i(z)$</td><td>为叶子节点 $z$ 对于玩家 $i$ 的收益</td></tr><tr><td>$\\triangle_{u, i} = max_zu_i(z) - min_z u_i(z)$</td><td>玩家i的收益范围</td></tr><tr><td>$\\sigma_i(a\\vert I)$</td><td>玩家i的策略</td></tr><tr><td>$\\pi^\\sigma(h)$</td><td>在策略组合$\\sigma$ 下到达状态h的概率</td></tr><tr><td>$\\pi_i^\\sigma(h)$</td><td>在策略组合$\\sigma$下玩家i的策略对到达状态h的概率的贡献</td></tr><tr><td>$\\pi_{-i}^\\sigma(h)$</td><td>在策略组合$\\sigma$下其他玩家的策略对到达状态h的概率的贡献</td></tr><tr><td>$\\pi^\\sigma(I) = \\sum_{h\\in I}\\pi^\\sigma(h)$</td><td>在策略组合$\\sigma$ 下到达信息集I的概率</td></tr><tr><td>$u_i(\\sigma)=\\sum_{h\\in Z}u_i(h)\\pi^\\sigma(h)$</td><td>策略组合下玩家i的期望收益</td></tr><tr><td>$u_1(\\sigma^\\star) = \\max_{\\sigma_1’\\in\\Sigma_1}u_1(\\sigma_1’, \\sigma_2)$</td><td>对于$\\sigma_2$的最佳应对策略</td></tr></tbody></table></div><h3 id=\"后悔值最小化\"><a href=\"#后悔值最小化\" class=\"headerlink\" title=\"后悔值最小化\"></a>后悔值最小化</h3><p>后悔值最小化是一个在线方法，用来求解纳什均衡的通用方法，在每一次迭代中，寻找一个最佳策略，使得用这个策略去和前几轮的的对手打，获得的平均收益最大。</p><p>定义平均总后悔值为</p><script type=\"math/tex;mode=display\">R_i^T = \\frac{1}{T}\\max_{\\sigma_i^*\\in\\Sigma_i}\\sum_{t=1}^T (u_i(\\sigma_i^*,\\sigma_{-i}^t) - u_i(\\sigma^t))</script><p>再定义平均策略</p><script type=\"math/tex;mode=display\">\\overline{\\sigma}_i^t(a|I) = \\frac{\\sum_{t=1}^T\\pi_i^{\\sigma^t}(I)\\sigma^t(a|I)}{\\sum_{t=1}^T\\pi_i^{\\sigma^t}(I)}</script><blockquote><p>定理: 当平均总后悔值小于 $\\epsilon$ ，平均策略为 $2\\epsilon$ 纳什均衡策略。</p></blockquote><p>所以，如果能最小化平均总后悔值，就等于找到求解纳什均衡的一种方法，</p><h3 id=\"反事实后悔值\"><a href=\"#反事实后悔值\" class=\"headerlink\" title=\"反事实后悔值\"></a>反事实后悔值</h3><p>定义反事实收益为在达到信息集I的前提下，所有玩家使用策略组合$\\sigma$ ，玩家i使用固定到达信息机 $I$ 的策略下的 期望收益。</p><script type=\"math/tex;mode=display\">u_i(\\sigma, I) = \\frac{\\sum_{h\\in I, z\\in Z}\\pi^\\sigma_{-i}(h)\\pi^\\sigma(h, z)u_i(z)}{\\pi_{-i}^\\sigma(I)}</script><p>定义 $\\sigma\\vert_{I \\to a}$ 表示玩家$i$ 在信息机$I$ 下改变策略选择动作 $a$，其他玩家不变。则立刻反事实后悔值为</p><script type=\"math/tex;mode=display\">R_{i, imm}^T(I) = \\frac{1}{T}\\max_{a\\in A(I)} \\sum_{t=1}^T \\pi_{-i}^{\\sigma^t}(I)(u_i(\\sigma^t\\vert_{I\\to a}, I) - u_i(\\sigma^t, I))</script><script type=\"math/tex;mode=display\">R_{i, imm}^{T, +} = max(R_{i, imm}^T, 0)</script><blockquote><p>定理: $R_i^T \\le \\sum_{I \\in I_i} R_{i, imm}^{T, +}(I)$</p></blockquote><p>由该定理可知最小化立刻反事实后悔值之和，就可以最小化平均总后悔值，也就是在逼近纳什均衡策略。</p><p>立刻反事实后悔值的好处是，可以通过策略的迭代来最小化该后悔值。</p><p>对于所有信息集的每一个动作，维护</p><script type=\"math/tex;mode=display\">R_i^T(I, a) = \\frac{1}{T}  \\sum_{t=1}^T \\pi_{-i}^{\\sigma^t}(I)(u_i(\\sigma^t\\vert_{I\\to a}, a) - u_i(\\sigma^t, I))</script><p>则策略迭代方式为根据该后悔值的大小按比例分配，若所有后悔值的大小都小于0，则随机挑选动作，具体而言</p><script type=\"math/tex;mode=display\">\\sigma_i^{T+1}(a \\vert I) = \\left\\{\n\\begin{aligned}\n&\\frac{R_i^{T,+}(I, a)}{\\sum_{a\\in A(I)}R_i^{T, +}(I, a)}  & &if \\; \\Sigma_{a\\in A(i)} R_i^{T, +}(I, a) > 0\\\\\n&\\frac{1}{\\vert A(I) \\vert}  &  & otherwise \n\\end{aligned}\n\\right.</script><blockquote><p>定理: $R_{i, imm} ^T \\le \\triangle_{u, i}\\sqrt{\\vert A_i} \\vert / \\sqrt{T}$, $R_i^T \\le \\triangle_{u, i}\\vert I_i \\vert\\sqrt{\\vert A_i} \\vert / \\sqrt{T}$</p></blockquote><h3 id=\"双人德州扑克应用\"><a href=\"#双人德州扑克应用\" class=\"headerlink\" title=\"双人德州扑克应用\"></a>双人德州扑克应用</h3><p>分为两个步骤进行，首先对游戏进行抽象，将游戏状态进行缩减，再使用CFR算法求解。</p><p>在进行抽象时，不改变下注结构，而是对卡牌进行抽象。将卡牌按照牌力大小的平方分成10组，使用平方的原因时当牌力越大时，人们对于自己可能会赢越自信。</p><h3 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h3><h4 id=\"计算方法\"><a href=\"#计算方法\" class=\"headerlink\" title=\"计算方法\"></a>计算方法</h4><p>在德州扑克中，双方的博弈胜负结果用 mbb/h 表示，mbb 表示大盲下注的千分之一，h表示每一手，整体含义是平均每局能赢钱数与大盲下注量的比例。</p><p>一般来说小盲下注量为50， 大盲下注量为100，则在双人中每把牌都fold的结果是 750 mbb/h。如果双方对战结果是 10mbb/h, 那么在统计上来说打一百万场才有 95%的胜率。</p><p>可利用性可以认为是与纳什均衡之间的差距，但是在大博弈树下直接计算十分困难，一般采用和较高水准的对手进行多次博弈，计算mbb/h来衡量。虽然策略之间不存在传递性，但是可以大概衡量策略的好坏。</p><p>在抽象游戏下，计算可利用性的复杂度降低，但是计算出来的可利用性并不等于原空间下的可利用性。</p><p>该论文 通过 $2*10^9$ 次迭代，在抽象空间中达到了 2.2 mbb/h。</p><h4 id=\"收敛速度\"><a href=\"#收敛速度\" class=\"headerlink\" title=\"收敛速度\"></a>收敛速度</h4><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1g7ywj2njd2j30ve0e0aby.jpg\" alt=\"2019-10-15 15-09-24 的屏幕截图.png\"></p><p>对于抽象组数进行了比较，抽象组数可以表示状态空间/信息集的大小，认为收敛所需的迭代次数与状态空间成线性关系，为之前的定理提供依据。</p><h4 id=\"对战比较\"><a href=\"#对战比较\" class=\"headerlink\" title=\"对战比较\"></a>对战比较</h4><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1g7ywmhii7xj30pg08habl.jpg\" alt=\"2019-10-15 15-12-29 的屏幕截图.png\"></p><p>将CFR和当时流行的方法进行对战。</p><h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>提出了一种在扩展式博弈中的新的后悔值——反事实后悔值。通过最小化反事实后悔值，可以最小化总后悔值，并且提出了一种通用的方法来有效的最小化反事实后悔值。在扑克中验证了这种方法，表明这种方法可以在$10^{12}$的状态空间下计算出近似纳什均衡。</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sun Jan 19 2020 18:07:22 GMT+0800 (GMT+08:00) --><div class=\"table-container\"><table><thead><tr><th>标题</th><th>Regret Minimization in Games with Incomplete Information</th></tr></thead><tbody><tr><td>团队</td><td>Alberta</td></tr><tr><td>时间</td><td>2008</td></tr><tr><td>出处</td><td>nips</td></tr></tbody></table></div><h3 id=\"论文梗概\"><a href=\"#论文梗概\" class=\"headerlink\" title=\"论文梗概\"></a>论文梗概</h3><p>该论文的作者为阿尔伯塔大学的团队，该团队在扑克博弈方面有着深厚的积累，之前发表的DeepStack论文也是出自该作者，之后也要抽时间读一下那篇论文。</p><p>该论文主要提出了CFR算法，为双人博弈中寻找纳什均衡解提供了一种通过自我博弈迭代的方法，提供了理论上界证明，在双人有限注德州扑克对弈中进行了实验。CFR算法十分重要，之后的发展大多是在此基础上进行改进。</p><h3 id=\"背景知识\"><a href=\"#背景知识\" class=\"headerlink\" title=\"背景知识\"></a>背景知识</h3><p>对于扑克这一类游戏，可以归纳为不完全信息的扩展式博弈。扩展式博弈是指多个玩家轮流进行决策，而不是同时进行决策。不完全信息是指，与围棋、象棋不同，每个玩家对于场面上的信息不是完全掌握，具体在扑克中就是不知道对方的手牌。所以可以将信息分为私有信息和公共信息，私有信息就是玩家的手牌，公共信息就是公共牌和双方玩家的动作序列。</p><p>针对于扩展式博弈轮流进行决策的特性，可以建立出一棵博弈树，博弈树的每条边对应于玩家的一种决策。对于非玩家进行决策的内容，将其抽象为一个玩家，称为chance，可以理解成运气成分。</p><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEly1g7ysspbhu0j30hq0d575c.jpg\" alt=\"2019-10-15 12-59-16 的屏幕截图.png\"></p><p>在博弈树中一个重要概念就是信息集，我的理解是对于每个人而言，将所有其具有同样信息的节点聚合起来，称为信息集。就扑克而言，同一个信息集的两个状态，具有相同的初始手牌和双方相同的动作序列，唯一的不同在于对手的手牌不同，但这一点对于本方玩家是不知道的，所以具有相同信息集。信息集的重要意义在于可以为这些状态制定一个统一的策略，这也符合人类制定策略的直觉。即当我们掌握相同的信息时，制定的策略一般都是相同的。</p><p>策略就是对于玩家在某个信息集下，执行每一种动作的可能，也就是对于可行动作的概率分布。讲所有玩家的策略组合在一起，就是一个策略组合，当一个策略组合确定下来后，就可以求出博弈树下到达每一个节点的概率了。</p><p>进行一场博弈肯定会有输赢，博弈树中的所有节点就是终止节点，可以根据游戏规则计算出输赢的金钱，也就是该节点的收益。当确定了概率组合之后，也就可以算出每个玩家的总体期望收益了。</p><p>在制定博弈策略时，两个重要策略是最佳应对策略和纳什均衡策略。</p><p>最佳应对策略是指假设对手的策略固定，那么找一个策略使得我能赢的期望收益最大，这个策略就是最佳应对策略。</p><p>纳什均衡策略是指双方的策略达到了一种动态均衡，互相为对方的最佳应对策略，假如某一方改变策略，必定会损失金钱。</p><p>评价一个策略的好坏的一个指标是可利用性。可利用性是指对方采用最佳应对策略与我的策略进行对打，对方的期望收益是多少。可利用性越低，说明我们在实际中输的可能性越小。当可利用性为0时，就说明我的策略是那是纳什均衡策略，无论对方的策略是什么，我都能保证我不会输钱。</p><p>由于双人扑克博弈时零和博弈，所以在纳什均衡解下双方的金币为0。</p><p>下面用一些数学符号来定义这些概念。</p><div class=\"table-container\"><table><thead><tr><th>符号</th><th>意义</th></tr></thead><tbody><tr><td>$N = {0, 1, … n - 1}$</td><td>玩家集合</td></tr><tr><td>$H $</td><td>历史动作序列，也可以看成状态，博弈树上的每一个点</td></tr><tr><td>$Z,\\; Z \\subseteq H$</td><td>叶子节点集合</td></tr><tr><td>$P(h) \\in N \\cup \\{c\\}$</td><td>定义了每一个状态的行动者，可能为玩家或者chance</td></tr><tr><td>$f_c(a \\vert h)$</td><td>在状态h下，行动玩家为 $P(h)=c$ , 执行动作 $a$ 的概率</td></tr><tr><td>$I_i \\subseteq \\{h\\in H:p(h)=i\\}$</td><td>信息集，为所有决策玩家为i的决策点的一个划分，信息集之间互不相交。</td></tr><tr><td>$u_i(z)$</td><td>为叶子节点 $z$ 对于玩家 $i$ 的收益</td></tr><tr><td>$\\triangle_{u, i} = max_zu_i(z) - min_z u_i(z)$</td><td>玩家i的收益范围</td></tr><tr><td>$\\sigma_i(a\\vert I)$</td><td>玩家i的策略</td></tr><tr><td>$\\pi^\\sigma(h)$</td><td>在策略组合$\\sigma$ 下到达状态h的概率</td></tr><tr><td>$\\pi_i^\\sigma(h)$</td><td>在策略组合$\\sigma$下玩家i的策略对到达状态h的概率的贡献</td></tr><tr><td>$\\pi_{-i}^\\sigma(h)$</td><td>在策略组合$\\sigma$下其他玩家的策略对到达状态h的概率的贡献</td></tr><tr><td>$\\pi^\\sigma(I) = \\sum_{h\\in I}\\pi^\\sigma(h)$</td><td>在策略组合$\\sigma$ 下到达信息集I的概率</td></tr><tr><td>$u_i(\\sigma)=\\sum_{h\\in Z}u_i(h)\\pi^\\sigma(h)$</td><td>策略组合下玩家i的期望收益</td></tr><tr><td>$u_1(\\sigma^\\star) = \\max_{\\sigma_1’\\in\\Sigma_1}u_1(\\sigma_1’, \\sigma_2)$</td><td>对于$\\sigma_2$的最佳应对策略</td></tr></tbody></table></div><h3 id=\"后悔值最小化\"><a href=\"#后悔值最小化\" class=\"headerlink\" title=\"后悔值最小化\"></a>后悔值最小化</h3><p>后悔值最小化是一个在线方法，用来求解纳什均衡的通用方法，在每一次迭代中，寻找一个最佳策略，使得用这个策略去和前几轮的的对手打，获得的平均收益最大。</p><p>定义平均总后悔值为</p><script type=\"math/tex;mode=display\">R_i^T = \\frac{1}{T}\\max_{\\sigma_i^*\\in\\Sigma_i}\\sum_{t=1}^T (u_i(\\sigma_i^*,\\sigma_{-i}^t) - u_i(\\sigma^t))</script><p>再定义平均策略</p><script type=\"math/tex;mode=display\">\\overline{\\sigma}_i^t(a|I) = \\frac{\\sum_{t=1}^T\\pi_i^{\\sigma^t}(I)\\sigma^t(a|I)}{\\sum_{t=1}^T\\pi_i^{\\sigma^t}(I)}</script><blockquote><p>定理: 当平均总后悔值小于 $\\epsilon$ ，平均策略为 $2\\epsilon$ 纳什均衡策略。</p></blockquote><p>所以，如果能最小化平均总后悔值，就等于找到求解纳什均衡的一种方法，</p><h3 id=\"反事实后悔值\"><a href=\"#反事实后悔值\" class=\"headerlink\" title=\"反事实后悔值\"></a>反事实后悔值</h3><p>定义反事实收益为在达到信息集I的前提下，所有玩家使用策略组合$\\sigma$ ，玩家i使用固定到达信息机 $I$ 的策略下的 期望收益。</p><script type=\"math/tex;mode=display\">u_i(\\sigma, I) = \\frac{\\sum_{h\\in I, z\\in Z}\\pi^\\sigma_{-i}(h)\\pi^\\sigma(h, z)u_i(z)}{\\pi_{-i}^\\sigma(I)}</script><p>定义 $\\sigma\\vert_{I \\to a}$ 表示玩家$i$ 在信息机$I$ 下改变策略选择动作 $a$，其他玩家不变。则立刻反事实后悔值为</p><script type=\"math/tex;mode=display\">R_{i, imm}^T(I) = \\frac{1}{T}\\max_{a\\in A(I)} \\sum_{t=1}^T \\pi_{-i}^{\\sigma^t}(I)(u_i(\\sigma^t\\vert_{I\\to a}, I) - u_i(\\sigma^t, I))</script><script type=\"math/tex;mode=display\">R_{i, imm}^{T, +} = max(R_{i, imm}^T, 0)</script><blockquote><p>定理: $R_i^T \\le \\sum_{I \\in I_i} R_{i, imm}^{T, +}(I)$</p></blockquote><p>由该定理可知最小化立刻反事实后悔值之和，就可以最小化平均总后悔值，也就是在逼近纳什均衡策略。</p><p>立刻反事实后悔值的好处是，可以通过策略的迭代来最小化该后悔值。</p><p>对于所有信息集的每一个动作，维护</p><script type=\"math/tex;mode=display\">R_i^T(I, a) = \\frac{1}{T}  \\sum_{t=1}^T \\pi_{-i}^{\\sigma^t}(I)(u_i(\\sigma^t\\vert_{I\\to a}, a) - u_i(\\sigma^t, I))</script><p>则策略迭代方式为根据该后悔值的大小按比例分配，若所有后悔值的大小都小于0，则随机挑选动作，具体而言</p><script type=\"math/tex;mode=display\">\\sigma_i^{T+1}(a \\vert I) = \\left\\{\n\\begin{aligned}\n&\\frac{R_i^{T,+}(I, a)}{\\sum_{a\\in A(I)}R_i^{T, +}(I, a)}  & &if \\; \\Sigma_{a\\in A(i)} R_i^{T, +}(I, a) > 0\\\\\n&\\frac{1}{\\vert A(I) \\vert}  &  & otherwise \n\\end{aligned}\n\\right.</script><blockquote><p>定理: $R_{i, imm} ^T \\le \\triangle_{u, i}\\sqrt{\\vert A_i} \\vert / \\sqrt{T}$, $R_i^T \\le \\triangle_{u, i}\\vert I_i \\vert\\sqrt{\\vert A_i} \\vert / \\sqrt{T}$</p></blockquote><h3 id=\"双人德州扑克应用\"><a href=\"#双人德州扑克应用\" class=\"headerlink\" title=\"双人德州扑克应用\"></a>双人德州扑克应用</h3><p>分为两个步骤进行，首先对游戏进行抽象，将游戏状态进行缩减，再使用CFR算法求解。</p><p>在进行抽象时，不改变下注结构，而是对卡牌进行抽象。将卡牌按照牌力大小的平方分成10组，使用平方的原因时当牌力越大时，人们对于自己可能会赢越自信。</p><h3 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h3><h4 id=\"计算方法\"><a href=\"#计算方法\" class=\"headerlink\" title=\"计算方法\"></a>计算方法</h4><p>在德州扑克中，双方的博弈胜负结果用 mbb/h 表示，mbb 表示大盲下注的千分之一，h表示每一手，整体含义是平均每局能赢钱数与大盲下注量的比例。</p><p>一般来说小盲下注量为50， 大盲下注量为100，则在双人中每把牌都fold的结果是 750 mbb/h。如果双方对战结果是 10mbb/h, 那么在统计上来说打一百万场才有 95%的胜率。</p><p>可利用性可以认为是与纳什均衡之间的差距，但是在大博弈树下直接计算十分困难，一般采用和较高水准的对手进行多次博弈，计算mbb/h来衡量。虽然策略之间不存在传递性，但是可以大概衡量策略的好坏。</p><p>在抽象游戏下，计算可利用性的复杂度降低，但是计算出来的可利用性并不等于原空间下的可利用性。</p><p>该论文 通过 $2*10^9$ 次迭代，在抽象空间中达到了 2.2 mbb/h。</p><h4 id=\"收敛速度\"><a href=\"#收敛速度\" class=\"headerlink\" title=\"收敛速度\"></a>收敛速度</h4><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1g7ywj2njd2j30ve0e0aby.jpg\" alt=\"2019-10-15 15-09-24 的屏幕截图.png\"></p><p>对于抽象组数进行了比较，抽象组数可以表示状态空间/信息集的大小，认为收敛所需的迭代次数与状态空间成线性关系，为之前的定理提供依据。</p><h4 id=\"对战比较\"><a href=\"#对战比较\" class=\"headerlink\" title=\"对战比较\"></a>对战比较</h4><p><img src=\"https://ww1.sinaimg.cn/large/006A69aEgy1g7ywmhii7xj30pg08habl.jpg\" alt=\"2019-10-15 15-12-29 的屏幕截图.png\"></p><p>将CFR和当时流行的方法进行对战。</p><h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>提出了一种在扩展式博弈中的新的后悔值——反事实后悔值。通过最小化反事实后悔值，可以最小化总后悔值，并且提出了一种通用的方法来有效的最小化反事实后悔值。在扑克中验证了这种方法，表明这种方法可以在$10^{12}$的状态空间下计算出近似纳什均衡。</p><!-- rebuild by neat -->"}],"PostAsset":[],"PostCategory":[{"post_id":"ck5kuwy1h0005gz4d6usyszzd","category_id":"ck5kuwy1f0002gz4dzmuyhheg","_id":"ck5kuwy1l000dgz4ddgfof2zu"},{"post_id":"ck5kuwy1b0000gz4dlk3epgwu","category_id":"ck5kuwy1f0002gz4dzmuyhheg","_id":"ck5kuwy1m000igz4d4fzgi5fn"},{"post_id":"ck5kuwy1e0001gz4d12n7p6n6","category_id":"ck5kuwy1f0002gz4dzmuyhheg","_id":"ck5kuwy1o000mgz4dyx33f317"},{"post_id":"ck5kuwy1m000hgz4d9oozwywb","category_id":"ck5kuwy1f0002gz4dzmuyhheg","_id":"ck5kuwy1q000rgz4djshn348l"},{"post_id":"ck5kuwy1g0004gz4dx9sczigf","category_id":"ck5kuwy1f0002gz4dzmuyhheg","_id":"ck5kuwy1r000vgz4drk8ngy2f"},{"post_id":"ck5kuwy1n000kgz4deh4adriu","category_id":"ck5kuwy1f0002gz4dzmuyhheg","_id":"ck5kuwy1t000zgz4d4a4fe9u0"},{"post_id":"ck5kuwy1o000ogz4dg4rribqt","category_id":"ck5kuwy1f0002gz4dzmuyhheg","_id":"ck5kuwy1u0013gz4d1s8lm9kc"},{"post_id":"ck5kuwy1i0006gz4d2fetvbp7","category_id":"ck5kuwy1o000lgz4dcgbjznx6","_id":"ck5kuwy1u0016gz4d1iigmnhb"},{"post_id":"ck5kuwy1r000ugz4dpp80l6jf","category_id":"ck5kuwy1o000lgz4dcgbjznx6","_id":"ck5kuwy1v001agz4d2b2icysz"},{"post_id":"ck5kuwy1k000agz4diub867dc","category_id":"ck5kuwy1o000lgz4dcgbjznx6","_id":"ck5kuwy1w001dgz4d0q5zi30k"},{"post_id":"ck5kuwy1s000ygz4dgp19d6mj","category_id":"ck5kuwy1f0002gz4dzmuyhheg","_id":"ck5kuwy1w001ggz4d42zgzxqt"},{"post_id":"ck5kuwy1l000cgz4dtebf95nw","category_id":"ck5kuwy1o000lgz4dcgbjznx6","_id":"ck5kuwy1w001igz4drmkwfctz"},{"post_id":"ck5kuwy1p000qgz4d6i68g3ab","category_id":"ck5kuwy1v0017gz4dr7wy3cvb","_id":"ck5kuwy1w001lgz4dq9t7gseo"},{"post_id":"ck5kuwy1t0012gz4d8yyyvmsy","category_id":"ck5kuwy1w001egz4dju8qh3ha","_id":"ck5kuwy1x001ngz4djy81nmq8"},{"post_id":"ck5kuwy1u0015gz4ddu9eebiu","category_id":"ck5kuwy1w001kgz4dqaso911o","_id":"ck5kuwy1x001pgz4dl6l7f2kk"},{"post_id":"ck5kuwy1v0019gz4dl6jgihss","category_id":"ck5kuwy1x001ogz4drjbqxfe1","_id":"ck5kuwy1x001tgz4d3k8rc8l5"},{"post_id":"ck5kuwy2i001ugz4d5lej2ph8","category_id":"ck5kuwy1x001ogz4drjbqxfe1","_id":"ck5kuwy2o0022gz4dxpoah1yn"},{"post_id":"ck5kuwy2j001wgz4deinuv517","category_id":"ck5kuwy1x001ogz4drjbqxfe1","_id":"ck5kuwy2p0024gz4duz8t9bo8"},{"post_id":"ck5kuwy2n001zgz4d9x5w5hgt","category_id":"ck5kuwy1x001ogz4drjbqxfe1","_id":"ck5kuwy2p0026gz4dsd60w6bb"}],"PostTag":[{"post_id":"ck5kuwy1h0005gz4d6usyszzd","tag_id":"ck5kuwy1g0003gz4dh5b83c7v","_id":"ck5kuwy1k0009gz4dlqqgc8fb"},{"post_id":"ck5kuwy1b0000gz4dlk3epgwu","tag_id":"ck5kuwy1g0003gz4dh5b83c7v","_id":"ck5kuwy1k000bgz4dnhri5ttb"},{"post_id":"ck5kuwy1i0006gz4d2fetvbp7","tag_id":"ck5kuwy1g0003gz4dh5b83c7v","_id":"ck5kuwy1m000ggz4d9owftue9"},{"post_id":"ck5kuwy1k000agz4diub867dc","tag_id":"ck5kuwy1g0003gz4dh5b83c7v","_id":"ck5kuwy1n000jgz4dlxmr2pg1"},{"post_id":"ck5kuwy1e0001gz4d12n7p6n6","tag_id":"ck5kuwy1g0003gz4dh5b83c7v","_id":"ck5kuwy1o000ngz4d69gyiede"},{"post_id":"ck5kuwy1l000cgz4dtebf95nw","tag_id":"ck5kuwy1g0003gz4dh5b83c7v","_id":"ck5kuwy1p000pgz4d2bukvios"},{"post_id":"ck5kuwy1m000hgz4d9oozwywb","tag_id":"ck5kuwy1g0003gz4dh5b83c7v","_id":"ck5kuwy1r000tgz4dtudaj3if"},{"post_id":"ck5kuwy1g0004gz4dx9sczigf","tag_id":"ck5kuwy1g0003gz4dh5b83c7v","_id":"ck5kuwy1s000xgz4dts10is2j"},{"post_id":"ck5kuwy1n000kgz4deh4adriu","tag_id":"ck5kuwy1g0003gz4dh5b83c7v","_id":"ck5kuwy1t0011gz4dkm7sapsg"},{"post_id":"ck5kuwy1o000ogz4dg4rribqt","tag_id":"ck5kuwy1g0003gz4dh5b83c7v","_id":"ck5kuwy1u0014gz4dbrwzmhr4"},{"post_id":"ck5kuwy1r000ugz4dpp80l6jf","tag_id":"ck5kuwy1g0003gz4dh5b83c7v","_id":"ck5kuwy1v0018gz4d5bdqotdr"},{"post_id":"ck5kuwy1s000ygz4dgp19d6mj","tag_id":"ck5kuwy1g0003gz4dh5b83c7v","_id":"ck5kuwy1w001cgz4dy01r7ume"},{"post_id":"ck5kuwy1p000qgz4d6i68g3ab","tag_id":"ck5kuwy1s000wgz4dv0hwez3l","_id":"ck5kuwy1w001fgz4dmek74tjm"},{"post_id":"ck5kuwy1u0015gz4ddu9eebiu","tag_id":"ck5kuwy1w001bgz4d0gmg9bmv","_id":"ck5kuwy1w001jgz4dvysvkyoq"},{"post_id":"ck5kuwy1v0019gz4dl6jgihss","tag_id":"ck5kuwy1g0003gz4dh5b83c7v","_id":"ck5kuwy1x001qgz4dpk31i9aw"},{"post_id":"ck5kuwy1v0019gz4dl6jgihss","tag_id":"ck5kuwy1w001hgz4d80bpm2ia","_id":"ck5kuwy1x001rgz4dgdur97s9"},{"post_id":"ck5kuwy1v0019gz4dl6jgihss","tag_id":"ck5kuwy1x001mgz4dfbgac2hl","_id":"ck5kuwy1x001sgz4dh14ri1ll"},{"post_id":"ck5kuwy2i001ugz4d5lej2ph8","tag_id":"ck5kuwy1g0003gz4dh5b83c7v","_id":"ck5kuwy2n001ygz4d56zfwkqt"},{"post_id":"ck5kuwy2i001ugz4d5lej2ph8","tag_id":"ck5kuwy1w001hgz4d80bpm2ia","_id":"ck5kuwy2o0021gz4d8k7e5hpt"},{"post_id":"ck5kuwy2i001ugz4d5lej2ph8","tag_id":"ck5kuwy1x001mgz4dfbgac2hl","_id":"ck5kuwy2p0023gz4d7lgko8e6"},{"post_id":"ck5kuwy2j001wgz4deinuv517","tag_id":"ck5kuwy1w001hgz4d80bpm2ia","_id":"ck5kuwy2p0025gz4dop04otoj"},{"post_id":"ck5kuwy2j001wgz4deinuv517","tag_id":"ck5kuwy1g0003gz4dh5b83c7v","_id":"ck5kuwy2p0027gz4dv6fzu4aa"},{"post_id":"ck5kuwy2j001wgz4deinuv517","tag_id":"ck5kuwy1x001mgz4dfbgac2hl","_id":"ck5kuwy2p0028gz4dd4xyo8n1"},{"post_id":"ck5kuwy2n001zgz4d9x5w5hgt","tag_id":"ck5kuwy1g0003gz4dh5b83c7v","_id":"ck5kuwy2p0029gz4dq3hme9lc"},{"post_id":"ck5kuwy2n001zgz4d9x5w5hgt","tag_id":"ck5kuwy1w001hgz4d80bpm2ia","_id":"ck5kuwy2p002agz4dghhr6ww8"},{"post_id":"ck5kuwy2n001zgz4d9x5w5hgt","tag_id":"ck5kuwy1x001mgz4dfbgac2hl","_id":"ck5kuwy2q002bgz4d0461ht68"}],"Tag":[{"name":"RL","_id":"ck5kuwy1g0003gz4dh5b83c7v"},{"name":"ML","_id":"ck5kuwy1s000wgz4dv0hwez3l"},{"name":"Server","_id":"ck5kuwy1w001bgz4d0gmg9bmv"},{"name":"Paper","_id":"ck5kuwy1w001hgz4d80bpm2ia"},{"name":"CFR","_id":"ck5kuwy1x001mgz4dfbgac2hl"}]}}